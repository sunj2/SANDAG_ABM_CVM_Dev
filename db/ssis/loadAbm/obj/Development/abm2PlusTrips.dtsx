<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="7/13/2020 12:15:03 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="SDG80175"
  DTS:CreatorName="SANDAGNET\gsc"
  DTS:DelayValidation="True"
  DTS:DTSID="{BF6B7D52-FA15-4126-8BE2-82B200ABC6AB}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:FailParentOnFailure="True"
  DTS:LastModifiedProductVersion="15.0.2000.93"
  DTS:LocaleID="1033"
  DTS:MaxErrorCount="0"
  DTS:ObjectName="abm2PlusTrips"
  DTS:PackageType="5"
  DTS:VersionBuild="67"
  DTS:VersionGUID="{E33D1BBD-C292-482E-8B32-01FB913CBE5B}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:PackageParameters>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:Description="file path of the scenario folder"
      DTS:DTSID="{76E7A916-44BD-4791-BF68-0244826D17BB}"
      DTS:ObjectName="scenarioFilePath"
      DTS:Required="True">
      <DTS:Property
        DTS:DataType="8"
        DTS:Name="ParameterValue"
        xml:space="preserve"></DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="3"
      DTS:Description="database scenario_id of the scenario"
      DTS:DTSID="{18A75714-5C83-4DDF-8F16-8D35AA06028A}"
      DTS:ObjectName="scenarioID"
      DTS:Required="True">
      <DTS:Property
        DTS:DataType="3"
        DTS:Name="ParameterValue">0</DTS:Property>
    </DTS:PackageParameter>
  </DTS:PackageParameters>
  <DTS:Variables />
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\insertTours"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:DelayValidation="True"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{7c9f83ff-ba19-4ec7-9343-7ea2f6f974e8}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:FailPackageOnFailure="True"
      DTS:FailParentOnFailure="True"
      DTS:LocaleID="-1"
      DTS:MaxErrorCount="0"
      DTS:ObjectName="insertTours"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2017 RC1; Â© 2017 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{A2745192-1304-4CAD-B395-584AC14AA8AD}"
          SQLTask:SqlStatementSource="SET NOCOUNT ON&#xA;DECLARE @scenario_id integer = ?;&#xA;&#xA;&#xA;&#xA;&#xA;-- reseed identity to 0 (sets to 1 since records are in the table) for new scenario&#xA;-- do so only if records are in the table, otherwise seed is already set to 1&#xA;IF EXISTS (SELECT TOP 1 [scenario_id] FROM [dimension].[tour])&#xA;DBCC CHECKIDENT ('dimension.tour', RESEED, 0)&#xA;&#xA;&#xA;&#xA;&#xA;-- insert commercial vehicle tours -------------------------------------------&#xA;&#xA;-- insert into tour dimension table&#xA;INSERT INTO [dimension].[tour] (&#xA;    [scenario_id]&#xA;    ,[model_tour_id]&#xA;    ,[abm_tour_id]&#xA;    ,[time_tour_start_id]&#xA;    ,[time_tour_end_id]&#xA;    ,[geography_tour_origin_id]&#xA;    ,[geography_tour_destination_id]&#xA;    ,[mode_tour_id]&#xA;    ,[purpose_tour_id]&#xA;    ,[tour_category]&#xA;    ,[tour_crossborder_point_of_entry]&#xA;    ,[tour_crossborder_sentri])&#xA;SELECT&#xA;    @scenario_id AS [scenario_id]&#xA;    ,(SELECT [model_tour_id] FROM [dimension].[model_tour] WHERE [model_tour_description] = 'Commercial Vehicle') AS [model_tour_id]&#xA;    ,[tourID] AS [abm_tour_id]&#xA;    ,[time_tour_start].[time_tour_start_id]&#xA;    ,[time_tour_end].[time_tour_end_id]&#xA;    ,[geography_tour_origin].[geography_tour_origin_id]&#xA;    ,0 AS [geography_tour_destination_id]  -- hardcoded NULL value&#xA;    ,[mode_tour].[mode_tour_id]&#xA;    ,[purpose_tour].[purpose_tour_id]&#xA;    ,[actorType] AS [tour_category]&#xA;    ,'Not Applicable' AS [tour_crossborder_point_of_entry]&#xA;    ,'Not Applicable' AS [tour_crossborder_sentri]&#xA;FROM&#xA;    [staging].[commercialVehicleTours]&#xA;LEFT OUTER JOIN  -- throws insert error on unexpected value since column is not nullable&#xA;    [dimension].[time_tour_start]&#xA;ON&#xA;    CONVERT(nvarchar, [commercialVehicleTours].[departTimeAbmHalfHour]) = [time_tour_start].[tour_start_abm_half_hour]&#xA;LEFT OUTER JOIN  -- throws insert error on unexpected value since column is not nullable&#xA;    [dimension].[time_tour_end]&#xA;ON&#xA;    CONVERT(nvarchar, [commercialVehicleTours].[arriveTimeAbmHalfHour]) = [time_tour_end].[tour_end_abm_half_hour]&#xA;LEFT OUTER JOIN  -- throws insert error on unexpected value since column is not nullable&#xA;    [dimension].[geography_tour_origin]&#xA;ON&#xA;    [geography_tour_origin].[tour_origin_mgra_13] = 'Not Applicable'&#xA;    AND CONVERT(nvarchar, [commercialVehicleTours].[originTAZ]) = [geography_tour_origin].[tour_origin_taz_13]&#xA;LEFT OUTER JOIN  -- throws insert error on unexpected value since column is not nullable&#xA;    [dimension].[mode_tour]&#xA;ON&#xA;    [commercialVehicleTours].[tourMode] = [mode_tour].[mode_tour_description]&#xA;LEFT OUTER JOIN  -- throws insert error on unexpected value since column is not nullable&#xA;    [dimension].[purpose_tour]&#xA;ON&#xA;    [commercialVehicleTours].[tourPurpose] = [purpose_tour].[purpose_tour_description]&#xA;&#xA;&#xA;&#xA;&#xA;-- insert cross border tours -------------------------------------------------&#xA;&#xA;-- insert into tour dimension table&#xA;INSERT INTO [dimension].[tour] (&#xA;    [scenario_id]&#xA;    ,[model_tour_id]&#xA;    ,[abm_tour_id]&#xA;    ,[time_tour_start_id]&#xA;    ,[time_tour_end_id]&#xA;    ,[geography_tour_origin_id]&#xA;    ,[geography_tour_destination_id]&#xA;    ,[mode_tour_id]&#xA;    ,[purpose_tour_id]&#xA;    ,[tour_category]&#xA;    ,[tour_crossborder_point_of_entry]&#xA;    ,[tour_crossborder_sentri])&#xA;SELECT&#xA;    @scenario_id AS [scenario_id]&#xA;    ,(SELECT [model_tour_id] FROM [dimension].[model_tour] WHERE [model_tour_description] = 'Cross Border') AS [model_tour_id]&#xA;    ,[tourID] AS [abm_tour_id]&#xA;    ,[time_tour_start].[time_tour_start_id]&#xA;    ,[time_tour_end].[time_tour_end_id]&#xA;    ,[geography_tour_origin].[geography_tour_origin_id]&#xA;    ,[geography_tour_destination].[geography_tour_destination_id]&#xA;    ,[mode_tour].[mode_tour_id]&#xA;    ,[purpose_tour].[purpose_tour_id]&#xA;    ,'Not Applicable' AS [tour_category]&#xA;    ,[point_of_entry] AS [tour_crossborder_point_of_entry]&#xA;    ,[sentri] AS [tour_crossborder_sentri]&#xA;FROM&#xA;    [staging].[crossBorderTours]&#xA;LEFT OUTER JOIN  -- throws insert error on unexpected value since column is not nullable&#xA;    [dimension].[time_tour_start]&#xA;ON&#xA;    CONVERT(nvarchar, [crossBorderTours].[departTimeAbmHalfHour]) = [time_tour_start].[tour_start_abm_half_hour]&#xA;LEFT OUTER JOIN  -- throws insert error on unexpected value since column is not nullable&#xA;    [dimension].[time_tour_end]&#xA;ON&#xA;    CONVERT(nvarchar, [crossBorderTours].[arriveTimeAbmHalfHour]) = [time_tour_end].[tour_end_abm_half_hour]&#xA;LEFT OUTER JOIN  -- throws insert error on unexpected value since column is not nullable&#xA;    [dimension].[geography_tour_origin]&#xA;ON&#xA;    CONVERT(nvarchar, [crossBorderTours].[originMGRA]) = [geography_tour_origin].[tour_origin_mgra_13]&#xA;LEFT OUTER JOIN  -- throws insert error on unexpected value since column is not nullable&#xA;    [dimension].[geography_tour_destination]&#xA;ON&#xA;    CONVERT(nvarchar, [crossBorderTours].[originMGRA]) = [geography_tour_destination].[tour_destination_mgra_13]&#xA;LEFT OUTER JOIN  -- throws insert error on unexpected value since column is not nullable&#xA;    [dimension].[mode_tour]&#xA;ON&#xA;    [crossBorderTours].[tourMode] = [mode_tour].[mode_tour_description]&#xA;LEFT OUTER JOIN  -- throws insert error on unexpected value since column is not nullable&#xA;    [dimension].[purpose_tour]&#xA;ON&#xA;    [crossBorderTours].[tourPurpose] = [purpose_tour].[purpose_tour_description]&#xA;&#xA;&#xA;&#xA;&#xA;-- insert individual tours ---------------------------------------------------&#xA;&#xA;-- insert into tour dimension table&#xA;INSERT INTO [dimension].[tour] (&#xA;    [scenario_id]&#xA;    ,[model_tour_id]&#xA;    ,[abm_tour_id]&#xA;    ,[time_tour_start_id]&#xA;    ,[time_tour_end_id]&#xA;    ,[geography_tour_origin_id]&#xA;    ,[geography_tour_destination_id]&#xA;    ,[mode_tour_id]&#xA;    ,[purpose_tour_id]&#xA;    ,[tour_category]&#xA;    ,[tour_crossborder_point_of_entry]&#xA;    ,[tour_crossborder_sentri])&#xA;SELECT&#xA;    @scenario_id AS [scenario_id]&#xA;    ,(SELECT [model_tour_id] FROM [dimension].[model_tour] WHERE [model_tour_description] = 'Individual') AS [model_tour_id]&#xA;    ,[tourID] AS [abm_tour_id]&#xA;    ,[time_tour_start].[time_tour_start_id]&#xA;    ,[time_tour_end].[time_tour_end_id]&#xA;    ,[geography_tour_origin].[geography_tour_origin_id]&#xA;    ,[geography_tour_destination].[geography_tour_destination_id]&#xA;    ,[mode_tour].[mode_tour_id]&#xA;    ,[purpose_tour].[purpose_tour_id]&#xA;    ,[tourCategory] AS [tour_category]&#xA;    ,'Not Applicable' AS [tour_crossborder_point_of_entry]&#xA;    ,'Not Applicable' AS [tour_crossborder_sentri]&#xA;FROM&#xA;    [staging].[individualTours]&#xA;LEFT OUTER JOIN  -- throws insert error on unexpected value since column is not nullable&#xA;    [dimension].[time_tour_start]&#xA;ON&#xA;    CONVERT(nvarchar, [individualTours].[departTimeAbmHalfHour]) = [time_tour_start].[tour_start_abm_half_hour]&#xA;LEFT OUTER JOIN  -- throws insert error on unexpected value since column is not nullable&#xA;    [dimension].[time_tour_end]&#xA;ON&#xA;    CONVERT(nvarchar, [individualTours].[arriveTimeAbmHalfHour]) = [time_tour_end].[tour_end_abm_half_hour]&#xA;LEFT OUTER JOIN  -- throws insert error on unexpected value since column is not nullable&#xA;    [dimension].[geography_tour_origin]&#xA;ON&#xA;    CONVERT(nvarchar, [individualTours].[originMGRA]) = [geography_tour_origin].[tour_origin_mgra_13]&#xA;LEFT OUTER JOIN  -- throws insert error on unexpected value since column is not nullable&#xA;    [dimension].[geography_tour_destination]&#xA;ON&#xA;    CONVERT(nvarchar, [individualTours].[originMGRA]) = [geography_tour_destination].[tour_destination_mgra_13]&#xA;LEFT OUTER JOIN  -- throws insert error on unexpected value since column is not nullable&#xA;    [dimension].[mode_tour]&#xA;ON&#xA;    [individualTours].[tourMode] = [mode_tour].[mode_tour_description]&#xA;LEFT OUTER JOIN  -- throws insert error on unexpected value since column is not nullable&#xA;    [dimension].[purpose_tour]&#xA;ON&#xA;    [individualTours].[tourPurpose] = [purpose_tour].[purpose_tour_description]&#xA;&#xA;&#xA;&#xA;&#xA;-- insert internal-external tours --------------------------------------------&#xA;&#xA;-- insert into tour dimension table&#xA;INSERT INTO [dimension].[tour] (&#xA;    [scenario_id]&#xA;    ,[model_tour_id]&#xA;    ,[abm_tour_id]&#xA;    ,[time_tour_start_id]&#xA;    ,[time_tour_end_id]&#xA;    ,[geography_tour_origin_id]&#xA;    ,[geography_tour_destination_id]&#xA;    ,[mode_tour_id]&#xA;    ,[purpose_tour_id]&#xA;    ,[tour_category]&#xA;    ,[tour_crossborder_point_of_entry]&#xA;    ,[tour_crossborder_sentri])&#xA;SELECT&#xA;    @scenario_id AS [scenario_id]&#xA;    ,(SELECT [model_tour_id] FROM [dimension].[model_tour] WHERE [model_tour_description] = 'Internal-External') AS [model_tour_id]&#xA;    ,[tourID] AS [abm_tour_id]&#xA;    ,[time_tour_start].[time_tour_start_id]&#xA;    ,[time_tour_end].[time_tour_end_id]&#xA;    ,[geography_tour_origin].[geography_tour_origin_id]&#xA;    ,[geography_tour_destination].[geography_tour_destination_id]&#xA;    ,[mode_tour].[mode_tour_id]&#xA;    ,(SELECT [purpose_tour_id] FROM [dimension].[purpose_tour] WHERE [purpose_tour_description] = 'Not Applicable') AS [purpose_tour_id]&#xA;    ,'Not Applicable' AS [tour_category]&#xA;    ,'Not Applicable' AS [tour_crossborder_point_of_entry]&#xA;    ,'Not Applicable' AS [tour_crossborder_sentri]&#xA;FROM&#xA;    [staging].[internalExternalTours]&#xA;LEFT OUTER JOIN  -- throws insert error on unexpected value since column is not nullable&#xA;    [dimension].[time_tour_start]&#xA;ON&#xA;    CONVERT(nvarchar, [internalExternalTours].[departTimeAbmHalfHour]) = [time_tour_start].[tour_start_abm_half_hour]&#xA;LEFT OUTER JOIN  -- throws insert error on unexpected value since column is not nullable&#xA;    [dimension].[time_tour_end]&#xA;ON&#xA;    CONVERT(nvarchar, [internalExternalTours].[arriveTimeAbmHalfHour]) = [time_tour_end].[tour_end_abm_half_hour]&#xA;LEFT OUTER JOIN  -- throws insert error on unexpected value since column is not nullable&#xA;    [dimension].[geography_tour_origin]&#xA;ON&#xA;    CONVERT(nvarchar, [internalExternalTours].[originMGRA]) = [geography_tour_origin].[tour_origin_mgra_13]&#xA;LEFT OUTER JOIN  -- throws insert error on unexpected value since column is not nullable&#xA;    [dimension].[geography_tour_destination]&#xA;ON&#xA;    CONVERT(nvarchar, [internalExternalTours].[originMGRA]) = [geography_tour_destination].[tour_destination_mgra_13]&#xA;LEFT OUTER JOIN  -- throws insert error on unexpected value since column is not nullable&#xA;    [dimension].[mode_tour]&#xA;ON&#xA;    [internalExternalTours].[tourMode] = [mode_tour].[mode_tour_description]&#xA;&#xA;&#xA;&#xA;&#xA;-- insert joint tours --------------------------------------------------------&#xA;&#xA;-- insert into tour dimension table&#xA;INSERT INTO [dimension].[tour] (&#xA;    [scenario_id]&#xA;    ,[model_tour_id]&#xA;    ,[abm_tour_id]&#xA;    ,[time_tour_start_id]&#xA;    ,[time_tour_end_id]&#xA;    ,[geography_tour_origin_id]&#xA;    ,[geography_tour_destination_id]&#xA;    ,[mode_tour_id]&#xA;    ,[purpose_tour_id]&#xA;    ,[tour_category]&#xA;    ,[tour_crossborder_point_of_entry]&#xA;    ,[tour_crossborder_sentri])&#xA;SELECT&#xA;    @scenario_id AS [scenario_id]&#xA;    ,(SELECT [model_tour_id] FROM [dimension].[model_tour] WHERE [model_tour_description] = 'Joint') AS [model_tour_id]&#xA;    ,[tourID] AS [abm_tour_id]&#xA;    ,[time_tour_start].[time_tour_start_id]&#xA;    ,[time_tour_end].[time_tour_end_id]&#xA;    ,[geography_tour_origin].[geography_tour_origin_id]&#xA;    ,[geography_tour_destination].[geography_tour_destination_id]&#xA;    ,[mode_tour].[mode_tour_id]&#xA;    ,[purpose_tour].[purpose_tour_id]&#xA;    ,[tourCategory] AS [tour_category]&#xA;    ,'Not Applicable' AS [tour_crossborder_point_of_entry]&#xA;    ,'Not Applicable' AS [tour_crossborder_sentri]&#xA;FROM&#xA;    [staging].[jointTours]&#xA;LEFT OUTER JOIN  -- throws insert error on unexpected value since column is not nullable&#xA;    [dimension].[time_tour_start]&#xA;ON&#xA;    CONVERT(nvarchar, [jointTours].[departTimeAbmHalfHour]) = [time_tour_start].[tour_start_abm_half_hour]&#xA;LEFT OUTER JOIN  -- throws insert error on unexpected value since column is not nullable&#xA;    [dimension].[time_tour_end]&#xA;ON&#xA;    CONVERT(nvarchar, [jointTours].[arriveTimeAbmHalfHour]) = [time_tour_end].[tour_end_abm_half_hour]&#xA;LEFT OUTER JOIN  -- throws insert error on unexpected value since column is not nullable&#xA;    [dimension].[geography_tour_origin]&#xA;ON&#xA;    CONVERT(nvarchar, [jointTours].[originMGRA]) = [geography_tour_origin].[tour_origin_mgra_13]&#xA;LEFT OUTER JOIN  -- throws insert error on unexpected value since column is not nullable&#xA;    [dimension].[geography_tour_destination]&#xA;ON&#xA;    CONVERT(nvarchar, [jointTours].[originMGRA]) = [geography_tour_destination].[tour_destination_mgra_13]&#xA;LEFT OUTER JOIN  -- throws insert error on unexpected value since column is not nullable&#xA;    [dimension].[mode_tour]&#xA;ON&#xA;    [jointTours].[tourMode] = [mode_tour].[mode_tour_description]&#xA;LEFT OUTER JOIN  -- throws insert error on unexpected value since column is not nullable&#xA;    [dimension].[purpose_tour]&#xA;ON&#xA;    [jointTours].[tourPurpose] = [purpose_tour].[purpose_tour_description]&#xA;&#xA;&#xA;&#xA;&#xA;-- insert visitor tours ------------------------------------------------------&#xA;&#xA;-- insert into tour dimension table&#xA;INSERT INTO [dimension].[tour] (&#xA;    [scenario_id]&#xA;    ,[model_tour_id]&#xA;    ,[abm_tour_id]&#xA;    ,[time_tour_start_id]&#xA;    ,[time_tour_end_id]&#xA;    ,[geography_tour_origin_id]&#xA;    ,[geography_tour_destination_id]&#xA;    ,[mode_tour_id]&#xA;    ,[purpose_tour_id]&#xA;    ,[tour_category]&#xA;    ,[tour_crossborder_point_of_entry]&#xA;    ,[tour_crossborder_sentri])&#xA;SELECT&#xA;    @scenario_id AS [scenario_id]&#xA;    ,(SELECT [model_tour_id] FROM [dimension].[model_tour] WHERE [model_tour_description] = 'Visitor') AS [model_tour_id]&#xA;    ,[tourID] AS [abm_tour_id]&#xA;    ,[time_tour_start].[time_tour_start_id]&#xA;    ,[time_tour_end].[time_tour_end_id]&#xA;    ,[geography_tour_origin].[geography_tour_origin_id]&#xA;    ,[geography_tour_destination].[geography_tour_destination_id]&#xA;    ,[mode_tour].[mode_tour_id]&#xA;    ,[purpose_tour].[purpose_tour_id]&#xA;    ,[segment] AS [tour_category]&#xA;    ,'Not Applicable' AS [tour_crossborder_point_of_entry]&#xA;    ,'Not Applicable' AS [tour_crossborder_sentri]&#xA;FROM&#xA;    [staging].[visitorTours]&#xA;LEFT OUTER JOIN  -- throws insert error on unexpected value since column is not nullable&#xA;    [dimension].[time_tour_start]&#xA;ON&#xA;    CONVERT(nvarchar, [visitorTours].[departTimeAbmHalfHour]) = [time_tour_start].[tour_start_abm_half_hour]&#xA;LEFT OUTER JOIN  -- throws insert error on unexpected value since column is not nullable&#xA;    [dimension].[time_tour_end]&#xA;ON&#xA;    CONVERT(nvarchar, [visitorTours].[arriveTimeAbmHalfHour]) = [time_tour_end].[tour_end_abm_half_hour]&#xA;LEFT OUTER JOIN  -- throws insert error on unexpected value since column is not nullable&#xA;    [dimension].[geography_tour_origin]&#xA;ON&#xA;    CONVERT(nvarchar, [visitorTours].[originMGRA]) = [geography_tour_origin].[tour_origin_mgra_13]&#xA;LEFT OUTER JOIN  -- throws insert error on unexpected value since column is not nullable&#xA;    [dimension].[geography_tour_destination]&#xA;ON&#xA;    CONVERT(nvarchar, [visitorTours].[originMGRA]) = [geography_tour_destination].[tour_destination_mgra_13]&#xA;LEFT OUTER JOIN  -- throws insert error on unexpected value since column is not nullable&#xA;    [dimension].[mode_tour]&#xA;ON&#xA;    [visitorTours].[tourMode] = [mode_tour].[mode_tour_description]&#xA;LEFT OUTER JOIN  -- throws insert error on unexpected value since column is not nullable&#xA;    [dimension].[purpose_tour]&#xA;ON&#xA;    [visitorTours].[tourPurpose] = [purpose_tour].[purpose_tour_description]&#xA;&#xA;&#xA;&#xA;&#xA;-- drop staging tables -------------------------------------------------------&#xA;DROP TABLE IF EXISTS [staging].[commercialVehicleTours]&#xA;DROP TABLE IF EXISTS [staging].[crossBorderTours]&#xA;DROP TABLE IF EXISTS [staging].[individualTours]&#xA;DROP TABLE IF EXISTS [staging].[internalExternalTours]&#xA;DROP TABLE IF EXISTS [staging].[jointTours]&#xA;DROP TABLE IF EXISTS [staging].[visitorTours]&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
          <SQLTask:ParameterBinding
            SQLTask:ParameterName="0"
            SQLTask:DtsVariableName="$Package::scenarioID"
            SQLTask:ParameterDirection="Input"
            SQLTask:DataType="131"
            SQLTask:ParameterSize="-1" />
        </SQLTask:SqlTaskData>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\insertTripsAggregate"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:DelayValidation="True"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{eabc3f29-865e-4c5d-85a5-58494b6cf21a}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:FailPackageOnFailure="True"
      DTS:FailParentOnFailure="True"
      DTS:LocaleID="-1"
      DTS:MaxErrorCount="0"
      DTS:ObjectName="insertTripsAggregate"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2017 RC1; Â© 2017 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="7">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{A2745192-1304-4CAD-B395-584AC14AA8AD}"
          SQLTask:SqlStatementSource="SET NOCOUNT ON&#xA;DECLARE @scenario_id integer = ?;&#xA;&#xA;&#xA;&#xA;-- insert external-external trips --------------------------------------------&#xA;INSERT INTO [fact].[person_trip] (&#xA;    [scenario_id]&#xA;    ,[model_trip_id]&#xA;    ,[abm_trip_id]&#xA;    ,[tour_id]&#xA;    ,[person_id]&#xA;    ,[household_id]&#xA;    ,[mode_trip_id]&#xA;    ,[purpose_trip_origin_id]&#xA;    ,[purpose_trip_destination_id]&#xA;    ,[inbound_id]&#xA;    ,[time_trip_start_id]&#xA;    ,[time_trip_end_id]&#xA;    ,[geography_trip_origin_id]&#xA;    ,[geography_trip_destination_id]&#xA;    ,[geography_parking_destination_id]&#xA;    ,[transit_tap_boarding_id]&#xA;    ,[transit_tap_alighting_id]&#xA;    ,[mode_airport_arrival_id]&#xA;    ,[value_of_time_category_id]&#xA;    ,[transponder_available_id]&#xA;    ,[av_used_id]&#xA;    ,[weight_trip]&#xA;    ,[weight_person_trip]&#xA;    ,[cost_parking]&#xA;    ,[time_drive]&#xA;    ,[distance_drive]&#xA;    ,[cost_toll_drive]&#xA;    ,[cost_operating_drive]&#xA;    ,[cost_fare_drive]&#xA;    ,[time_wait_drive]&#xA;    ,[time_transit_in_vehicle]&#xA;    ,[time_tier1_transit_in_vehicle]&#xA;    ,[time_freeway_rapid_transit_in_vehicle]&#xA;    ,[time_arterial_rapid_transit_in_vehicle]&#xA;    ,[time_express_bus_transit_in_vehicle]&#xA;    ,[time_local_bus_transit_in_vehicle]&#xA;    ,[time_light_rail_transit_in_vehicle]&#xA;    ,[time_commuter_rail_transit_in_vehicle]&#xA;    ,[time_transit_initial_wait]&#xA;    ,[time_transit_wait]&#xA;    ,[distance_transit_in_vehicle]&#xA;    ,[cost_fare_transit]&#xA;    ,[transfers_transit]&#xA;    ,[time_walk]&#xA;    ,[distance_walk]&#xA;    ,[time_mm]&#xA;    ,[distance_mm]&#xA;    ,[cost_fare_mm]&#xA;    ,[time_mt]&#xA;    ,[distance_mt]&#xA;    ,[cost_fare_mt]&#xA;    ,[time_bike]&#xA;    ,[distance_bike]&#xA;    ,[time_total]&#xA;    ,[distance_total]&#xA;    ,[cost_total])&#xA;SELECT&#xA;    @scenario_id AS [scenario_id]&#xA;    ,(SELECT [model_id] FROM [dimension].[model] WHERE [model_description] = 'External-External') AS [model_trip_id]&#xA;    ,[tripID] AS [abm_trip_id]&#xA;    ,0 AS [tour_id]  -- hardcoded Not Applicable value&#xA;    ,0 AS [person_id]  -- hardcoded Not Applicable value&#xA;    ,0 AS [household_id]  -- hardcoded Not Applicable value&#xA;    ,[mode_trip_id]&#xA;    ,0 AS [purpose_trip_origin_id]  -- hardcoded Not Applicable value&#xA;    ,0 AS [purpose_trip_destination_id]  -- hardcoded Not Applicable value&#xA;    ,0 AS [inbound_id]  -- hardcoded Not Applicable value&#xA;    ,[time_trip_start_id]&#xA;    ,0 AS [time_trip_end_id]  -- hardcoded Not Applicable value&#xA;&#x9;,[geography_trip_origin_taz].[geography_trip_origin_id]&#xA;&#x9;,[geography_trip_destination_taz].[geography_trip_destination_id]&#xA;    ,0 AS [geography_parking_destination_id]  -- hardcoded Not Applicable value&#xA;    ,0 AS [transit_tap_boarding_id]  -- hardcoded Not Applicable value&#xA;&#x9;,0 AS [transit_tap_alighting_id]  -- hardcoded Not Applicable value&#xA;    ,0 AS [mode_airport_arrival_id]  -- hardcoded Not Applicable value&#xA;    ,[value_of_time_category_id]&#xA;    ,[transponder_available_id]&#xA;    ,[av_used_id]&#xA;    ,[weightTrip] AS [weight_trip]&#xA;    ,[weightPersonTrip] AS [weight_person_trip]&#xA;    ,0 AS [cost_parking]&#xA;    ,ISNULL([timeDrive], 0) AS [time_drive]&#xA;    ,ISNULL([distanceDrive], 0) AS [distance_drive]&#xA;    ,ISNULL([costTollDrive], 0) AS [cost_toll_drive]&#xA;    ,ISNULL([costOperatingDrive], 0) AS [cost_operating_drive]&#xA;    ,0 AS [cost_fare_drive]&#xA;    ,0 AS [time_wait_drive]&#xA;    ,0 AS [time_transit_in_vehicle]&#xA;    ,0 AS [time_tier1_transit_in_vehicle]&#xA;    ,0 AS [time_freeway_rapid_transit_in_vehicle]&#xA;    ,0 AS [time_arterial_rapid_transit_in_vehicle]&#xA;    ,0 AS [time_express_bus_transit_in_vehicle]&#xA;    ,0 AS [time_local_bus_transit_in_vehicle]&#xA;    ,0 AS [time_light_rail_transit_in_vehicle]&#xA;    ,0 AS [time_commuter_rail_transit_in_vehicle]&#xA;    ,0 AS [time_transit_initial_wait]&#xA;    ,0 AS [time_transit_wait]&#xA;    ,0 AS [distance_transit_in_vehicle]&#xA;    ,0 AS [cost_fare_transit]&#xA;    ,0 AS [transfers_transit]&#xA;    ,0 AS [time_walk]&#xA;    ,0 AS [distance_walk]&#xA;    ,0 AS [time_mm]&#xA;    ,0 AS [distance_mm]&#xA;    ,0 AS [cost_fare_mm]&#xA;    ,0 AS [time_mt]&#xA;    ,0 AS [distance_mt]&#xA;    ,0 AS [cost_fare_mt]&#xA;    ,0 AS [time_bike]&#xA;    ,0 AS [distance_bike]&#xA;    ,[timeTotal] AS [time_total]&#xA;    ,[distanceTotal] AS [distance_total]&#xA;    ,[costTotal] AS [cost_total]&#xA;FROM&#xA;    [staging].[externalExternalTrips]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;    [dimension].[mode_trip]&#xA;ON&#xA;    [externalExternalTrips].[tripMode] = [mode_trip].[mode_trip_description]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;    [dimension].[time_trip_start]&#xA;ON  -- operates at ABM five time of day level&#xA;    [time_trip_start].[trip_start_abm_half_hour] = 'Not Applicable'&#xA;    AND CONVERT(nvarchar, [externalExternalTrips].[departTimeFiveTod]) = [time_trip_start].[trip_start_abm_5_tod]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;&#x9;[dimension].[geography_trip_origin] AS [geography_trip_origin_taz]  -- operates at TAZ level&#xA;ON&#xA;&#x9;CONVERT(nvarchar, [externalExternalTrips].[originTAZ]) = [geography_trip_origin_taz].[trip_origin_taz_13]&#xA;&#x9;AND [geography_trip_origin_taz].[trip_origin_mgra_13] = 'Not Applicable'&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;&#x9;[dimension].[geography_trip_destination] AS [geography_trip_destination_taz]  -- operates at TAZ level&#xA;ON &#xA;&#x9;CONVERT(nvarchar, [externalExternalTrips].[destinationTAZ]) = [geography_trip_destination_taz].[trip_destination_taz_13]&#xA;&#x9;AND [geography_trip_destination_taz].[trip_destination_mgra_13] = 'Not Applicable'&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;    [dimension].[value_of_time_category]&#xA;ON&#xA;    [externalExternalTrips].[valueOfTimeCategory]  = [value_of_time_category].[value_of_time_category_description]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;    [dimension].[transponder_available]&#xA;ON&#xA;    CASE    WHEN [externalExternalTrips].[transponderAvailable] = 'False' THEN 'Transponder Not Available'&#xA;            WHEN [externalExternalTrips].[transponderAvailable] = 'True' THEN 'Transponder Available'&#xA;            ELSE NULL END = [transponder_available].[transponder_available_description]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;    [dimension].[av_used]&#xA;ON&#xA;    CASE    WHEN [externalExternalTrips].[avUsed] = 'False' THEN 'AV Not Used'&#xA;            WHEN [externalExternalTrips].[avUsed] = 'True' THEN 'AV Used'&#xA;            ELSE NULL END = [av_used].[av_used_description]&#xA;&#xA;&#xA;&#xA;&#xA;-- insert external-internal trips --------------------------------------------&#xA;INSERT INTO [fact].[person_trip] (&#xA;    [scenario_id]&#xA;    ,[model_trip_id]&#xA;    ,[abm_trip_id]&#xA;    ,[tour_id]&#xA;    ,[person_id]&#xA;    ,[household_id]&#xA;    ,[mode_trip_id]&#xA;    ,[purpose_trip_origin_id]&#xA;    ,[purpose_trip_destination_id]&#xA;    ,[inbound_id]&#xA;    ,[time_trip_start_id]&#xA;    ,[time_trip_end_id]&#xA;    ,[geography_trip_origin_id]&#xA;    ,[geography_trip_destination_id]&#xA;    ,[geography_parking_destination_id]&#xA;    ,[transit_tap_boarding_id]&#xA;    ,[transit_tap_alighting_id]&#xA;    ,[mode_airport_arrival_id]&#xA;    ,[value_of_time_category_id]&#xA;    ,[transponder_available_id]&#xA;    ,[av_used_id]&#xA;    ,[weight_trip]&#xA;    ,[weight_person_trip]&#xA;    ,[cost_parking]&#xA;    ,[time_drive]&#xA;    ,[distance_drive]&#xA;    ,[cost_toll_drive]&#xA;    ,[cost_operating_drive]&#xA;    ,[cost_fare_drive]&#xA;    ,[time_wait_drive]&#xA;    ,[time_transit_in_vehicle]&#xA;    ,[time_tier1_transit_in_vehicle]&#xA;    ,[time_freeway_rapid_transit_in_vehicle]&#xA;    ,[time_arterial_rapid_transit_in_vehicle]&#xA;    ,[time_express_bus_transit_in_vehicle]&#xA;    ,[time_local_bus_transit_in_vehicle]&#xA;    ,[time_light_rail_transit_in_vehicle]&#xA;    ,[time_commuter_rail_transit_in_vehicle]&#xA;    ,[time_transit_initial_wait]&#xA;    ,[time_transit_wait]&#xA;    ,[distance_transit_in_vehicle]&#xA;    ,[cost_fare_transit]&#xA;    ,[transfers_transit]&#xA;    ,[time_walk]&#xA;    ,[distance_walk]&#xA;    ,[time_mm]&#xA;    ,[distance_mm]&#xA;    ,[cost_fare_mm]&#xA;    ,[time_mt]&#xA;    ,[distance_mt]&#xA;    ,[cost_fare_mt]&#xA;    ,[time_bike]&#xA;    ,[distance_bike]&#xA;    ,[time_total]&#xA;    ,[distance_total]&#xA;    ,[cost_total])&#xA;SELECT&#xA;    @scenario_id AS [scenario_id]&#xA;    ,(SELECT [model_id] FROM [dimension].[model] WHERE [model_description] = 'External-Internal') AS [model_trip_id]&#xA;    ,[tripID] AS [abm_trip_id]&#xA;    ,0 AS [tour_id]  -- hardcoded Not Applicable value&#xA;    ,0 AS [person_id]  -- hardcoded Not Applicable value&#xA;    ,0 AS [household_id]  -- hardcoded Not Applicable value&#xA;    ,[mode_trip_id]&#xA;    ,[purpose_trip_origin_id]&#xA;    ,0 AS [purpose_trip_destination_id]  -- hardcoded Not Applicable value&#xA;    ,0 AS [inbound_id]  -- hardcoded Not Applicable value&#xA;    ,[time_trip_start_id]&#xA;    ,0 AS [time_trip_end_id]  -- hardcoded Not Applicable value&#xA;&#x9;,[geography_trip_origin_taz].[geography_trip_origin_id]&#xA;&#x9;,[geography_trip_destination_taz].[geography_trip_destination_id]&#xA;    ,0 AS [geography_parking_destination_id]  -- hardcoded Not Applicable value&#xA;    ,0 AS [transit_tap_boarding_id]  -- hardcoded Not Applicable value&#xA;&#x9;,0 AS [transit_tap_alighting_id]  -- hardcoded Not Applicable value&#xA;    ,0 AS [mode_airport_arrival_id]  -- hardcoded Not Applicable value&#xA;    ,[value_of_time_category_id]&#xA;    ,[transponder_available_id]&#xA;    ,[av_used_id]&#xA;    ,[weightTrip] AS [weight_trip]&#xA;    ,[weightPersonTrip] AS [weight_person_trip]&#xA;    ,0 AS [cost_parking]&#xA;    ,ISNULL([timeDrive], 0) AS [time_drive]&#xA;    ,ISNULL([distanceDrive], 0) AS [distance_drive]&#xA;    ,ISNULL([costTollDrive], 0) AS [cost_toll_drive]&#xA;    ,ISNULL([costOperatingDrive], 0) AS [cost_operating_drive]&#xA;    ,0 AS [cost_fare_drive]&#xA;    ,0 AS [time_wait_drive]&#xA;    ,0 AS [time_transit_in_vehicle]&#xA;    ,0 AS [time_tier1_transit_in_vehicle]&#xA;    ,0 AS [time_freeway_rapid_transit_in_vehicle]&#xA;    ,0 AS [time_arterial_rapid_transit_in_vehicle]&#xA;    ,0 AS [time_express_bus_transit_in_vehicle]&#xA;    ,0 AS [time_local_bus_transit_in_vehicle]&#xA;    ,0 AS [time_light_rail_transit_in_vehicle]&#xA;    ,0 AS [time_commuter_rail_transit_in_vehicle]&#xA;    ,0 AS [time_transit_initial_wait]&#xA;    ,0 AS [time_transit_wait]&#xA;    ,0 AS [distance_transit_in_vehicle]&#xA;    ,0 AS [cost_fare_transit]&#xA;    ,0 AS [transfers_transit]&#xA;    ,0 AS [time_walk]&#xA;    ,0 AS [distance_walk]&#xA;    ,0 AS [time_mm]&#xA;    ,0 AS [distance_mm]&#xA;    ,0 AS [cost_fare_mm]&#xA;    ,0 AS [time_mt]&#xA;    ,0 AS [distance_mt]&#xA;    ,0 AS [cost_fare_mt]&#xA;    ,0 AS [time_bike]&#xA;    ,0 AS [distance_bike]&#xA;    ,[timeTotal] AS [time_total]&#xA;    ,[distanceTotal] AS [distance_total]&#xA;    ,[costTotal] AS [cost_total]&#xA;FROM&#xA;    [staging].[externalInternalTrips]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;    [dimension].[mode_trip]&#xA;ON&#xA;    [externalInternalTrips].[tripMode] = [mode_trip].[mode_trip_description]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;    [dimension].[purpose_trip_origin]&#xA;ON&#xA;    [externalInternalTrips].[tripPurpose] = [purpose_trip_origin].[purpose_trip_origin_description]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;    [dimension].[time_trip_start]&#xA;ON  -- operates at ABM five time of day level&#xA;    [time_trip_start].[trip_start_abm_half_hour] = 'Not Applicable'&#xA;    AND CONVERT(nvarchar, [externalInternalTrips].[departTimeFiveTod]) = [time_trip_start].[trip_start_abm_5_tod]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;&#x9;[dimension].[geography_trip_origin] AS [geography_trip_origin_taz]  -- operates at TAZ level&#xA;ON&#xA;&#x9;CONVERT(nvarchar, [externalInternalTrips].[originTAZ]) = [geography_trip_origin_taz].[trip_origin_taz_13]&#xA;&#x9;AND [geography_trip_origin_taz].[trip_origin_mgra_13] = 'Not Applicable'&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;&#x9;[dimension].[geography_trip_destination] AS [geography_trip_destination_taz]  -- operates at TAZ level&#xA;ON &#xA;&#x9;CONVERT(nvarchar, [externalInternalTrips].[destinationTAZ]) = [geography_trip_destination_taz].[trip_destination_taz_13]&#xA;&#x9;AND [geography_trip_destination_taz].[trip_destination_mgra_13] = 'Not Applicable'&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;    [dimension].[value_of_time_category]&#xA;ON&#xA;    [externalInternalTrips].[valueOfTimeCategory]  = [value_of_time_category].[value_of_time_category_description]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;    [dimension].[transponder_available]&#xA;ON&#xA;    CASE    WHEN [externalInternalTrips].[transponderAvailable] = 'False' THEN 'Transponder Not Available'&#xA;            WHEN [externalInternalTrips].[transponderAvailable] = 'True' THEN 'Transponder Available'&#xA;            ELSE NULL END = [transponder_available].[transponder_available_description]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;    [dimension].[av_used]&#xA;ON&#xA;    CASE    WHEN [externalInternalTrips].[avUsed] = 'False' THEN 'AV Not Used'&#xA;            WHEN [externalInternalTrips].[avUsed] = 'True' THEN 'AV Used'&#xA;            ELSE NULL END = [av_used].[av_used_description]&#xA;&#xA;&#xA;&#xA;&#xA;-- insert truck trips --------------------------------------------------------&#xA;INSERT INTO [fact].[person_trip] (&#xA;    [scenario_id]&#xA;    ,[model_trip_id]&#xA;    ,[abm_trip_id]&#xA;    ,[tour_id]&#xA;    ,[person_id]&#xA;    ,[household_id]&#xA;    ,[mode_trip_id]&#xA;    ,[purpose_trip_origin_id]&#xA;    ,[purpose_trip_destination_id]&#xA;    ,[inbound_id]&#xA;    ,[time_trip_start_id]&#xA;    ,[time_trip_end_id]&#xA;    ,[geography_trip_origin_id]&#xA;    ,[geography_trip_destination_id]&#xA;    ,[geography_parking_destination_id]&#xA;    ,[transit_tap_boarding_id]&#xA;    ,[transit_tap_alighting_id]&#xA;    ,[mode_airport_arrival_id]&#xA;    ,[value_of_time_category_id]&#xA;    ,[transponder_available_id]&#xA;    ,[av_used_id]&#xA;    ,[weight_trip]&#xA;    ,[weight_person_trip]&#xA;    ,[cost_parking]&#xA;    ,[time_drive]&#xA;    ,[distance_drive]&#xA;    ,[cost_toll_drive]&#xA;    ,[cost_operating_drive]&#xA;    ,[cost_fare_drive]&#xA;    ,[time_wait_drive]&#xA;    ,[time_transit_in_vehicle]&#xA;    ,[time_tier1_transit_in_vehicle]&#xA;    ,[time_freeway_rapid_transit_in_vehicle]&#xA;    ,[time_arterial_rapid_transit_in_vehicle]&#xA;    ,[time_express_bus_transit_in_vehicle]&#xA;    ,[time_local_bus_transit_in_vehicle]&#xA;    ,[time_light_rail_transit_in_vehicle]&#xA;    ,[time_commuter_rail_transit_in_vehicle]&#xA;    ,[time_transit_initial_wait]&#xA;    ,[time_transit_wait]&#xA;    ,[distance_transit_in_vehicle]&#xA;    ,[cost_fare_transit]&#xA;    ,[transfers_transit]&#xA;    ,[time_walk]&#xA;    ,[distance_walk]&#xA;    ,[time_mm]&#xA;    ,[distance_mm]&#xA;    ,[cost_fare_mm]&#xA;    ,[time_mt]&#xA;    ,[distance_mt]&#xA;    ,[cost_fare_mt]&#xA;    ,[time_bike]&#xA;    ,[distance_bike]&#xA;    ,[time_total]&#xA;    ,[distance_total]&#xA;    ,[cost_total])&#xA;SELECT&#xA;    @scenario_id AS [scenario_id]&#xA;    ,(SELECT [model_id] FROM [dimension].[model] WHERE [model_description] = 'Truck') AS [model_trip_id]&#xA;    ,[tripID] AS [abm_trip_id]&#xA;    ,0 AS [tour_id]  -- hardcoded Not Applicable value&#xA;    ,0 AS [person_id]  -- hardcoded Not Applicable value&#xA;    ,0 AS [household_id]  -- hardcoded Not Applicable value&#xA;    ,[mode_trip_id]&#xA;    ,0 AS [purpose_trip_origin_id]  -- hardcoded Not Applicable value&#xA;    ,0 AS [purpose_trip_destination_id]  -- hardcoded Not Applicable value&#xA;    ,0 AS [inbound_id]  -- hardcoded Not Applicable value&#xA;    ,[time_trip_start_id]&#xA;    ,0 AS [time_trip_end_id]  -- hardcoded Not Applicable value&#xA;&#x9;,[geography_trip_origin_taz].[geography_trip_origin_id]&#xA;&#x9;,[geography_trip_destination_taz].[geography_trip_destination_id]&#xA;    ,0 AS [geography_parking_destination_id]  -- hardcoded Not Applicable value&#xA;    ,0 AS [transit_tap_boarding_id]  -- hardcoded Not Applicable value&#xA;&#x9;,0 AS [transit_tap_alighting_id]  -- hardcoded Not Applicable value&#xA;    ,0 AS [mode_airport_arrival_id]  -- hardcoded Not Applicable value&#xA;    ,[value_of_time_category_id]&#xA;    ,[transponder_available_id]&#xA;    ,[av_used_id]&#xA;    ,[weightTrip] AS [weight_trip]&#xA;    ,[weightPersonTrip] AS [weight_person_trip]&#xA;    ,0 AS [cost_parking]&#xA;    ,ISNULL([timeDrive], 0) AS [time_drive]&#xA;    ,ISNULL([distanceDrive], 0) AS [distance_drive]&#xA;    ,ISNULL([costTollDrive], 0) AS [cost_toll_drive]&#xA;    ,ISNULL([costOperatingDrive], 0) AS [cost_operating_drive]&#xA;    ,0 AS [cost_fare_drive]&#xA;    ,0 AS [time_wait_drive]&#xA;    ,0 AS [time_transit_in_vehicle]&#xA;    ,0 AS [time_tier1_transit_in_vehicle]&#xA;    ,0 AS [time_freeway_rapid_transit_in_vehicle]&#xA;    ,0 AS [time_arterial_rapid_transit_in_vehicle]&#xA;    ,0 AS [time_express_bus_transit_in_vehicle]&#xA;    ,0 AS [time_local_bus_transit_in_vehicle]&#xA;    ,0 AS [time_light_rail_transit_in_vehicle]&#xA;    ,0 AS [time_commuter_rail_transit_in_vehicle]&#xA;    ,0 AS [time_transit_initial_wait]&#xA;    ,0 AS [time_transit_wait]&#xA;    ,0 AS [distance_transit_in_vehicle]&#xA;    ,0 AS [cost_fare_transit]&#xA;    ,0 AS [transfers_transit]&#xA;    ,0 AS [time_walk]&#xA;    ,0 AS [distance_walk]&#xA;    ,0 AS [time_mm]&#xA;    ,0 AS [distance_mm]&#xA;    ,0 AS [cost_fare_mm]&#xA;    ,0 AS [time_mt]&#xA;    ,0 AS [distance_mt]&#xA;    ,0 AS [cost_fare_mt]&#xA;    ,0 AS [time_bike]&#xA;    ,0 AS [distance_bike]&#xA;    ,[timeTotal] AS [time_total]&#xA;    ,[distanceTotal] AS [distance_total]&#xA;    ,[costTotal] AS [cost_total]&#xA;FROM&#xA;    [staging].[truckTrips]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;    [dimension].[mode_trip]&#xA;ON&#xA;    [truckTrips].[tripMode] = [mode_trip].[mode_trip_description]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;    [dimension].[time_trip_start]&#xA;ON  -- operates at ABM five time of day level&#xA;    [time_trip_start].[trip_start_abm_half_hour] = 'Not Applicable'&#xA;    AND CONVERT(nvarchar, [truckTrips].[departTimeFiveTod]) = [time_trip_start].[trip_start_abm_5_tod]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;&#x9;[dimension].[geography_trip_origin] AS [geography_trip_origin_taz]  -- operates at TAZ level&#xA;ON&#xA;&#x9;CONVERT(nvarchar, [truckTrips].[originTAZ]) = [geography_trip_origin_taz].[trip_origin_taz_13]&#xA;&#x9;AND [geography_trip_origin_taz].[trip_origin_mgra_13] = 'Not Applicable'&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;&#x9;[dimension].[geography_trip_destination] AS [geography_trip_destination_taz]  -- operates at TAZ level&#xA;ON &#xA;&#x9;CONVERT(nvarchar, [truckTrips].[destinationTAZ]) = [geography_trip_destination_taz].[trip_destination_taz_13]&#xA;&#x9;AND [geography_trip_destination_taz].[trip_destination_mgra_13] = 'Not Applicable'&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;    [dimension].[value_of_time_category]&#xA;ON&#xA;    [truckTrips].[valueOfTimeCategory]  = [value_of_time_category].[value_of_time_category_description]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;    [dimension].[transponder_available]&#xA;ON&#xA;    CASE    WHEN [truckTrips].[transponderAvailable] = 'False' THEN 'Transponder Not Available'&#xA;            WHEN [truckTrips].[transponderAvailable] = 'True' THEN 'Transponder Available'&#xA;            ELSE NULL END = [transponder_available].[transponder_available_description]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;    [dimension].[av_used]&#xA;ON&#xA;    CASE    WHEN [truckTrips].[avUsed] = 'False' THEN 'AV Not Used'&#xA;            WHEN [truckTrips].[avUsed] = 'True' THEN 'AV Used'&#xA;            ELSE NULL END = [av_used].[av_used_description]&#xA;&#xA;&#xA;&#xA;&#xA;-- drop staging tables -------------------------------------------------------&#xA;DROP TABLE IF EXISTS [staging].[externalExternalTrips]&#xA;DROP TABLE IF EXISTS [staging].[externalInternalTrips]&#xA;DROP TABLE IF EXISTS [staging].[truckTrips]&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
          <SQLTask:ParameterBinding
            SQLTask:ParameterName="0"
            SQLTask:DtsVariableName="$Package::scenarioID"
            SQLTask:ParameterDirection="Input"
            SQLTask:DataType="131"
            SQLTask:ParameterSize="-1" />
        </SQLTask:SqlTaskData>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\insertTripsAirport"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:DelayValidation="True"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{b8b7cad4-41ad-462e-82c0-47a1757044bc}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:FailPackageOnFailure="True"
      DTS:FailParentOnFailure="True"
      DTS:LocaleID="-1"
      DTS:MaxErrorCount="0"
      DTS:ObjectName="insertTripsAirport"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2017 RC1; Â© 2017 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="3">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{A2745192-1304-4CAD-B395-584AC14AA8AD}"
          SQLTask:SqlStatementSource="SET NOCOUNT ON&#xA;DECLARE @scenario_id integer = ?;&#xA;&#xA;&#xA;&#xA;&#xA;-- insert airport CBX trips --------------------------------------------------&#xA;INSERT INTO [fact].[person_trip] (&#xA;    [scenario_id]&#xA;    ,[model_trip_id]&#xA;    ,[abm_trip_id]&#xA;    ,[tour_id]&#xA;    ,[person_id]&#xA;    ,[household_id]&#xA;    ,[mode_trip_id]&#xA;    ,[purpose_trip_origin_id]&#xA;    ,[purpose_trip_destination_id]&#xA;    ,[inbound_id]&#xA;    ,[time_trip_start_id]&#xA;    ,[time_trip_end_id]&#xA;    ,[geography_trip_origin_id]&#xA;    ,[geography_trip_destination_id]&#xA;    ,[geography_parking_destination_id]&#xA;    ,[transit_tap_boarding_id]&#xA;    ,[transit_tap_alighting_id]&#xA;    ,[mode_airport_arrival_id]&#xA;    ,[value_of_time_category_id]&#xA;    ,[transponder_available_id]&#xA;    ,[av_used_id]&#xA;    ,[weight_trip]&#xA;    ,[weight_person_trip]&#xA;    ,[cost_parking]&#xA;    ,[time_drive]&#xA;    ,[distance_drive]&#xA;    ,[cost_toll_drive]&#xA;    ,[cost_operating_drive]&#xA;    ,[cost_fare_drive]&#xA;    ,[time_wait_drive]&#xA;    ,[time_transit_in_vehicle]&#xA;    ,[time_tier1_transit_in_vehicle]&#xA;    ,[time_freeway_rapid_transit_in_vehicle]&#xA;    ,[time_arterial_rapid_transit_in_vehicle]&#xA;    ,[time_express_bus_transit_in_vehicle]&#xA;    ,[time_local_bus_transit_in_vehicle]&#xA;    ,[time_light_rail_transit_in_vehicle]&#xA;    ,[time_commuter_rail_transit_in_vehicle]&#xA;    ,[time_transit_initial_wait]&#xA;    ,[time_transit_wait]&#xA;    ,[distance_transit_in_vehicle]&#xA;    ,[cost_fare_transit]&#xA;    ,[transfers_transit]&#xA;    ,[time_walk]&#xA;    ,[distance_walk]&#xA;    ,[time_mm]&#xA;    ,[distance_mm]&#xA;    ,[cost_fare_mm]&#xA;    ,[time_mt]&#xA;    ,[distance_mt]&#xA;    ,[cost_fare_mt]&#xA;    ,[time_bike]&#xA;    ,[distance_bike]&#xA;    ,[time_total]&#xA;    ,[distance_total]&#xA;    ,[cost_total])&#xA;SELECT&#xA;    @scenario_id AS [scenario_id]&#xA;    ,(SELECT [model_id] FROM [dimension].[model] WHERE [model_description] = 'Airport - CBX') AS [model_trip_id]&#xA;    ,[tripID] AS [abm_trip_id]&#xA;    ,0 AS [tour_id]  -- hardcoded Not Applicable value&#xA;    ,0 AS [person_id]  -- hardcoded Not Applicable value&#xA;    ,0 AS [household_id]  -- hardcoded Not Applicable value&#xA;    ,[mode_trip_id]&#xA;    ,[purpose_trip_origin_id]&#xA;    ,0 AS [purpose_trip_destination_id]  -- hardcoded Not Applicable value&#xA;    ,[inbound_id]&#xA;    ,[time_trip_start_id]&#xA;    ,0 AS [time_trip_end_id]  -- hardcoded Not Applicable value&#xA;&#x9;,CASE&#x9;WHEN [airportCBXTrips].[originTAZ] BETWEEN 1 AND 12 THEN [geography_trip_origin_taz].[geography_trip_origin_id]&#xA;&#x9;&#x9;&#x9;ELSE [geography_trip_origin_mgra].[geography_trip_origin_id]&#xA;&#x9;&#x9;&#x9;END AS [geography_trip_origin_id] -- to-from external TAZs do not have MGRAs&#xA;&#x9;,CASE&#x9;WHEN [airportCBXTrips].[destinationTAZ] BETWEEN 1 AND 12 THEN [geography_trip_destination_taz].[geography_trip_destination_id]&#xA;&#x9;&#x9;&#x9;ELSE [geography_trip_destination_mgra].[geography_trip_destination_id]&#xA;&#x9;&#x9;&#x9;END AS [geography_trip_destination_id] -- to-from external TAZs do not have MGRAs&#xA;    ,0 AS [geography_parking_destination_id]  -- hardcoded Not Applicable value&#xA;    ,[transit_tap_boarding].[transit_tap_id] AS [transit_tap_boarding_id]&#xA;&#x9;,[transit_tap_alighting].[transit_tap_id] AS [transit_tap_alighting_id]&#xA;    ,[mode_airport_arrival_id]&#xA;    ,[value_of_time_category_id]&#xA;    ,[transponder_available_id]&#xA;    ,[av_used_id]&#xA;    ,[weightTrip] AS [weight_trip]&#xA;    ,[weightPersonTrip] AS [weight_person_trip]&#xA;    ,0 AS [cost_parking]  -- hardcoded no parking cost&#xA;    ,ISNULL([timeDrive], 0) + ISNULL([timeDriveTransit], 0) AS [time_drive]&#xA;    ,ISNULL([distanceDrive], 0) + ISNULL([distanceDriveTransit], 0) AS [distance_drive]&#xA;    ,ISNULL([costTollDrive], 0) AS [cost_toll_drive]&#xA;    ,ISNULL([costOperatingDrive], 0) AS [cost_operating_drive]&#xA;    ,ISNULL([costFareDrive], 0) AS [cost_fare_drive]&#xA;    ,ISNULL([timeWaitDrive], 0) AS [time_wait_drive]&#xA;    ,ISNULL([timeTransitInVehicle], 0) AS [time_transit_in_vehicle]&#xA;    ,ISNULL([timeTier1TransitInVehicle], 0) AS [time_tier1_transit_in_vehicle]&#xA;    ,ISNULL([timeFreewayRapidTransitInVehicle], 0) AS [time_freeway_rapid_transit_in_vehicle]&#xA;    ,ISNULL([timeArterialRapidTransitInVehicle], 0) AS [time_arterial_rapid_transit_in_vehicle]&#xA;    ,ISNULL([timeExpressBusTransitInVehicle], 0) AS [time_express_bus_transit_in_vehicle]&#xA;    ,ISNULL([timeLocalBusTransitInVehicle], 0) AS [time_local_bus_transit_in_vehicle]&#xA;    ,ISNULL([timeLightRailTransitInVehicle], 0) AS [time_light_rail_transit_in_vehicle]&#xA;    ,ISNULL([timeCommuterRailTransitInVehicle], 0) AS [time_commuter_rail_transit_in_vehicle]&#xA;    ,ISNULL([timeTransitInitialWait], 0) AS [time_transit_initial_wait]&#xA;    ,ISNULL([timeTransitWait], 0) AS [time_transit_wait]&#xA;    ,ISNULL([distanceTransitInVehicle], 0) AS [distance_transit_in_vehicle]&#xA;    ,ISNULL([costFareTransit], 0) AS [cost_fare_transit]&#xA;    ,ISNULL([transfersTransit], 0) AS [transfers_transit]&#xA;    ,ISNULL([timeTransitWalk], 0) + ISNULL([timeTransitWalkAccessEgress], 0) + ISNULL([timeWalk], 0) AS [time_walk]&#xA;    ,ISNULL([distanceTransitWalk], 0) + ISNULL([distanceTransitWalkAccessEgress], 0) + ISNULL([distanceWalk], 0) AS [distance_walk]&#xA;    ,ISNULL([timeTransitMMAccessEgress], 0) + ISNULL([timeMM], 0) AS [time_mm]&#xA;    ,ISNULL([distanceTransitMMAccessEgress], 0) + ISNULL([distanceMM], 0) AS [distance_mm]&#xA;    ,ISNULL([costFareTransitMMAccessEgress], 0) + ISNULL([costFareMM], 0) AS [cost_fare_mm]&#xA;    ,ISNULL([timeTransitMTAccessEgress], 0) + ISNULL([timeMT], 0) AS [time_mt]&#xA;    ,ISNULL([distanceTransitMTAccessEgress], 0) + ISNULL([distanceMT], 0) AS [distance_mt]&#xA;    ,ISNULL([costFareTransitMTAccessEgress], 0) + ISNULL([costFareMT], 0) AS [cost_fare_mt]&#xA;    ,ISNULL([timeBike], 0) AS [time_bike]&#xA;    ,ISNULL([distanceBike], 0) AS [distance_bike]&#xA;    ,[timeTotal] AS [time_total]&#xA;    ,[distanceTotal] AS [distance_total]&#xA;    ,[costTotal] AS [cost_total]&#xA;FROM&#xA;    [staging].[airportCBXTrips]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;    [dimension].[mode_trip]&#xA;ON&#xA;    [airportCBXTrips].[tripMode] = [mode_trip].[mode_trip_description]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;    [dimension].[purpose_trip_origin]&#xA;ON&#xA;    [airportCBXTrips].[tripPurpose] = [purpose_trip_origin].[purpose_trip_origin_description]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;    [dimension].[inbound]&#xA;ON&#xA;    CASE    WHEN [airportCBXTrips].[inbound] = 'False' THEN 'Outbound'&#xA;            WHEN [airportCBXTrips].[inbound] = 'True' THEN 'Inbound'&#xA;            ELSE NULL END = [inbound].[inbound_description]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;    [dimension].[time_trip_start]&#xA;ON&#xA;    CONVERT(nvarchar, [airportCBXTrips].[departTimeAbmHalfHour]) = [time_trip_start].[trip_start_abm_half_hour]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;&#x9;[dimension].[geography_trip_origin] AS [geography_trip_origin_mgra]&#xA;ON&#xA;&#x9;-- use mgras except to external zones&#xA;&#x9;CONVERT(nvarchar, [airportCBXTrips].[originMGRA]) = [geography_trip_origin_mgra].[trip_origin_mgra_13]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;&#x9;[dimension].[geography_trip_origin] AS [geography_trip_origin_taz]&#xA;ON&#xA;&#x9;-- use mgras except to external zones&#xA;&#x9;CONVERT(nvarchar, [airportCBXTrips].[originTAZ]) = [geography_trip_origin_taz].[trip_origin_taz_13]&#xA;&#x9;AND [geography_trip_origin_taz].[trip_origin_mgra_13] = 'Not Applicable'&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;&#x9;[dimension].[geography_trip_destination] AS [geography_trip_destination_mgra]&#xA;ON&#xA;&#x9;-- use mgras except to external zones&#xA;&#x9;CONVERT(nvarchar, [airportCBXTrips].[destinationMGRA]) = [geography_trip_destination_mgra].[trip_destination_mgra_13]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;&#x9;[dimension].[geography_trip_destination] AS [geography_trip_destination_taz]&#xA;ON&#xA;&#x9;-- use mgras except to external zones&#xA;&#x9;CONVERT(nvarchar, [airportCBXTrips].[destinationTAZ]) = [geography_trip_destination_taz].[trip_destination_taz_13]&#xA;&#x9;AND [geography_trip_destination_taz].[trip_destination_mgra_13] = 'Not Applicable'&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;&#x9;[dimension].[transit_tap] AS [transit_tap_boarding]&#xA;ON&#xA;&#x9;[transit_tap_boarding].[scenario_id] = @scenario_id&#xA;&#x9;AND CASE&#x9;WHEN [airportCBXTrips].[boardingTAP] IS NULL THEN 'Not Applicable'&#xA;&#x9;&#x9;&#x9;&#x9;ELSE CONVERT(nvarchar, [airportCBXTrips].[boardingTAP])&#xA;&#x9;&#x9;&#x9;&#x9;END = [transit_tap_boarding].[tap]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;&#x9;[dimension].[transit_tap] AS [transit_tap_alighting]&#xA;ON&#xA;&#x9;[transit_tap_alighting].[scenario_id] = @scenario_id&#xA;&#x9;AND CASE&#x9;WHEN [airportCBXTrips].[alightingTAP] IS NULL THEN 'Not Applicable'&#xA;&#x9;&#x9;&#x9;&#x9;ELSE CONVERT(nvarchar, [airportCBXTrips].[alightingTAP])&#xA;&#x9;&#x9;&#x9;&#x9;END = [transit_tap_alighting].[tap]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;    [dimension].[mode_airport_arrival]&#xA;ON&#xA;    [airportCBXTrips].[arrivalMode]  = [mode_airport_arrival].[mode_airport_arrival_description]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;    [dimension].[value_of_time_category]&#xA;ON&#xA;    [airportCBXTrips].[valueOfTimeCategory]  = [value_of_time_category].[value_of_time_category_description]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;    [dimension].[transponder_available]&#xA;ON&#xA;    CASE    WHEN [airportCBXTrips].[transponderAvailable] = 'False' THEN 'Transponder Not Available'&#xA;            WHEN [airportCBXTrips].[transponderAvailable] = 'True' THEN 'Transponder Available'&#xA;            ELSE NULL END = [transponder_available].[transponder_available_description]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;    [dimension].[av_used]&#xA;ON&#xA;    CASE    WHEN [airportCBXTrips].[avUsed] = 'False' THEN 'AV Not Used'&#xA;            WHEN [airportCBXTrips].[avUsed] = 'True' THEN 'AV Used'&#xA;            ELSE NULL END = [av_used].[av_used_description]&#xA;&#xA;&#xA;&#xA;&#xA;-- insert airport SAN trips --------------------------------------------------&#xA;INSERT INTO [fact].[person_trip] (&#xA;    [scenario_id]&#xA;    ,[model_trip_id]&#xA;    ,[abm_trip_id]&#xA;    ,[tour_id]&#xA;    ,[person_id]&#xA;    ,[household_id]&#xA;    ,[mode_trip_id]&#xA;    ,[purpose_trip_origin_id]&#xA;    ,[purpose_trip_destination_id]&#xA;    ,[inbound_id]&#xA;    ,[time_trip_start_id]&#xA;    ,[time_trip_end_id]&#xA;    ,[geography_trip_origin_id]&#xA;    ,[geography_trip_destination_id]&#xA;    ,[geography_parking_destination_id]&#xA;    ,[transit_tap_boarding_id]&#xA;    ,[transit_tap_alighting_id]&#xA;    ,[mode_airport_arrival_id]&#xA;    ,[value_of_time_category_id]&#xA;    ,[transponder_available_id]&#xA;    ,[av_used_id]&#xA;    ,[weight_trip]&#xA;    ,[weight_person_trip]&#xA;    ,[cost_parking]&#xA;    ,[time_drive]&#xA;    ,[distance_drive]&#xA;    ,[cost_toll_drive]&#xA;    ,[cost_operating_drive]&#xA;    ,[cost_fare_drive]&#xA;    ,[time_wait_drive]&#xA;    ,[time_transit_in_vehicle]&#xA;    ,[time_tier1_transit_in_vehicle]&#xA;    ,[time_freeway_rapid_transit_in_vehicle]&#xA;    ,[time_arterial_rapid_transit_in_vehicle]&#xA;    ,[time_express_bus_transit_in_vehicle]&#xA;    ,[time_local_bus_transit_in_vehicle]&#xA;    ,[time_light_rail_transit_in_vehicle]&#xA;    ,[time_commuter_rail_transit_in_vehicle]&#xA;    ,[time_transit_initial_wait]&#xA;    ,[time_transit_wait]&#xA;    ,[distance_transit_in_vehicle]&#xA;    ,[cost_fare_transit]&#xA;    ,[transfers_transit]&#xA;    ,[time_walk]&#xA;    ,[distance_walk]&#xA;    ,[time_mm]&#xA;    ,[distance_mm]&#xA;    ,[cost_fare_mm]&#xA;    ,[time_mt]&#xA;    ,[distance_mt]&#xA;    ,[cost_fare_mt]&#xA;    ,[time_bike]&#xA;    ,[distance_bike]&#xA;    ,[time_total]&#xA;    ,[distance_total]&#xA;    ,[cost_total])&#xA;SELECT&#xA;    @scenario_id AS [scenario_id]&#xA;    ,(SELECT [model_id] FROM [dimension].[model] WHERE [model_description] = 'Airport - SAN') AS [model_trip_id]&#xA;    ,[tripID] AS [abm_trip_id]&#xA;    ,0 AS [tour_id]  -- hardcoded Not Applicable value&#xA;    ,0 AS [person_id]  -- hardcoded Not Applicable value&#xA;    ,0 AS [household_id]  -- hardcoded Not Applicable value&#xA;    ,[mode_trip_id]&#xA;    ,[purpose_trip_origin_id]&#xA;    ,0 AS [purpose_trip_destination_id]  -- hardcoded Not Applicable value&#xA;    ,[inbound_id]&#xA;    ,[time_trip_start_id]&#xA;    ,0 AS [time_trip_end_id]  -- hardcoded Not Applicable value&#xA;&#x9;,CASE&#x9;WHEN [airportSANTrips].[originTAZ] BETWEEN 1 AND 12 THEN [geography_trip_origin_taz].[geography_trip_origin_id]&#xA;&#x9;&#x9;&#x9;ELSE [geography_trip_origin_mgra].[geography_trip_origin_id]&#xA;&#x9;&#x9;&#x9;END AS [geography_trip_origin_id] -- to-from external TAZs do not have MGRAs&#xA;&#x9;,CASE&#x9;WHEN [airportSANTrips].[destinationTAZ] BETWEEN 1 AND 12 THEN [geography_trip_destination_taz].[geography_trip_destination_id]&#xA;&#x9;&#x9;&#x9;ELSE [geography_trip_destination_mgra].[geography_trip_destination_id]&#xA;&#x9;&#x9;&#x9;END AS [geography_trip_destination_id] -- to-from external TAZs do not have MGRAs&#xA;    ,0 AS [geography_parking_destination_id]  -- hardcoded Not Applicable value&#xA;    ,[transit_tap_boarding].[transit_tap_id] AS [transit_tap_boarding_id]&#xA;&#x9;,[transit_tap_alighting].[transit_tap_id] AS [transit_tap_alighting_id]&#xA;    ,[mode_airport_arrival_id]&#xA;    ,[value_of_time_category_id]&#xA;    ,[transponder_available_id]&#xA;    ,[av_used_id]&#xA;    ,[weightTrip] AS [weight_trip]&#xA;    ,[weightPersonTrip] AS [weight_person_trip]&#xA;    ,0 AS [cost_parking]  -- hardcoded no parking cost&#xA;    ,ISNULL([timeDrive], 0) + ISNULL([timeDriveTransit], 0) AS [time_drive]&#xA;    ,ISNULL([distanceDrive], 0) + ISNULL([distanceDriveTransit], 0) AS [distance_drive]&#xA;    ,ISNULL([costTollDrive], 0) AS [cost_toll_drive]&#xA;    ,ISNULL([costOperatingDrive], 0) AS [cost_operating_drive]&#xA;    ,ISNULL([costFareDrive], 0) AS [cost_fare_drive]&#xA;    ,ISNULL([timeWaitDrive], 0) AS [time_wait_drive]&#xA;    ,ISNULL([timeTransitInVehicle], 0) AS [time_transit_in_vehicle]&#xA;    ,ISNULL([timeTier1TransitInVehicle], 0) AS [time_tier1_transit_in_vehicle]&#xA;    ,ISNULL([timeFreewayRapidTransitInVehicle], 0) AS [time_freeway_rapid_transit_in_vehicle]&#xA;    ,ISNULL([timeArterialRapidTransitInVehicle], 0) AS [time_arterial_rapid_transit_in_vehicle]&#xA;    ,ISNULL([timeExpressBusTransitInVehicle], 0) AS [time_express_bus_transit_in_vehicle]&#xA;    ,ISNULL([timeLocalBusTransitInVehicle], 0) AS [time_local_bus_transit_in_vehicle]&#xA;    ,ISNULL([timeLightRailTransitInVehicle], 0) AS [time_light_rail_transit_in_vehicle]&#xA;    ,ISNULL([timeCommuterRailTransitInVehicle], 0) AS [time_commuter_rail_transit_in_vehicle]&#xA;    ,ISNULL([timeTransitInitialWait], 0) AS [time_transit_initial_wait]&#xA;    ,ISNULL([timeTransitWait], 0) AS [time_transit_wait]&#xA;    ,ISNULL([distanceTransitInVehicle], 0) AS [distance_transit_in_vehicle]&#xA;    ,ISNULL([costFareTransit], 0) AS [cost_fare_transit]&#xA;    ,ISNULL([transfersTransit], 0) AS [transfers_transit]&#xA;    ,ISNULL([timeTransitWalk], 0) + ISNULL([timeTransitWalkAccessEgress], 0) + ISNULL([timeWalk], 0) AS [time_walk]&#xA;    ,ISNULL([distanceTransitWalk], 0) + ISNULL([distanceTransitWalkAccessEgress], 0) + ISNULL([distanceWalk], 0) AS [distance_walk]&#xA;    ,ISNULL([timeTransitMMAccessEgress], 0) + ISNULL([timeMM], 0) AS [time_mm]&#xA;    ,ISNULL([distanceTransitMMAccessEgress], 0) + ISNULL([distanceMM], 0) AS [distance_mm]&#xA;    ,ISNULL([costFareTransitMMAccessEgress], 0) + ISNULL([costFareMM], 0) AS [cost_fare_mm]&#xA;    ,ISNULL([timeTransitMTAccessEgress], 0) + ISNULL([timeMT], 0) AS [time_mt]&#xA;    ,ISNULL([distanceTransitMTAccessEgress], 0) + ISNULL([distanceMT], 0) AS [distance_mt]&#xA;    ,ISNULL([costFareTransitMTAccessEgress], 0) + ISNULL([costFareMT], 0) AS [cost_fare_mt]&#xA;    ,ISNULL([timeBike], 0) AS [time_bike]&#xA;    ,ISNULL([distanceBike], 0) AS [distance_bike]&#xA;    ,[timeTotal] AS [time_total]&#xA;    ,[distanceTotal] AS [distance_total]&#xA;    ,[costTotal] AS [cost_total]&#xA;FROM&#xA;    [staging].[airportSANTrips]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;    [dimension].[mode_trip]&#xA;ON&#xA;    [airportSANTrips].[tripMode] = [mode_trip].[mode_trip_description]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;    [dimension].[purpose_trip_origin]&#xA;ON&#xA;    [airportSANTrips].[tripPurpose] = [purpose_trip_origin].[purpose_trip_origin_description]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;    [dimension].[inbound]&#xA;ON&#xA;    CASE    WHEN [airportSANTrips].[inbound] = 'False' THEN 'Outbound'&#xA;            WHEN [airportSANTrips].[inbound] = 'True' THEN 'Inbound'&#xA;            ELSE NULL END = [inbound].[inbound_description]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;    [dimension].[time_trip_start]&#xA;ON&#xA;    CONVERT(nvarchar, [airportSANTrips].[departTimeAbmHalfHour]) = [time_trip_start].[trip_start_abm_half_hour]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;&#x9;[dimension].[geography_trip_origin] AS [geography_trip_origin_mgra]&#xA;ON&#xA;&#x9;-- use mgras except to external zones&#xA;&#x9;CONVERT(nvarchar, [airportSANTrips].[originMGRA]) = [geography_trip_origin_mgra].[trip_origin_mgra_13]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;&#x9;[dimension].[geography_trip_origin] AS [geography_trip_origin_taz]&#xA;ON&#xA;&#x9;-- use mgras except to external zones&#xA;&#x9;CONVERT(nvarchar, [airportSANTrips].[originTAZ]) = [geography_trip_origin_taz].[trip_origin_taz_13]&#xA;&#x9;AND [geography_trip_origin_taz].[trip_origin_mgra_13] = 'Not Applicable'&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;&#x9;[dimension].[geography_trip_destination] AS [geography_trip_destination_mgra]&#xA;ON&#xA;&#x9;-- use mgras except to external zones&#xA;&#x9;CONVERT(nvarchar, [airportSANTrips].[destinationMGRA]) = [geography_trip_destination_mgra].[trip_destination_mgra_13]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;&#x9;[dimension].[geography_trip_destination] AS [geography_trip_destination_taz]&#xA;ON&#xA;&#x9;-- use mgras except to external zones&#xA;&#x9;CONVERT(nvarchar, [airportSANTrips].[destinationTAZ]) = [geography_trip_destination_taz].[trip_destination_taz_13]&#xA;&#x9;AND [geography_trip_destination_taz].[trip_destination_mgra_13] = 'Not Applicable'&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;&#x9;[dimension].[transit_tap] AS [transit_tap_boarding]&#xA;ON&#xA;&#x9;[transit_tap_boarding].[scenario_id] = @scenario_id&#xA;&#x9;AND CASE&#x9;WHEN [airportSANTrips].[boardingTAP] IS NULL THEN 'Not Applicable'&#xA;&#x9;&#x9;&#x9;&#x9;ELSE CONVERT(nvarchar, [airportSANTrips].[boardingTAP])&#xA;&#x9;&#x9;&#x9;&#x9;END = [transit_tap_boarding].[tap]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;&#x9;[dimension].[transit_tap] AS [transit_tap_alighting]&#xA;ON&#xA;&#x9;[transit_tap_alighting].[scenario_id] = @scenario_id&#xA;&#x9;AND CASE&#x9;WHEN [airportSANTrips].[alightingTAP] IS NULL THEN 'Not Applicable'&#xA;&#x9;&#x9;&#x9;&#x9;ELSE CONVERT(nvarchar, [airportSANTrips].[alightingTAP])&#xA;&#x9;&#x9;&#x9;&#x9;END = [transit_tap_alighting].[tap]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;    [dimension].[mode_airport_arrival]&#xA;ON&#xA;    [airportSANTrips].[arrivalMode]  = [mode_airport_arrival].[mode_airport_arrival_description]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;    [dimension].[value_of_time_category]&#xA;ON&#xA;    [airportSANTrips].[valueOfTimeCategory]  = [value_of_time_category].[value_of_time_category_description]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;    [dimension].[transponder_available]&#xA;ON&#xA;    CASE    WHEN [airportSANTrips].[transponderAvailable] = 'False' THEN 'Transponder Not Available'&#xA;            WHEN [airportSANTrips].[transponderAvailable] = 'True' THEN 'Transponder Available'&#xA;            ELSE NULL END = [transponder_available].[transponder_available_description]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;    [dimension].[av_used]&#xA;ON&#xA;    CASE    WHEN [airportSANTrips].[avUsed] = 'False' THEN 'AV Not Used'&#xA;            WHEN [airportSANTrips].[avUsed] = 'True' THEN 'AV Used'&#xA;            ELSE NULL END = [av_used].[av_used_description]&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;-- drop staging tables -------------------------------------------------------&#xA;DROP TABLE IF EXISTS [staging].[airportCBXTrips]&#xA;DROP TABLE IF EXISTS [staging].[airportSANTrips]&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
          <SQLTask:ParameterBinding
            SQLTask:ParameterName="0"
            SQLTask:DtsVariableName="$Package::scenarioID"
            SQLTask:ParameterDirection="Input"
            SQLTask:DataType="131"
            SQLTask:ParameterSize="-1" />
        </SQLTask:SqlTaskData>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\insertTripsCrossBorder"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:DelayValidation="True"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{d94cd15d-0d72-4559-b000-06a149713a21}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:FailPackageOnFailure="True"
      DTS:FailParentOnFailure="True"
      DTS:LocaleID="-1"
      DTS:MaxErrorCount="0"
      DTS:ObjectName="insertTripsCrossBorder"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2017 RC1; Â© 2017 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="2">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{A2745192-1304-4CAD-B395-584AC14AA8AD}"
          SQLTask:SqlStatementSource="SET NOCOUNT ON&#xA;DECLARE @scenario_id integer = ?;&#xA;&#xA;&#xA;&#xA;&#xA;-- insert cross border trips -------------------------------------------------&#xA;INSERT INTO [fact].[person_trip] (&#xA;    [scenario_id]&#xA;    ,[model_trip_id]&#xA;    ,[abm_trip_id]&#xA;    ,[tour_id]&#xA;    ,[person_id]&#xA;    ,[household_id]&#xA;    ,[mode_trip_id]&#xA;    ,[purpose_trip_origin_id]&#xA;    ,[purpose_trip_destination_id]&#xA;    ,[inbound_id]&#xA;    ,[time_trip_start_id]&#xA;    ,[time_trip_end_id]&#xA;    ,[geography_trip_origin_id]&#xA;    ,[geography_trip_destination_id]&#xA;    ,[geography_parking_destination_id]&#xA;    ,[transit_tap_boarding_id]&#xA;    ,[transit_tap_alighting_id]&#xA;    ,[mode_airport_arrival_id]&#xA;    ,[value_of_time_category_id]&#xA;    ,[transponder_available_id]&#xA;    ,[av_used_id]&#xA;    ,[weight_trip]&#xA;    ,[weight_person_trip]&#xA;    ,[cost_parking]&#xA;    ,[time_drive]&#xA;    ,[distance_drive]&#xA;    ,[cost_toll_drive]&#xA;    ,[cost_operating_drive]&#xA;    ,[cost_fare_drive]&#xA;    ,[time_wait_drive]&#xA;    ,[time_transit_in_vehicle]&#xA;    ,[time_tier1_transit_in_vehicle]&#xA;    ,[time_freeway_rapid_transit_in_vehicle]&#xA;    ,[time_arterial_rapid_transit_in_vehicle]&#xA;    ,[time_express_bus_transit_in_vehicle]&#xA;    ,[time_local_bus_transit_in_vehicle]&#xA;    ,[time_light_rail_transit_in_vehicle]&#xA;    ,[time_commuter_rail_transit_in_vehicle]&#xA;    ,[time_transit_initial_wait]&#xA;    ,[time_transit_wait]&#xA;    ,[distance_transit_in_vehicle]&#xA;    ,[cost_fare_transit]&#xA;    ,[transfers_transit]&#xA;    ,[time_walk]&#xA;    ,[distance_walk]&#xA;    ,[time_mm]&#xA;    ,[distance_mm]&#xA;    ,[cost_fare_mm]&#xA;    ,[time_mt]&#xA;    ,[distance_mt]&#xA;    ,[cost_fare_mt]&#xA;    ,[time_bike]&#xA;    ,[distance_bike]&#xA;    ,[time_total]&#xA;    ,[distance_total]&#xA;    ,[cost_total])&#xA;SELECT&#xA;    @scenario_id AS [scenario_id]&#xA;    ,(SELECT [model_id] FROM [dimension].[model] WHERE [model_description] = 'Cross Border') AS [model_trip_id]&#xA;    ,[tripID] AS [abm_trip_id]&#xA;    ,[tour].[tour_id]&#xA;    ,0 AS [person_id]  -- hardcoded Not Applicable value&#xA;    ,0 AS [household_id]  -- hardcoded Not Applicable value&#xA;    ,[mode_trip_id]&#xA;    ,[purpose_trip_origin_id]&#xA;    ,[purpose_trip_destination_id]&#xA;    ,[inbound_id]&#xA;    ,[time_trip_start_id]&#xA;    ,0 AS [time_trip_end_id]  -- hardcoded Not Applicable value&#xA;&#x9;,CASE&#x9;WHEN [crossBorderTrips].[originTAZ] BETWEEN 1 AND 12 THEN [geography_trip_origin_taz].[geography_trip_origin_id]&#xA;&#x9;&#x9;&#x9;ELSE [geography_trip_origin_mgra].[geography_trip_origin_id]&#xA;&#x9;&#x9;&#x9;END AS [geography_trip_origin_id] -- to-from external TAZs do not have MGRAs&#xA;&#x9;,CASE&#x9;WHEN [crossBorderTrips].[destinationTAZ] BETWEEN 1 AND 12 THEN [geography_trip_destination_taz].[geography_trip_destination_id]&#xA;&#x9;&#x9;&#x9;ELSE [geography_trip_destination_mgra].[geography_trip_destination_id]&#xA;&#x9;&#x9;&#x9;END AS [geography_trip_destination_id] -- to-from external TAZs do not have MGRAs&#xA;    ,0 AS [geography_parking_destination_id]  -- hardcoded Not Applicable value&#xA;    ,[transit_tap_boarding].[transit_tap_id] AS [transit_tap_boarding_id]&#xA;&#x9;,[transit_tap_alighting].[transit_tap_id] AS [transit_tap_alighting_id]&#xA;    ,0 AS [mode_airport_arrival_id]  -- hardcoded Not Applicable value&#xA;    ,[value_of_time_category_id]&#xA;    ,[transponder_available_id]&#xA;    ,[av_used_id]&#xA;    ,[weightTrip] AS [weight_trip]&#xA;    ,[weightPersonTrip] AS [weight_person_trip]&#xA;    ,[costParking] AS [cost_parking]&#xA;    ,ISNULL([timeDrive], 0) + ISNULL([timeDriveTransit], 0) AS [time_drive]&#xA;    ,ISNULL([distanceDrive], 0) + ISNULL([distanceDriveTransit], 0) AS [distance_drive]&#xA;    ,ISNULL([costTollDrive], 0) AS [cost_toll_drive]&#xA;    ,ISNULL([costOperatingDrive], 0) AS [cost_operating_drive]&#xA;    ,ISNULL([costFareDrive], 0) AS [cost_fare_drive]&#xA;    ,ISNULL([timeWaitDrive], 0) AS [time_wait_drive]&#xA;    ,ISNULL([timeTransitInVehicle], 0) AS [time_transit_in_vehicle]&#xA;    ,ISNULL([timeTier1TransitInVehicle], 0) AS [time_tier1_transit_in_vehicle]&#xA;    ,ISNULL([timeFreewayRapidTransitInVehicle], 0) AS [time_freeway_rapid_transit_in_vehicle]&#xA;    ,ISNULL([timeArterialRapidTransitInVehicle], 0) AS [time_arterial_rapid_transit_in_vehicle]&#xA;    ,ISNULL([timeExpressBusTransitInVehicle], 0) AS [time_express_bus_transit_in_vehicle]&#xA;    ,ISNULL([timeLocalBusTransitInVehicle], 0) AS [time_local_bus_transit_in_vehicle]&#xA;    ,ISNULL([timeLightRailTransitInVehicle], 0) AS [time_light_rail_transit_in_vehicle]&#xA;    ,ISNULL([timeCommuterRailTransitInVehicle], 0) AS [time_commuter_rail_transit_in_vehicle]&#xA;    ,ISNULL([timeTransitInitialWait], 0) AS [time_transit_initial_wait]&#xA;    ,ISNULL([timeTransitWait], 0) AS [time_transit_wait]&#xA;    ,ISNULL([distanceTransitInVehicle], 0) AS [distance_transit_in_vehicle]&#xA;    ,ISNULL([costFareTransit], 0) AS [cost_fare_transit]&#xA;    ,ISNULL([transfersTransit], 0) AS [transfers_transit]&#xA;    ,ISNULL([timeTransitWalk], 0) + ISNULL([timeTransitWalkAccessEgress], 0) + ISNULL([timeWalk], 0) AS [time_walk]&#xA;    ,ISNULL([distanceTransitWalk], 0) + ISNULL([distanceTransitWalkAccessEgress], 0) + ISNULL([distanceWalk], 0) AS [distance_walk]&#xA;    ,ISNULL([timeTransitMMAccessEgress], 0) + ISNULL([timeMM], 0) AS [time_mm]&#xA;    ,ISNULL([distanceTransitMMAccessEgress], 0) + ISNULL([distanceMM], 0) AS [distance_mm]&#xA;    ,ISNULL([costFareTransitMMAccessEgress], 0) + ISNULL([costFareMM], 0) AS [cost_fare_mm]&#xA;    ,ISNULL([timeTransitMTAccessEgress], 0) + ISNULL([timeMT], 0) AS [time_mt]&#xA;    ,ISNULL([distanceTransitMTAccessEgress], 0) + ISNULL([distanceMT], 0) AS [distance_mt]&#xA;    ,ISNULL([costFareTransitMTAccessEgress], 0) + ISNULL([costFareMT], 0) AS [cost_fare_mt]&#xA;    ,ISNULL([timeBike], 0) AS [time_bike]&#xA;    ,ISNULL([distanceBike], 0) AS [distance_bike]&#xA;    ,[timeTotal] AS [time_total]&#xA;    ,[distanceTotal] AS [distance_total]&#xA;    ,[costTotal] AS [cost_total]&#xA;FROM&#xA;    [staging].[crossBorderTrips]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;    [dimension].[tour]&#xA;ON&#xA;    [tour].[scenario_id] = @scenario_id&#xA;    AND [tour].[model_tour_id] = (SELECT [model_id] FROM [dimension].[model] WHERE [model_description] = 'Cross Border')&#xA;    AND [crossBorderTrips].[tourID] = [tour].[abm_tour_id]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;    [dimension].[mode_trip]&#xA;ON&#xA;    [crossBorderTrips].[tripMode] = [mode_trip].[mode_trip_description]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;    [dimension].[purpose_trip_origin]&#xA;ON&#xA;    [crossBorderTrips].[tripPurposeOrigin] = [purpose_trip_origin].[purpose_trip_origin_description]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;    [dimension].[purpose_trip_destination]&#xA;ON&#xA;    [crossBorderTrips].[tripPurposeDestination] = [purpose_trip_destination].[purpose_trip_destination_description]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;    [dimension].[inbound]&#xA;ON&#xA;    CASE    WHEN [crossBorderTrips].[inbound] = 'False' THEN 'Outbound'&#xA;            WHEN [crossBorderTrips].[inbound] = 'True' THEN 'Inbound'&#xA;            ELSE NULL END = [inbound].[inbound_description]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;    [dimension].[time_trip_start]&#xA;ON&#xA;    CONVERT(nvarchar, [crossBorderTrips].[departTimeAbmHalfHour]) = [time_trip_start].[trip_start_abm_half_hour]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;&#x9;[dimension].[geography_trip_origin] AS [geography_trip_origin_mgra]&#xA;ON&#xA;&#x9;-- use mgras except to external zones&#xA;&#x9;CONVERT(nvarchar, [crossBorderTrips].[originMGRA]) = [geography_trip_origin_mgra].[trip_origin_mgra_13]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;&#x9;[dimension].[geography_trip_origin] AS [geography_trip_origin_taz]&#xA;ON&#xA;&#x9;-- use mgras except to external zones&#xA;&#x9;CONVERT(nvarchar, [crossBorderTrips].[originTAZ]) = [geography_trip_origin_taz].[trip_origin_taz_13]&#xA;&#x9;AND [geography_trip_origin_taz].[trip_origin_mgra_13] = 'Not Applicable'&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;&#x9;[dimension].[geography_trip_destination] AS [geography_trip_destination_mgra]&#xA;ON&#xA;&#x9;-- use mgras except to external zones&#xA;&#x9;CONVERT(nvarchar, [crossBorderTrips].[destinationMGRA]) = [geography_trip_destination_mgra].[trip_destination_mgra_13]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;&#x9;[dimension].[geography_trip_destination] AS [geography_trip_destination_taz]&#xA;ON&#xA;&#x9;-- use mgras except to external zones&#xA;&#x9;CONVERT(nvarchar, [crossBorderTrips].[destinationTAZ]) = [geography_trip_destination_taz].[trip_destination_taz_13]&#xA;&#x9;AND [geography_trip_destination_taz].[trip_destination_mgra_13] = 'Not Applicable'&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;&#x9;[dimension].[transit_tap] AS [transit_tap_boarding]&#xA;ON&#xA;&#x9;[transit_tap_boarding].[scenario_id] = @scenario_id&#xA;&#x9;AND CASE&#x9;WHEN [crossBorderTrips].[boardingTAP] IS NULL THEN 'Not Applicable'&#xA;&#x9;&#x9;&#x9;&#x9;ELSE CONVERT(nvarchar, [crossBorderTrips].[boardingTAP])&#xA;&#x9;&#x9;&#x9;&#x9;END = [transit_tap_boarding].[tap]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;&#x9;[dimension].[transit_tap] AS [transit_tap_alighting]&#xA;ON&#xA;&#x9;[transit_tap_alighting].[scenario_id] = @scenario_id&#xA;&#x9;AND CASE&#x9;WHEN [crossBorderTrips].[alightingTAP] IS NULL THEN 'Not Applicable'&#xA;&#x9;&#x9;&#x9;&#x9;ELSE CONVERT(nvarchar, [crossBorderTrips].[alightingTAP])&#xA;&#x9;&#x9;&#x9;&#x9;END = [transit_tap_alighting].[tap]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;    [dimension].[value_of_time_category]&#xA;ON&#xA;    [crossBorderTrips].[valueOfTimeCategory]  = [value_of_time_category].[value_of_time_category_description]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;    [dimension].[transponder_available]&#xA;ON&#xA;    CASE    WHEN [crossBorderTrips].[transponderAvailable] = 'False' THEN 'Transponder Not Available'&#xA;            WHEN [crossBorderTrips].[transponderAvailable] = 'True' THEN 'Transponder Available'&#xA;            ELSE NULL END = [transponder_available].[transponder_available_description]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;    [dimension].[av_used]&#xA;ON&#xA;    CASE    WHEN [crossBorderTrips].[avUsed] = 'False' THEN 'AV Not Used'&#xA;            WHEN [crossBorderTrips].[avUsed] = 'True' THEN 'AV Used'&#xA;            ELSE NULL END = [av_used].[av_used_description]&#xA;&#xA;&#xA;&#xA;&#xA;-- drop staging tables -------------------------------------------------------&#xA;DROP TABLE IF EXISTS [staging].[crossBorderTrips]&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
          <SQLTask:ParameterBinding
            SQLTask:ParameterName="0"
            SQLTask:DtsVariableName="$Package::scenarioID"
            SQLTask:ParameterDirection="Input"
            SQLTask:DataType="131"
            SQLTask:ParameterSize="-1" />
        </SQLTask:SqlTaskData>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\insertTripsIndividual"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:DelayValidation="True"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{79b7ca5f-6ef1-4e25-bcd5-6d5247de6829}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:FailPackageOnFailure="True"
      DTS:FailParentOnFailure="True"
      DTS:LocaleID="-1"
      DTS:MaxErrorCount="0"
      DTS:ObjectName="insertTripsIndividual"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2017 RC1; Â© 2017 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="1">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{A2745192-1304-4CAD-B395-584AC14AA8AD}"
          SQLTask:SqlStatementSource="SET NOCOUNT ON&#xA;DECLARE @scenario_id integer = ?;&#xA;&#xA;&#xA;-- insert individual trips ---------------------------------------------------&#xA;INSERT INTO [fact].[person_trip] (&#xA;    [scenario_id]&#xA;    ,[model_trip_id]&#xA;    ,[abm_trip_id]&#xA;    ,[tour_id]&#xA;    ,[person_id]&#xA;    ,[household_id]&#xA;    ,[mode_trip_id]&#xA;    ,[purpose_trip_origin_id]&#xA;    ,[purpose_trip_destination_id]&#xA;    ,[inbound_id]&#xA;    ,[time_trip_start_id]&#xA;    ,[time_trip_end_id]&#xA;    ,[geography_trip_origin_id]&#xA;    ,[geography_trip_destination_id]&#xA;    ,[geography_parking_destination_id]&#xA;    ,[transit_tap_boarding_id]&#xA;    ,[transit_tap_alighting_id]&#xA;    ,[mode_airport_arrival_id]&#xA;    ,[value_of_time_category_id]&#xA;    ,[transponder_available_id]&#xA;    ,[av_used_id]&#xA;    ,[weight_trip]&#xA;    ,[weight_person_trip]&#xA;    ,[cost_parking]&#xA;    ,[time_drive]&#xA;    ,[distance_drive]&#xA;    ,[cost_toll_drive]&#xA;    ,[cost_operating_drive]&#xA;    ,[cost_fare_drive]&#xA;    ,[time_wait_drive]&#xA;    ,[time_transit_in_vehicle]&#xA;    ,[time_tier1_transit_in_vehicle]&#xA;    ,[time_freeway_rapid_transit_in_vehicle]&#xA;    ,[time_arterial_rapid_transit_in_vehicle]&#xA;    ,[time_express_bus_transit_in_vehicle]&#xA;    ,[time_local_bus_transit_in_vehicle]&#xA;    ,[time_light_rail_transit_in_vehicle]&#xA;    ,[time_commuter_rail_transit_in_vehicle]&#xA;    ,[time_transit_initial_wait]&#xA;    ,[time_transit_wait]&#xA;    ,[distance_transit_in_vehicle]&#xA;    ,[cost_fare_transit]&#xA;    ,[transfers_transit]&#xA;    ,[time_walk]&#xA;    ,[distance_walk]&#xA;    ,[time_mm]&#xA;    ,[distance_mm]&#xA;    ,[cost_fare_mm]&#xA;    ,[time_mt]&#xA;    ,[distance_mt]&#xA;    ,[cost_fare_mt]&#xA;    ,[time_bike]&#xA;    ,[distance_bike]&#xA;    ,[time_total]&#xA;    ,[distance_total]&#xA;    ,[cost_total])&#xA;SELECT&#xA;    @scenario_id AS [scenario_id]&#xA;    ,(SELECT [model_id] FROM [dimension].[model] WHERE [model_description] = 'Individual') AS [model_trip_id]&#xA;    ,[tripID] AS [abm_trip_id]&#xA;    ,[tour].[tour_id]&#xA;    ,[person].[person_id] AS [person_id]&#xA;    ,[person].[household_id] AS [household_id]&#xA;    ,[mode_trip_id]&#xA;    ,[purpose_trip_origin_id]&#xA;    ,[purpose_trip_destination_id]&#xA;    ,[inbound_id]&#xA;    ,[time_trip_start_id]&#xA;    ,0 AS [time_trip_end_id]  -- hardcoded Not Applicable value&#xA;&#x9;,[geography_trip_origin].[geography_trip_origin_id]&#xA;&#x9;,[geography_trip_destination].[geography_trip_destination_id]&#xA;    ,CASE   WHEN [parkingMGRA] IS NULL THEN 0  -- hardcoded Not Applicable value&#xA;            ELSE [geography_parking_destination].[geography_parking_destination_id]&#xA;            END AS [geography_parking_destination_id]&#xA;    ,[transit_tap_boarding].[transit_tap_id] AS [transit_tap_boarding_id]&#xA;&#x9;,[transit_tap_alighting].[transit_tap_id] AS [transit_tap_alighting_id]&#xA;    ,0 AS [mode_airport_arrival_id]  -- hardcoded Not Applicable value&#xA;    ,[value_of_time_category_id]&#xA;    ,[transponder_available_id]&#xA;    ,[av_used_id]&#xA;    ,[weightTrip] AS [weight_trip]&#xA;    ,[weightPersonTrip] AS [weight_person_trip]&#xA;    ,[costParking] AS [cost_parking]&#xA;    ,ISNULL([timeDrive], 0) + ISNULL([timeDriveTransit], 0) AS [time_drive]&#xA;    ,ISNULL([distanceDrive], 0) + ISNULL([distanceDriveTransit], 0) AS [distance_drive]&#xA;    ,ISNULL([costTollDrive], 0) AS [cost_toll_drive]&#xA;    ,ISNULL([costOperatingDrive], 0) AS [cost_operating_drive]&#xA;    ,ISNULL([costFareDrive], 0) AS [cost_fare_drive]&#xA;    ,ISNULL([timeWaitDrive], 0) AS [time_wait_drive]&#xA;    ,ISNULL([timeTransitInVehicle], 0) AS [time_transit_in_vehicle]&#xA;    ,ISNULL([timeTier1TransitInVehicle], 0) AS [time_tier1_transit_in_vehicle]&#xA;    ,ISNULL([timeFreewayRapidTransitInVehicle], 0) AS [time_freeway_rapid_transit_in_vehicle]&#xA;    ,ISNULL([timeArterialRapidTransitInVehicle], 0) AS [time_arterial_rapid_transit_in_vehicle]&#xA;    ,ISNULL([timeExpressBusTransitInVehicle], 0) AS [time_express_bus_transit_in_vehicle]&#xA;    ,ISNULL([timeLocalBusTransitInVehicle], 0) AS [time_local_bus_transit_in_vehicle]&#xA;    ,ISNULL([timeLightRailTransitInVehicle], 0) AS [time_light_rail_transit_in_vehicle]&#xA;    ,ISNULL([timeCommuterRailTransitInVehicle], 0) AS [time_commuter_rail_transit_in_vehicle]&#xA;    ,ISNULL([timeTransitInitialWait], 0) AS [time_transit_initial_wait]&#xA;    ,ISNULL([timeTransitWait], 0) AS [time_transit_wait]&#xA;    ,ISNULL([distanceTransitInVehicle], 0) AS [distance_transit_in_vehicle]&#xA;    ,ISNULL([costFareTransit], 0) AS [cost_fare_transit]&#xA;    ,ISNULL([transfersTransit], 0) AS [transfers_transit]&#xA;    ,ISNULL([timeAutoTerminalWalk], 0) + ISNULL([timeTransitWalk], 0) + ISNULL([timeTransitWalkAccessEgress], 0) + ISNULL([timeWalk], 0) AS [time_walk]&#xA;    ,ISNULL([distanceAutoTerminalWalk], 0) + ISNULL([distanceTransitWalk], 0) + ISNULL([distanceTransitWalkAccessEgress], 0) + ISNULL([distanceWalk], 0) AS [distance_walk]&#xA;    ,ISNULL([timeTransitMMAccessEgress], 0) + ISNULL([timeMM], 0) AS [time_mm]&#xA;    ,ISNULL([distanceTransitMMAccessEgress], 0) + ISNULL([distanceMM], 0) AS [distance_mm]&#xA;    ,ISNULL([costFareTransitMMAccessEgress], 0) + ISNULL([costFareMM], 0) AS [cost_fare_mm]&#xA;    ,ISNULL([timeTransitMTAccessEgress], 0) + ISNULL([timeMT], 0) AS [time_mt]&#xA;    ,ISNULL([distanceTransitMTAccessEgress], 0) + ISNULL([distanceMT], 0) AS [distance_mt]&#xA;    ,ISNULL([costFareTransitMTAccessEgress], 0) + ISNULL([costFareMT], 0) AS [cost_fare_mt]&#xA;    ,ISNULL([timeBike], 0) AS [time_bike]&#xA;    ,ISNULL([distanceBike], 0) AS [distance_bike]&#xA;    ,[timeTotal] AS [time_total]&#xA;    ,[distanceTotal] AS [distance_total]&#xA;    ,[costTotal] AS [cost_total]&#xA;FROM&#xA;    [staging].[individualTrips]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;    [dimension].[tour]&#xA;ON&#xA;    [tour].[scenario_id] = @scenario_id&#xA;    AND [tour].[model_tour_id] = (SELECT [model_id] FROM [dimension].[model] WHERE [model_description] = 'Individual')&#xA;    AND [individualTrips].[tourID] = [tour].[abm_tour_id]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;    [dimension].[person]&#xA;ON&#xA;    [person].[scenario_id] = @scenario_id&#xA;    AND [individualTrips].[personID] = [person].[person_id]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;    [dimension].[mode_trip]&#xA;ON&#xA;    [individualTrips].[tripMode] = [mode_trip].[mode_trip_description]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;    [dimension].[purpose_trip_origin]&#xA;ON&#xA;    [individualTrips].[tripPurposeOrigin] = [purpose_trip_origin].[purpose_trip_origin_description]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;    [dimension].[purpose_trip_destination]&#xA;ON&#xA;    [individualTrips].[tripPurposeDestination] = [purpose_trip_destination].[purpose_trip_destination_description]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;    [dimension].[inbound]&#xA;ON&#xA;    CASE    WHEN [individualTrips].[inbound] = 'False' THEN 'Outbound'&#xA;            WHEN [individualTrips].[inbound] = 'True' THEN 'Inbound'&#xA;            ELSE NULL END = [inbound].[inbound_description]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;    [dimension].[time_trip_start]&#xA;ON&#xA;    CONVERT(nvarchar, [individualTrips].[departTimeAbmHalfHour]) = [time_trip_start].[trip_start_abm_half_hour]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;&#x9;[dimension].[geography_trip_origin]&#xA;ON&#xA;&#x9;CONVERT(nvarchar, [individualTrips].[originMGRA]) = [geography_trip_origin].[trip_origin_mgra_13]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;&#x9;[dimension].[geography_trip_destination]&#xA;ON&#xA;&#x9;CONVERT(nvarchar, [individualTrips].[destinationMGRA]) = [geography_trip_destination].[trip_destination_mgra_13]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;&#x9;[dimension].[geography_parking_destination] &#xA;ON&#xA;    CONVERT(nvarchar, [individualTrips].[parkingMGRA]) = [geography_parking_destination].[parking_destination_mgra_13]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;&#x9;[dimension].[transit_tap] AS [transit_tap_boarding]&#xA;ON&#xA;&#x9;[transit_tap_boarding].[scenario_id] = @scenario_id&#xA;&#x9;AND CASE&#x9;WHEN [individualTrips].[boardingTAP] IS NULL THEN 'Not Applicable'&#xA;&#x9;&#x9;&#x9;&#x9;ELSE CONVERT(nvarchar, [individualTrips].[boardingTAP])&#xA;&#x9;&#x9;&#x9;&#x9;END = [transit_tap_boarding].[tap]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;&#x9;[dimension].[transit_tap] AS [transit_tap_alighting]&#xA;ON&#xA;&#x9;[transit_tap_alighting].[scenario_id] = @scenario_id&#xA;&#x9;AND CASE&#x9;WHEN [individualTrips].[alightingTAP] IS NULL THEN 'Not Applicable'&#xA;&#x9;&#x9;&#x9;&#x9;ELSE CONVERT(nvarchar, [individualTrips].[alightingTAP])&#xA;&#x9;&#x9;&#x9;&#x9;END = [transit_tap_alighting].[tap]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;    [dimension].[value_of_time_category]&#xA;ON&#xA;    [individualTrips].[valueOfTimeCategory]  = [value_of_time_category].[value_of_time_category_description]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;    [dimension].[transponder_available]&#xA;ON&#xA;    CASE    WHEN [individualTrips].[transponderAvailable] = 'False' THEN 'Transponder Not Available'&#xA;            WHEN [individualTrips].[transponderAvailable] = 'True' THEN 'Transponder Available'&#xA;            ELSE NULL END = [transponder_available].[transponder_available_description]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;    [dimension].[av_used]&#xA;ON&#xA;    CASE    WHEN [individualTrips].[avUsed] = 'False' THEN 'AV Not Used'&#xA;            WHEN [individualTrips].[avUsed] = 'True' THEN 'AV Used'&#xA;            ELSE NULL END = [av_used].[av_used_description]&#xA;&#xA;&#xA;&#xA;&#xA;-- drop staging tables -------------------------------------------------------&#xA;DROP TABLE IF EXISTS [staging].[individualTrips]" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
          <SQLTask:ParameterBinding
            SQLTask:ParameterName="0"
            SQLTask:DtsVariableName="$Package::scenarioID"
            SQLTask:ParameterDirection="Input"
            SQLTask:DataType="131"
            SQLTask:ParameterSize="-1" />
        </SQLTask:SqlTaskData>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\insertTripsOther"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:DelayValidation="True"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{d27b4f4c-c0b0-41d2-b956-d020dcdf0f66}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:FailPackageOnFailure="True"
      DTS:FailParentOnFailure="True"
      DTS:LocaleID="-1"
      DTS:MaxErrorCount="0"
      DTS:ObjectName="insertTripsOther"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2017 RC1; Â© 2017 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="5">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{A2745192-1304-4CAD-B395-584AC14AA8AD}"
          SQLTask:SqlStatementSource="SET NOCOUNT ON&#xA;DECLARE @scenario_id integer = ?;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;-- insert commercial vehicle trips -------------------------------------------&#xA;INSERT INTO [fact].[person_trip] (&#xA;    [scenario_id]&#xA;    ,[model_trip_id]&#xA;    ,[abm_trip_id]&#xA;    ,[tour_id]&#xA;    ,[person_id]&#xA;    ,[household_id]&#xA;    ,[mode_trip_id]&#xA;    ,[purpose_trip_origin_id]&#xA;    ,[purpose_trip_destination_id]&#xA;    ,[inbound_id]&#xA;    ,[time_trip_start_id]&#xA;    ,[time_trip_end_id]&#xA;    ,[geography_trip_origin_id]&#xA;    ,[geography_trip_destination_id]&#xA;    ,[geography_parking_destination_id]&#xA;    ,[transit_tap_boarding_id]&#xA;    ,[transit_tap_alighting_id]&#xA;    ,[mode_airport_arrival_id]&#xA;    ,[value_of_time_category_id]&#xA;    ,[transponder_available_id]&#xA;    ,[av_used_id]&#xA;    ,[weight_trip]&#xA;    ,[weight_person_trip]&#xA;    ,[cost_parking]&#xA;    ,[time_drive]&#xA;    ,[distance_drive]&#xA;    ,[cost_toll_drive]&#xA;    ,[cost_operating_drive]&#xA;    ,[cost_fare_drive]&#xA;    ,[time_wait_drive]&#xA;    ,[time_transit_in_vehicle]&#xA;    ,[time_tier1_transit_in_vehicle]&#xA;    ,[time_freeway_rapid_transit_in_vehicle]&#xA;    ,[time_arterial_rapid_transit_in_vehicle]&#xA;    ,[time_express_bus_transit_in_vehicle]&#xA;    ,[time_local_bus_transit_in_vehicle]&#xA;    ,[time_light_rail_transit_in_vehicle]&#xA;    ,[time_commuter_rail_transit_in_vehicle]&#xA;    ,[time_transit_initial_wait]&#xA;    ,[time_transit_wait]&#xA;    ,[distance_transit_in_vehicle]&#xA;    ,[cost_fare_transit]&#xA;    ,[transfers_transit]&#xA;    ,[time_walk]&#xA;    ,[distance_walk]&#xA;    ,[time_mm]&#xA;    ,[distance_mm]&#xA;    ,[cost_fare_mm]&#xA;    ,[time_mt]&#xA;    ,[distance_mt]&#xA;    ,[cost_fare_mt]&#xA;    ,[time_bike]&#xA;    ,[distance_bike]&#xA;    ,[time_total]&#xA;    ,[distance_total]&#xA;    ,[cost_total])&#xA;SELECT&#xA;    @scenario_id AS [scenario_id]&#xA;    ,(SELECT [model_id] FROM [dimension].[model] WHERE [model_description] = 'Commercial Vehicle') AS [model_trip_id]&#xA;    ,[tripID] AS [abm_trip_id]&#xA;    ,[tour].[tour_id]&#xA;    ,0 AS [person_id]  -- hardcoded Not Applicable value&#xA;    ,0 AS [household_id]  -- hardcoded Not Applicable value&#xA;    ,[mode_trip_id]&#xA;    ,[purpose_trip_origin_id]&#xA;    ,[purpose_trip_destination_id]&#xA;    ,0 AS [inbound_id]  -- hardcoded Not Applicable value&#xA;    ,[time_trip_start_id]&#xA;    ,[time_trip_end_id]&#xA;&#x9;,[geography_trip_origin_taz].[geography_trip_origin_id] AS [geography_trip_origin_id]&#xA;&#x9;,[geography_trip_destination_taz].[geography_trip_destination_id] AS [geography_trip_destination_id]&#xA;    ,0 AS [geography_parking_destination_id]  -- hardcoded Not Applicable value&#xA;    ,0 AS [transit_tap_boarding_id]  -- hardcoded Not Applicable value&#xA;&#x9;,0 AS [transit_tap_alighting_id]  -- hardcoded Not Applicable value&#xA;    ,0 AS [mode_airport_arrival_id]  -- hardcoded Not Applicable value&#xA;    ,[value_of_time_category_id]&#xA;    ,[transponder_available_id]&#xA;    ,[av_used_id]&#xA;    ,[weightTrip] AS [weight_trip]&#xA;    ,[weightPersonTrip] AS [weight_person_trip]&#xA;    ,0 AS [cost_parking]&#xA;    ,ISNULL([timeDrive], 0) AS [time_drive]&#xA;    ,ISNULL([distanceDrive], 0) AS [distance_drive]&#xA;    ,ISNULL([costTollDrive], 0) AS [cost_toll_drive]&#xA;    ,ISNULL([costOperatingDrive], 0) AS [cost_operating_drive]&#xA;    ,0 AS [cost_fare_drive]&#xA;    ,0 AS [time_wait_drive]&#xA;    ,0 AS [time_transit_in_vehicle]&#xA;    ,0 AS [time_tier1_transit_in_vehicle]&#xA;    ,0 AS [time_freeway_rapid_transit_in_vehicle]&#xA;    ,0 AS [time_arterial_rapid_transit_in_vehicle]&#xA;    ,0 AS [time_express_bus_transit_in_vehicle]&#xA;    ,0 AS [time_local_bus_transit_in_vehicle]&#xA;    ,0 AS [time_light_rail_transit_in_vehicle]&#xA;    ,0 AS [time_commuter_rail_transit_in_vehicle]&#xA;    ,0 AS [time_transit_initial_wait]&#xA;    ,0 AS [time_transit_wait]&#xA;    ,0 AS [distance_transit_in_vehicle]&#xA;    ,0 AS [cost_fare_transit]&#xA;    ,0 AS [transfers_transit]&#xA;    ,0 AS [time_walk]&#xA;    ,0 AS [distance_walk]&#xA;    ,0 AS [time_mm]&#xA;    ,0 AS [distance_mm]&#xA;    ,0 AS [cost_fare_mm]&#xA;    ,0 AS [time_mt]&#xA;    ,0 AS [distance_mt]&#xA;    ,0 AS [cost_fare_mt]&#xA;    ,0 AS [time_bike]&#xA;    ,0 AS [distance_bike]&#xA;    ,[timeTotal] AS [time_total]&#xA;    ,[distanceTotal] AS [distance_total]&#xA;    ,[costTotal] AS [cost_total]&#xA;FROM&#xA;    [staging].[commercialVehicleTrips]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;    [dimension].[tour]&#xA;ON&#xA;    [tour].[scenario_id] = @scenario_id&#xA;    AND [tour].[model_tour_id] = (SELECT [model_id] FROM [dimension].[model] WHERE [model_description] = 'Commercial Vehicle')&#xA;    AND [commercialVehicleTrips].[tourID] = [tour].[abm_tour_id]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;    [dimension].[mode_trip]&#xA;ON&#xA;    [commercialVehicleTrips].[tripMode] = [mode_trip].[mode_trip_description]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;    [dimension].[purpose_trip_origin]&#xA;ON&#xA;    [commercialVehicleTrips].[tripPurposeOrigin] = [purpose_trip_origin].[purpose_trip_origin_description]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;    [dimension].[purpose_trip_destination]&#xA;ON&#xA;    [commercialVehicleTrips].[tripPurposeDestination] = [purpose_trip_destination].[purpose_trip_destination_description]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;    [dimension].[time_trip_start]&#xA;ON&#xA;    CONVERT(nvarchar, [commercialVehicleTrips].[departTimeAbmHalfHour]) = [time_trip_start].[trip_start_abm_half_hour]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;    [dimension].[time_trip_end]&#xA;ON&#xA;    CONVERT(nvarchar, [commercialVehicleTrips].[arriveTimeAbmHalfHour]) = [time_trip_end].[trip_end_abm_half_hour]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;&#x9;[dimension].[geography_trip_origin] AS [geography_trip_origin_taz]  -- operates at TAZ level&#xA;ON&#xA;&#x9;CONVERT(nvarchar, [commercialVehicleTrips].[originTAZ]) = [geography_trip_origin_taz].[trip_origin_taz_13]&#xA;&#x9;AND [geography_trip_origin_taz].[trip_origin_mgra_13] = 'Not Applicable'&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;&#x9;[dimension].[geography_trip_destination] AS [geography_trip_destination_taz]  -- operates at TAZ level&#xA;ON &#xA;&#x9;CONVERT(nvarchar, [commercialVehicleTrips].[destinationTAZ]) = [geography_trip_destination_taz].[trip_destination_taz_13]&#xA;&#x9;AND [geography_trip_destination_taz].[trip_destination_mgra_13] = 'Not Applicable'&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;    [dimension].[value_of_time_category]&#xA;ON&#xA;    [commercialVehicleTrips].[valueOfTimeCategory]  = [value_of_time_category].[value_of_time_category_description]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;    [dimension].[transponder_available]&#xA;ON&#xA;    CASE    WHEN [commercialVehicleTrips].[transponderAvailable] = 'False' THEN 'Transponder Not Available'&#xA;            WHEN [commercialVehicleTrips].[transponderAvailable] = 'True' THEN 'Transponder Available'&#xA;            ELSE NULL END = [transponder_available].[transponder_available_description]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;    [dimension].[av_used]&#xA;ON&#xA;    CASE    WHEN [commercialVehicleTrips].[avUsed] = 'False' THEN 'AV Not Used'&#xA;            WHEN [commercialVehicleTrips].[avUsed] = 'True' THEN 'AV Used'&#xA;            ELSE NULL END = [av_used].[av_used_description]&#xA;&#xA;&#xA;&#xA;&#xA;-- insert internal-external trips --------------------------------------------&#xA;INSERT INTO [fact].[person_trip] (&#xA;    [scenario_id]&#xA;    ,[model_trip_id]&#xA;    ,[abm_trip_id]&#xA;    ,[tour_id]&#xA;    ,[person_id]&#xA;    ,[household_id]&#xA;    ,[mode_trip_id]&#xA;    ,[purpose_trip_origin_id]&#xA;    ,[purpose_trip_destination_id]&#xA;    ,[inbound_id]&#xA;    ,[time_trip_start_id]&#xA;    ,[time_trip_end_id]&#xA;    ,[geography_trip_origin_id]&#xA;    ,[geography_trip_destination_id]&#xA;    ,[geography_parking_destination_id]&#xA;    ,[transit_tap_boarding_id]&#xA;    ,[transit_tap_alighting_id]&#xA;    ,[mode_airport_arrival_id]&#xA;    ,[value_of_time_category_id]&#xA;    ,[transponder_available_id]&#xA;    ,[av_used_id]&#xA;    ,[weight_trip]&#xA;    ,[weight_person_trip]&#xA;    ,[cost_parking]&#xA;    ,[time_drive]&#xA;    ,[distance_drive]&#xA;    ,[cost_toll_drive]&#xA;    ,[cost_operating_drive]&#xA;    ,[cost_fare_drive]&#xA;    ,[time_wait_drive]&#xA;    ,[time_transit_in_vehicle]&#xA;    ,[time_tier1_transit_in_vehicle]&#xA;    ,[time_freeway_rapid_transit_in_vehicle]&#xA;    ,[time_arterial_rapid_transit_in_vehicle]&#xA;    ,[time_express_bus_transit_in_vehicle]&#xA;    ,[time_local_bus_transit_in_vehicle]&#xA;    ,[time_light_rail_transit_in_vehicle]&#xA;    ,[time_commuter_rail_transit_in_vehicle]&#xA;    ,[time_transit_initial_wait]&#xA;    ,[time_transit_wait]&#xA;    ,[distance_transit_in_vehicle]&#xA;    ,[cost_fare_transit]&#xA;    ,[transfers_transit]&#xA;    ,[time_walk]&#xA;    ,[distance_walk]&#xA;    ,[time_mm]&#xA;    ,[distance_mm]&#xA;    ,[cost_fare_mm]&#xA;    ,[time_mt]&#xA;    ,[distance_mt]&#xA;    ,[cost_fare_mt]&#xA;    ,[time_bike]&#xA;    ,[distance_bike]&#xA;    ,[time_total]&#xA;    ,[distance_total]&#xA;    ,[cost_total])&#xA;SELECT&#xA;    @scenario_id AS [scenario_id]&#xA;    ,(SELECT [model_id] FROM [dimension].[model] WHERE [model_description] = 'Internal-External') AS [model_trip_id]&#xA;    ,[tripID] AS [abm_trip_id]&#xA;    ,[tour].[tour_id]&#xA;    ,[person].[person_id] AS [person_id]&#xA;    ,[person].[household_id] AS [household_id]&#xA;    ,[mode_trip_id]&#xA;    ,0 AS [purpose_trip_origin_id]  -- hardcoded Not Applicable value&#xA;    ,0 AS [purpose_trip_destination_id]  -- hardcoded Not Applicable value&#xA;    ,[inbound_id]&#xA;    ,[time_trip_start_id]&#xA;    ,0 AS [time_trip_end_id]  -- hardcoded Not Applicable value&#xA;&#x9;,[geography_trip_origin].[geography_trip_origin_id]&#xA;&#x9;,[geography_trip_destination].[geography_trip_destination_id]&#xA;    ,0  AS [geography_parking_destination_id]  -- hardcoded Not Applicable value&#xA;    ,[transit_tap_boarding].[transit_tap_id] AS [transit_tap_boarding_id]&#xA;&#x9;,[transit_tap_alighting].[transit_tap_id] AS [transit_tap_alighting_id]&#xA;    ,0 AS [mode_airport_arrival_id]  -- hardcoded Not Applicable value&#xA;    ,[value_of_time_category_id]&#xA;    ,[transponder_available_id]&#xA;    ,[av_used_id]&#xA;    ,[weightTrip] AS [weight_trip]&#xA;    ,[weightPersonTrip] AS [weight_person_trip]&#xA;    ,0 AS [cost_parking]  -- hardcoded Not Applicable value&#xA;    ,ISNULL([timeDrive], 0) + ISNULL([timeDriveTransit], 0) AS [time_drive]&#xA;    ,ISNULL([distanceDrive], 0) + ISNULL([distanceDriveTransit], 0) AS [distance_drive]&#xA;    ,ISNULL([costTollDrive], 0) AS [cost_toll_drive]&#xA;    ,ISNULL([costOperatingDrive], 0) AS [cost_operating_drive]&#xA;    ,ISNULL([costFareDrive], 0) AS [cost_fare_drive]&#xA;    ,ISNULL([timeWaitDrive], 0) AS [time_wait_drive]&#xA;    ,ISNULL([timeTransitInVehicle], 0) AS [time_transit_in_vehicle]&#xA;    ,ISNULL([timeTier1TransitInVehicle], 0) AS [time_tier1_transit_in_vehicle]&#xA;    ,ISNULL([timeFreewayRapidTransitInVehicle], 0) AS [time_freeway_rapid_transit_in_vehicle]&#xA;    ,ISNULL([timeArterialRapidTransitInVehicle], 0) AS [time_arterial_rapid_transit_in_vehicle]&#xA;    ,ISNULL([timeExpressBusTransitInVehicle], 0) AS [time_express_bus_transit_in_vehicle]&#xA;    ,ISNULL([timeLocalBusTransitInVehicle], 0) AS [time_local_bus_transit_in_vehicle]&#xA;    ,ISNULL([timeLightRailTransitInVehicle], 0) AS [time_light_rail_transit_in_vehicle]&#xA;    ,ISNULL([timeCommuterRailTransitInVehicle], 0) AS [time_commuter_rail_transit_in_vehicle]&#xA;    ,ISNULL([timeTransitInitialWait], 0) AS [time_transit_initial_wait]&#xA;    ,ISNULL([timeTransitWait], 0) AS [time_transit_wait]&#xA;    ,ISNULL([distanceTransitInVehicle], 0) AS [distance_transit_in_vehicle]&#xA;    ,ISNULL([costFareTransit], 0) AS [cost_fare_transit]&#xA;    ,ISNULL([transfersTransit], 0) AS [transfers_transit]&#xA;    ,ISNULL([timeTransitWalk], 0) + ISNULL([timeTransitWalkAccessEgress], 0) + ISNULL([timeWalk], 0) AS [time_walk]&#xA;    ,ISNULL([distanceTransitWalk], 0) + ISNULL([distanceTransitWalkAccessEgress], 0) + ISNULL([distanceWalk], 0) AS [distance_walk]&#xA;    ,ISNULL([timeTransitMMAccessEgress], 0) + ISNULL([timeMM], 0) AS [time_mm]&#xA;    ,ISNULL([distanceTransitMMAccessEgress], 0) + ISNULL([distanceMM], 0) AS [distance_mm]&#xA;    ,ISNULL([costFareTransitMMAccessEgress], 0) + ISNULL([costFareMM], 0) AS [cost_fare_mm]&#xA;    ,ISNULL([timeTransitMTAccessEgress], 0) + ISNULL([timeMT], 0) AS [time_mt]&#xA;    ,ISNULL([distanceTransitMTAccessEgress], 0) + ISNULL([distanceMT], 0) AS [distance_mt]&#xA;    ,ISNULL([costFareTransitMTAccessEgress], 0) + ISNULL([costFareMT], 0) AS [cost_fare_mt]&#xA;    ,ISNULL([timeBike], 0) AS [time_bike]&#xA;    ,ISNULL([distanceBike], 0) AS [distance_bike]&#xA;    ,[timeTotal] AS [time_total]&#xA;    ,[distanceTotal] AS [distance_total]&#xA;    ,[costTotal] AS [cost_total]&#xA;FROM&#xA;    [staging].[internalExternalTrips]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;    [dimension].[tour]&#xA;ON&#xA;    [tour].[scenario_id] = @scenario_id&#xA;    AND [tour].[model_tour_id] = (SELECT [model_id] FROM [dimension].[model] WHERE [model_description] = 'Internal-External')&#xA;    AND [internalExternalTrips].[tourID] = [tour].[abm_tour_id]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;    [dimension].[person]&#xA;ON&#xA;    [person].[scenario_id] = @scenario_id&#xA;    AND [internalExternalTrips].[personID] = [person].[person_id]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;    [dimension].[mode_trip]&#xA;ON&#xA;    [internalExternalTrips].[tripMode] = [mode_trip].[mode_trip_description]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;    [dimension].[inbound]&#xA;ON&#xA;    CASE    WHEN [internalExternalTrips].[inbound] = 'False' THEN 'Outbound'&#xA;            WHEN [internalExternalTrips].[inbound] = 'True' THEN 'Inbound'&#xA;            ELSE NULL END = [inbound].[inbound_description]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;    [dimension].[time_trip_start]&#xA;ON&#xA;    CONVERT(nvarchar, [internalExternalTrips].[departTimeAbmHalfHour]) = [time_trip_start].[trip_start_abm_half_hour]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;&#x9;[dimension].[geography_trip_origin]&#xA;ON&#xA;&#x9;CONVERT(nvarchar, [internalExternalTrips].[originMGRA]) = [geography_trip_origin].[trip_origin_mgra_13]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;&#x9;[dimension].[geography_trip_destination]&#xA;ON&#xA;&#x9;CONVERT(nvarchar, [internalExternalTrips].[destinationMGRA]) = [geography_trip_destination].[trip_destination_mgra_13]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;&#x9;[dimension].[transit_tap] AS [transit_tap_boarding]&#xA;ON&#xA;&#x9;[transit_tap_boarding].[scenario_id] = @scenario_id&#xA;&#x9;AND CASE&#x9;WHEN [internalExternalTrips].[boardingTAP] IS NULL THEN 'Not Applicable'&#xA;&#x9;&#x9;&#x9;&#x9;ELSE CONVERT(nvarchar, [internalExternalTrips].[boardingTAP])&#xA;&#x9;&#x9;&#x9;&#x9;END = [transit_tap_boarding].[tap]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;&#x9;[dimension].[transit_tap] AS [transit_tap_alighting]&#xA;ON&#xA;&#x9;[transit_tap_alighting].[scenario_id] = @scenario_id&#xA;&#x9;AND CASE&#x9;WHEN [internalExternalTrips].[alightingTAP] IS NULL THEN 'Not Applicable'&#xA;&#x9;&#x9;&#x9;&#x9;ELSE CONVERT(nvarchar, [internalExternalTrips].[alightingTAP])&#xA;&#x9;&#x9;&#x9;&#x9;END = [transit_tap_alighting].[tap]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;    [dimension].[value_of_time_category]&#xA;ON&#xA;    [internalExternalTrips].[valueOfTimeCategory]  = [value_of_time_category].[value_of_time_category_description]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;    [dimension].[transponder_available]&#xA;ON&#xA;    CASE    WHEN [internalExternalTrips].[transponderAvailable] = 'False' THEN 'Transponder Not Available'&#xA;            WHEN [internalExternalTrips].[transponderAvailable] = 'True' THEN 'Transponder Available'&#xA;            ELSE NULL END = [transponder_available].[transponder_available_description]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;    [dimension].[av_used]&#xA;ON&#xA;    CASE    WHEN [internalExternalTrips].[avUsed] = 'False' THEN 'AV Not Used'&#xA;            WHEN [internalExternalTrips].[avUsed] = 'True' THEN 'AV Used'&#xA;            ELSE NULL END = [av_used].[av_used_description]&#xA;&#xA;&#xA;&#xA;&#xA;-- insert joint trips --------------------------------------------------------&#xA;INSERT INTO [fact].[person_trip] (&#xA;    [scenario_id]&#xA;    ,[model_trip_id]&#xA;    ,[abm_trip_id]&#xA;    ,[tour_id]&#xA;    ,[person_id]&#xA;    ,[household_id]&#xA;    ,[mode_trip_id]&#xA;    ,[purpose_trip_origin_id]&#xA;    ,[purpose_trip_destination_id]&#xA;    ,[inbound_id]&#xA;    ,[time_trip_start_id]&#xA;    ,[time_trip_end_id]&#xA;    ,[geography_trip_origin_id]&#xA;    ,[geography_trip_destination_id]&#xA;    ,[geography_parking_destination_id]&#xA;    ,[transit_tap_boarding_id]&#xA;    ,[transit_tap_alighting_id]&#xA;    ,[mode_airport_arrival_id]&#xA;    ,[value_of_time_category_id]&#xA;    ,[transponder_available_id]&#xA;    ,[av_used_id]&#xA;    ,[weight_trip]&#xA;    ,[weight_person_trip]&#xA;    ,[cost_parking]&#xA;    ,[time_drive]&#xA;    ,[distance_drive]&#xA;    ,[cost_toll_drive]&#xA;    ,[cost_operating_drive]&#xA;    ,[cost_fare_drive]&#xA;    ,[time_wait_drive]&#xA;    ,[time_transit_in_vehicle]&#xA;    ,[time_tier1_transit_in_vehicle]&#xA;    ,[time_freeway_rapid_transit_in_vehicle]&#xA;    ,[time_arterial_rapid_transit_in_vehicle]&#xA;    ,[time_express_bus_transit_in_vehicle]&#xA;    ,[time_local_bus_transit_in_vehicle]&#xA;    ,[time_light_rail_transit_in_vehicle]&#xA;    ,[time_commuter_rail_transit_in_vehicle]&#xA;    ,[time_transit_initial_wait]&#xA;    ,[time_transit_wait]&#xA;    ,[distance_transit_in_vehicle]&#xA;    ,[cost_fare_transit]&#xA;    ,[transfers_transit]&#xA;    ,[time_walk]&#xA;    ,[distance_walk]&#xA;    ,[time_mm]&#xA;    ,[distance_mm]&#xA;    ,[cost_fare_mm]&#xA;    ,[time_mt]&#xA;    ,[distance_mt]&#xA;    ,[cost_fare_mt]&#xA;    ,[time_bike]&#xA;    ,[distance_bike]&#xA;    ,[time_total]&#xA;    ,[distance_total]&#xA;    ,[cost_total])&#xA;SELECT&#xA;    @scenario_id AS [scenario_id]&#xA;    ,(SELECT [model_id] FROM [dimension].[model] WHERE [model_description] = 'Joint') AS [model_trip_id]&#xA;    ,[tripID] AS [abm_trip_id]&#xA;    ,[tour].[tour_id]&#xA;    ,[person].[person_id] AS [person_id]&#xA;    ,[person].[household_id] AS [household_id]&#xA;    ,[mode_trip_id]&#xA;    ,[purpose_trip_origin_id]&#xA;    ,[purpose_trip_destination_id]&#xA;    ,[inbound_id]&#xA;    ,[time_trip_start_id]&#xA;    ,0 AS [time_trip_end_id]  -- hardcoded Not Applicable value&#xA;&#x9;,[geography_trip_origin].[geography_trip_origin_id]&#xA;&#x9;,[geography_trip_destination].[geography_trip_destination_id]&#xA;    ,CASE   WHEN [parkingMGRA] IS NULL THEN 0  -- hardcoded Not Applicable value&#xA;            ELSE [geography_parking_destination].[geography_parking_destination_id]&#xA;            END AS [geography_parking_destination_id]&#xA;    ,[transit_tap_boarding].[transit_tap_id] AS [transit_tap_boarding_id]&#xA;&#x9;,[transit_tap_alighting].[transit_tap_id] AS [transit_tap_alighting_id]&#xA;    ,0 AS [mode_airport_arrival_id]  -- hardcoded Not Applicable value&#xA;    ,[value_of_time_category_id]&#xA;    ,[transponder_available_id]&#xA;    ,[av_used_id]&#xA;    ,[weightTrip] AS [weight_trip]&#xA;    ,[weightPersonTrip] AS [weight_person_trip]&#xA;    ,[costParking] AS [cost_parking]&#xA;    ,ISNULL([timeDrive], 0) + ISNULL([timeDriveTransit], 0) AS [time_drive]&#xA;    ,ISNULL([distanceDrive], 0) + ISNULL([distanceDriveTransit], 0) AS [distance_drive]&#xA;    ,ISNULL([costTollDrive], 0) AS [cost_toll_drive]&#xA;    ,ISNULL([costOperatingDrive], 0) AS [cost_operating_drive]&#xA;    ,ISNULL([costFareDrive], 0) AS [cost_fare_drive]&#xA;    ,ISNULL([timeWaitDrive], 0) AS [time_wait_drive]&#xA;    ,ISNULL([timeTransitInVehicle], 0) AS [time_transit_in_vehicle]&#xA;    ,ISNULL([timeTier1TransitInVehicle], 0) AS [time_tier1_transit_in_vehicle]&#xA;    ,ISNULL([timeFreewayRapidTransitInVehicle], 0) AS [time_freeway_rapid_transit_in_vehicle]&#xA;    ,ISNULL([timeArterialRapidTransitInVehicle], 0) AS [time_arterial_rapid_transit_in_vehicle]&#xA;    ,ISNULL([timeExpressBusTransitInVehicle], 0) AS [time_express_bus_transit_in_vehicle]&#xA;    ,ISNULL([timeLocalBusTransitInVehicle], 0) AS [time_local_bus_transit_in_vehicle]&#xA;    ,ISNULL([timeLightRailTransitInVehicle], 0) AS [time_light_rail_transit_in_vehicle]&#xA;    ,ISNULL([timeCommuterRailTransitInVehicle], 0) AS [time_commuter_rail_transit_in_vehicle]&#xA;    ,ISNULL([timeTransitInitialWait], 0) AS [time_transit_initial_wait]&#xA;    ,ISNULL([timeTransitWait], 0) AS [time_transit_wait]&#xA;    ,ISNULL([distanceTransitInVehicle], 0) AS [distance_transit_in_vehicle]&#xA;    ,ISNULL([costFareTransit], 0) AS [cost_fare_transit]&#xA;    ,ISNULL([transfersTransit], 0) AS [transfers_transit]&#xA;    ,ISNULL([timeAutoTerminalWalk], 0) + ISNULL([timeTransitWalk], 0) + ISNULL([timeTransitWalkAccessEgress], 0) + ISNULL([timeWalk], 0) AS [time_walk]&#xA;    ,ISNULL([distanceAutoTerminalWalk], 0) + ISNULL([distanceTransitWalk], 0) + ISNULL([distanceTransitWalkAccessEgress], 0) + ISNULL([distanceWalk], 0) AS [distance_walk]&#xA;    ,ISNULL([timeTransitMMAccessEgress], 0) + ISNULL([timeMM], 0) AS [time_mm]&#xA;    ,ISNULL([distanceTransitMMAccessEgress], 0) + ISNULL([distanceMM], 0) AS [distance_mm]&#xA;    ,ISNULL([costFareTransitMMAccessEgress], 0) + ISNULL([costFareMM], 0) AS [cost_fare_mm]&#xA;    ,ISNULL([timeTransitMTAccessEgress], 0) + ISNULL([timeMT], 0) AS [time_mt]&#xA;    ,ISNULL([distanceTransitMTAccessEgress], 0) + ISNULL([distanceMT], 0) AS [distance_mt]&#xA;    ,ISNULL([costFareTransitMTAccessEgress], 0) + ISNULL([costFareMT], 0) AS [cost_fare_mt]&#xA;    ,ISNULL([timeBike], 0) AS [time_bike]&#xA;    ,ISNULL([distanceBike], 0) AS [distance_bike]&#xA;    ,[timeTotal] AS [time_total]&#xA;    ,[distanceTotal] AS [distance_total]&#xA;    ,[costTotal] AS [cost_total]&#xA;FROM&#xA;    [staging].[jointTrips]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;    [dimension].[tour]&#xA;ON&#xA;    [tour].[scenario_id] = @scenario_id&#xA;    AND [tour].[model_tour_id] = (SELECT [model_id] FROM [dimension].[model] WHERE [model_description] = 'Joint')&#xA;    AND [jointTrips].[tourID] = [tour].[abm_tour_id]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;    [dimension].[person]&#xA;ON&#xA;    [person].[scenario_id] = @scenario_id&#xA;    AND [jointTrips].[personID] = [person].[person_id]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;    [dimension].[mode_trip]&#xA;ON&#xA;    [jointTrips].[tripMode] = [mode_trip].[mode_trip_description]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;    [dimension].[purpose_trip_origin]&#xA;ON&#xA;    [jointTrips].[tripPurposeOrigin] = [purpose_trip_origin].[purpose_trip_origin_description]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;    [dimension].[purpose_trip_destination]&#xA;ON&#xA;    [jointTrips].[tripPurposeDestination] = [purpose_trip_destination].[purpose_trip_destination_description]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;    [dimension].[inbound]&#xA;ON&#xA;    CASE    WHEN [jointTrips].[inbound] = 'False' THEN 'Outbound'&#xA;            WHEN [jointTrips].[inbound] = 'True' THEN 'Inbound'&#xA;            ELSE NULL END = [inbound].[inbound_description]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;    [dimension].[time_trip_start]&#xA;ON&#xA;    CONVERT(nvarchar, [jointTrips].[departTimeAbmHalfHour]) = [time_trip_start].[trip_start_abm_half_hour]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;&#x9;[dimension].[geography_trip_origin]&#xA;ON&#xA;&#x9;CONVERT(nvarchar, [jointTrips].[originMGRA]) = [geography_trip_origin].[trip_origin_mgra_13]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;&#x9;[dimension].[geography_trip_destination]&#xA;ON&#xA;&#x9;CONVERT(nvarchar, [jointTrips].[destinationMGRA]) = [geography_trip_destination].[trip_destination_mgra_13]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;&#x9;[dimension].[geography_parking_destination] &#xA;ON&#xA;    CONVERT(nvarchar, [jointTrips].[parkingMGRA]) = [geography_parking_destination].[parking_destination_mgra_13]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;&#x9;[dimension].[transit_tap] AS [transit_tap_boarding]&#xA;ON&#xA;&#x9;[transit_tap_boarding].[scenario_id] = @scenario_id&#xA;&#x9;AND CASE&#x9;WHEN [jointTrips].[boardingTAP] IS NULL THEN 'Not Applicable'&#xA;&#x9;&#x9;&#x9;&#x9;ELSE CONVERT(nvarchar, [jointTrips].[boardingTAP])&#xA;&#x9;&#x9;&#x9;&#x9;END = [transit_tap_boarding].[tap]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;&#x9;[dimension].[transit_tap] AS [transit_tap_alighting]&#xA;ON&#xA;&#x9;[transit_tap_alighting].[scenario_id] = @scenario_id&#xA;&#x9;AND CASE&#x9;WHEN [jointTrips].[alightingTAP] IS NULL THEN 'Not Applicable'&#xA;&#x9;&#x9;&#x9;&#x9;ELSE CONVERT(nvarchar, [jointTrips].[alightingTAP])&#xA;&#x9;&#x9;&#x9;&#x9;END = [transit_tap_alighting].[tap]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;    [dimension].[value_of_time_category]&#xA;ON&#xA;    [jointTrips].[valueOfTimeCategory]  = [value_of_time_category].[value_of_time_category_description]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;    [dimension].[transponder_available]&#xA;ON&#xA;    CASE    WHEN [jointTrips].[transponderAvailable] = 'False' THEN 'Transponder Not Available'&#xA;            WHEN [jointTrips].[transponderAvailable] = 'True' THEN 'Transponder Available'&#xA;            ELSE NULL END = [transponder_available].[transponder_available_description]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;    [dimension].[av_used]&#xA;ON&#xA;    CASE    WHEN [jointTrips].[avUsed] = 'False' THEN 'AV Not Used'&#xA;            WHEN [jointTrips].[avUsed] = 'True' THEN 'AV Used'&#xA;            ELSE NULL END = [av_used].[av_used_description]&#xA;&#xA;&#xA;&#xA;&#xA;-- drop staging tables -------------------------------------------------------&#xA;DROP TABLE IF EXISTS [staging].[commercialVehicleTrips]&#xA;DROP TABLE IF EXISTS [staging].[internalExternalTrips]&#xA;DROP TABLE IF EXISTS [staging].[jointTrips]&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
          <SQLTask:ParameterBinding
            SQLTask:ParameterName="0"
            SQLTask:DtsVariableName="$Package::scenarioID"
            SQLTask:ParameterDirection="Input"
            SQLTask:DataType="131"
            SQLTask:ParameterSize="-1" />
        </SQLTask:SqlTaskData>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\insertTripsVisitor"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:DelayValidation="True"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{b9748f62-45b0-49d0-87b5-71cdec79fc60}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:FailPackageOnFailure="True"
      DTS:FailParentOnFailure="True"
      DTS:LocaleID="-1"
      DTS:MaxErrorCount="0"
      DTS:ObjectName="insertTripsVisitor"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2017 RC1; Â© 2017 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="6">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{A2745192-1304-4CAD-B395-584AC14AA8AD}"
          SQLTask:SqlStatementSource="SET NOCOUNT ON&#xA;DECLARE @scenario_id integer = ?;&#xA;&#xA;&#xA;&#xA;&#xA;-- insert visitor trips --------------------------------------------------------&#xA;INSERT INTO [fact].[person_trip] (&#xA;    [scenario_id]&#xA;    ,[model_trip_id]&#xA;    ,[abm_trip_id]&#xA;    ,[tour_id]&#xA;    ,[person_id]&#xA;    ,[household_id]&#xA;    ,[mode_trip_id]&#xA;    ,[purpose_trip_origin_id]&#xA;    ,[purpose_trip_destination_id]&#xA;    ,[inbound_id]&#xA;    ,[time_trip_start_id]&#xA;    ,[time_trip_end_id]&#xA;    ,[geography_trip_origin_id]&#xA;    ,[geography_trip_destination_id]&#xA;    ,[geography_parking_destination_id]&#xA;    ,[transit_tap_boarding_id]&#xA;    ,[transit_tap_alighting_id]&#xA;    ,[mode_airport_arrival_id]&#xA;    ,[value_of_time_category_id]&#xA;    ,[transponder_available_id]&#xA;    ,[av_used_id]&#xA;    ,[weight_trip]&#xA;    ,[weight_person_trip]&#xA;    ,[cost_parking]&#xA;    ,[time_drive]&#xA;    ,[distance_drive]&#xA;    ,[cost_toll_drive]&#xA;    ,[cost_operating_drive]&#xA;    ,[cost_fare_drive]&#xA;    ,[time_wait_drive]&#xA;    ,[time_transit_in_vehicle]&#xA;    ,[time_tier1_transit_in_vehicle]&#xA;    ,[time_freeway_rapid_transit_in_vehicle]&#xA;    ,[time_arterial_rapid_transit_in_vehicle]&#xA;    ,[time_express_bus_transit_in_vehicle]&#xA;    ,[time_local_bus_transit_in_vehicle]&#xA;    ,[time_light_rail_transit_in_vehicle]&#xA;    ,[time_commuter_rail_transit_in_vehicle]&#xA;    ,[time_transit_initial_wait]&#xA;    ,[time_transit_wait]&#xA;    ,[distance_transit_in_vehicle]&#xA;    ,[cost_fare_transit]&#xA;    ,[transfers_transit]&#xA;    ,[time_walk]&#xA;    ,[distance_walk]&#xA;    ,[time_mm]&#xA;    ,[distance_mm]&#xA;    ,[cost_fare_mm]&#xA;    ,[time_mt]&#xA;    ,[distance_mt]&#xA;    ,[cost_fare_mt]&#xA;    ,[time_bike]&#xA;    ,[distance_bike]&#xA;    ,[time_total]&#xA;    ,[distance_total]&#xA;    ,[cost_total])&#xA;SELECT&#xA;    @scenario_id AS [scenario_id]&#xA;    ,(SELECT [model_id] FROM [dimension].[model] WHERE [model_description] = 'Visitor') AS [model_trip_id]&#xA;    ,[tripID] AS [abm_trip_id]&#xA;    ,[tour].[tour_id]&#xA;    ,0 AS [person_id]  -- hardcoded Not Applicable value&#xA;    ,0 AS [household_id]  -- hardcoded Not Applicable value&#xA;    ,[mode_trip_id]&#xA;    ,[purpose_trip_origin_id]&#xA;    ,[purpose_trip_destination_id]&#xA;    ,[inbound_id]&#xA;    ,[time_trip_start_id]&#xA;    ,0 AS [time_trip_end_id]  -- hardcoded Not Applicable value&#xA;&#x9;,[geography_trip_origin].[geography_trip_origin_id]&#xA;&#x9;,[geography_trip_destination].[geography_trip_destination_id]&#xA;    ,0  AS [geography_parking_destination_id] -- hardcoded Not Applicable value&#xA;    ,[transit_tap_boarding].[transit_tap_id] AS [transit_tap_boarding_id]&#xA;&#x9;,[transit_tap_alighting].[transit_tap_id] AS [transit_tap_alighting_id]&#xA;    ,0 AS [mode_airport_arrival_id]  -- hardcoded Not Applicable value&#xA;    ,[value_of_time_category_id]&#xA;    ,[transponder_available_id]&#xA;    ,[av_used_id]&#xA;    ,[weightTrip] AS [weight_trip]&#xA;    ,[weightPersonTrip] AS [weight_person_trip]&#xA;    ,[costParking] AS [cost_parking]&#xA;    ,ISNULL([timeDrive], 0) + ISNULL([timeDriveTransit], 0) AS [time_drive]&#xA;    ,ISNULL([distanceDrive], 0) + ISNULL([distanceDriveTransit], 0) AS [distance_drive]&#xA;    ,ISNULL([costTollDrive], 0) AS [cost_toll_drive]&#xA;    ,ISNULL([costOperatingDrive], 0) AS [cost_operating_drive]&#xA;    ,ISNULL([costFareDrive], 0) AS [cost_fare_drive]&#xA;    ,ISNULL([timeWaitDrive], 0) AS [time_wait_drive]&#xA;    ,ISNULL([timeTransitInVehicle], 0) AS [time_transit_in_vehicle]&#xA;    ,ISNULL([timeTier1TransitInVehicle], 0) AS [time_tier1_transit_in_vehicle]&#xA;    ,ISNULL([timeFreewayRapidTransitInVehicle], 0) AS [time_freeway_rapid_transit_in_vehicle]&#xA;    ,ISNULL([timeArterialRapidTransitInVehicle], 0) AS [time_arterial_rapid_transit_in_vehicle]&#xA;    ,ISNULL([timeExpressBusTransitInVehicle], 0) AS [time_express_bus_transit_in_vehicle]&#xA;    ,ISNULL([timeLocalBusTransitInVehicle], 0) AS [time_local_bus_transit_in_vehicle]&#xA;    ,ISNULL([timeLightRailTransitInVehicle], 0) AS [time_light_rail_transit_in_vehicle]&#xA;    ,ISNULL([timeCommuterRailTransitInVehicle], 0) AS [time_commuter_rail_transit_in_vehicle]&#xA;    ,ISNULL([timeTransitInitialWait], 0) AS [time_transit_initial_wait]&#xA;    ,ISNULL([timeTransitWait], 0) AS [time_transit_wait]&#xA;    ,ISNULL([distanceTransitInVehicle], 0) AS [distance_transit_in_vehicle]&#xA;    ,ISNULL([costFareTransit], 0) AS [cost_fare_transit]&#xA;    ,ISNULL([transfersTransit], 0) AS [transfers_transit]&#xA;    ,ISNULL([timeTransitWalk], 0) + ISNULL([timeTransitWalkAccessEgress], 0) + ISNULL([timeWalk], 0) AS [time_walk]&#xA;    ,ISNULL([distanceTransitWalk], 0) + ISNULL([distanceTransitWalkAccessEgress], 0) + ISNULL([distanceWalk], 0) AS [distance_walk]&#xA;    ,ISNULL([timeTransitMMAccessEgress], 0) + ISNULL([timeMM], 0) AS [time_mm]&#xA;    ,ISNULL([distanceTransitMMAccessEgress], 0) + ISNULL([distanceMM], 0) AS [distance_mm]&#xA;    ,ISNULL([costFareTransitMMAccessEgress], 0) + ISNULL([costFareMM], 0) AS [cost_fare_mm]&#xA;    ,ISNULL([timeTransitMTAccessEgress], 0) + ISNULL([timeMT], 0) AS [time_mt]&#xA;    ,ISNULL([distanceTransitMTAccessEgress], 0) + ISNULL([distanceMT], 0) AS [distance_mt]&#xA;    ,ISNULL([costFareTransitMTAccessEgress], 0) + ISNULL([costFareMT], 0) AS [cost_fare_mt]&#xA;    ,ISNULL([timeBike], 0) AS [time_bike]&#xA;    ,ISNULL([distanceBike], 0) AS [distance_bike]&#xA;    ,[timeTotal] AS [time_total]&#xA;    ,[distanceTotal] AS [distance_total]&#xA;    ,[costTotal] AS [cost_total]&#xA;FROM&#xA;    [staging].[visitorTrips]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;    [dimension].[tour]&#xA;ON&#xA;    [tour].[scenario_id] = @scenario_id&#xA;    AND [tour].[model_tour_id] = (SELECT [model_id] FROM [dimension].[model] WHERE [model_description] = 'Visitor')&#xA;    AND [visitorTrips].[tourID] = [tour].[abm_tour_id]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;    [dimension].[mode_trip]&#xA;ON&#xA;    [visitorTrips].[tripMode] = [mode_trip].[mode_trip_description]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;    [dimension].[purpose_trip_origin]&#xA;ON&#xA;    [visitorTrips].[tripPurposeOrigin] = [purpose_trip_origin].[purpose_trip_origin_description]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;    [dimension].[purpose_trip_destination]&#xA;ON&#xA;    [visitorTrips].[tripPurposeDestination] = [purpose_trip_destination].[purpose_trip_destination_description]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;    [dimension].[inbound]&#xA;ON&#xA;    CASE    WHEN [visitorTrips].[inbound] = 'False' THEN 'Outbound'&#xA;            WHEN [visitorTrips].[inbound] = 'True' THEN 'Inbound'&#xA;            ELSE NULL END = [inbound].[inbound_description]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;    [dimension].[time_trip_start]&#xA;ON&#xA;    CONVERT(nvarchar, [visitorTrips].[departTimeAbmHalfHour]) = [time_trip_start].[trip_start_abm_half_hour]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;&#x9;[dimension].[geography_trip_origin]&#xA;ON&#xA;&#x9;CONVERT(nvarchar, [visitorTrips].[originMGRA]) = [geography_trip_origin].[trip_origin_mgra_13]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;&#x9;[dimension].[geography_trip_destination]&#xA;ON&#xA;&#x9;CONVERT(nvarchar, [visitorTrips].[destinationMGRA]) = [geography_trip_destination].[trip_destination_mgra_13]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;&#x9;[dimension].[transit_tap] AS [transit_tap_boarding]&#xA;ON&#xA;&#x9;[transit_tap_boarding].[scenario_id] = @scenario_id&#xA;&#x9;AND CASE&#x9;WHEN [visitorTrips].[boardingTAP] IS NULL THEN 'Not Applicable'&#xA;&#x9;&#x9;&#x9;&#x9;ELSE CONVERT(nvarchar, [visitorTrips].[boardingTAP])&#xA;&#x9;&#x9;&#x9;&#x9;END = [transit_tap_boarding].[tap]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;&#x9;[dimension].[transit_tap] AS [transit_tap_alighting]&#xA;ON&#xA;&#x9;[transit_tap_alighting].[scenario_id] = @scenario_id&#xA;&#x9;AND CASE&#x9;WHEN [visitorTrips].[alightingTAP] IS NULL THEN 'Not Applicable'&#xA;&#x9;&#x9;&#x9;&#x9;ELSE CONVERT(nvarchar, [visitorTrips].[alightingTAP])&#xA;&#x9;&#x9;&#x9;&#x9;END = [transit_tap_alighting].[tap]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;    [dimension].[value_of_time_category]&#xA;ON&#xA;    [visitorTrips].[valueOfTimeCategory]  = [value_of_time_category].[value_of_time_category_description]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;    [dimension].[transponder_available]&#xA;ON&#xA;    CASE    WHEN [visitorTrips].[transponderAvailable] = 'False' THEN 'Transponder Not Available'&#xA;            WHEN [visitorTrips].[transponderAvailable] = 'True' THEN 'Transponder Available'&#xA;            ELSE NULL END = [transponder_available].[transponder_available_description]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;    [dimension].[av_used]&#xA;ON&#xA;    CASE    WHEN [visitorTrips].[avUsed] = 'False' THEN 'AV Not Used'&#xA;            WHEN [visitorTrips].[avUsed] = 'True' THEN 'AV Used'&#xA;            ELSE NULL END = [av_used].[av_used_description]&#xA;&#xA;&#xA;&#xA;&#xA;-- drop staging tables -------------------------------------------------------&#xA;DROP TABLE IF EXISTS [staging].[visitorTrips]&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
          <SQLTask:ParameterBinding
            SQLTask:ParameterName="0"
            SQLTask:DtsVariableName="$Package::scenarioID"
            SQLTask:ParameterDirection="Input"
            SQLTask:DataType="131"
            SQLTask:ParameterSize="-1" />
        </SQLTask:SqlTaskData>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\insertTripsZombie"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:DelayValidation="True"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{f939a3a5-fb8c-4688-958d-a721d23fae5d}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:FailPackageOnFailure="True"
      DTS:FailParentOnFailure="True"
      DTS:LocaleID="-1"
      DTS:MaxErrorCount="0"
      DTS:ObjectName="insertTripsZombie"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2017 RC1; Â© 2017 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="4">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{A2745192-1304-4CAD-B395-584AC14AA8AD}"
          SQLTask:SqlStatementSource="SET NOCOUNT ON&#xA;DECLARE @scenario_id integer = ?;&#xA;&#xA;&#xA;&#xA;&#xA;-- insert av 0-passenger trips -----------------------------------------------&#xA;INSERT INTO [fact].[person_trip] (&#xA;    [scenario_id]&#xA;    ,[model_trip_id]&#xA;    ,[abm_trip_id]&#xA;    ,[tour_id]&#xA;    ,[person_id]&#xA;    ,[household_id]&#xA;    ,[mode_trip_id]&#xA;    ,[purpose_trip_origin_id]&#xA;    ,[purpose_trip_destination_id]&#xA;    ,[inbound_id]&#xA;    ,[time_trip_start_id]&#xA;    ,[time_trip_end_id]&#xA;    ,[geography_trip_origin_id]&#xA;    ,[geography_trip_destination_id]&#xA;    ,[geography_parking_destination_id]&#xA;    ,[transit_tap_boarding_id]&#xA;    ,[transit_tap_alighting_id]&#xA;    ,[mode_airport_arrival_id]&#xA;    ,[value_of_time_category_id]&#xA;    ,[transponder_available_id]&#xA;    ,[av_used_id]&#xA;    ,[weight_trip]&#xA;    ,[weight_person_trip]&#xA;    ,[cost_parking]&#xA;    ,[time_drive]&#xA;    ,[distance_drive]&#xA;    ,[cost_toll_drive]&#xA;    ,[cost_operating_drive]&#xA;    ,[cost_fare_drive]&#xA;    ,[time_wait_drive]&#xA;    ,[time_transit_in_vehicle]&#xA;    ,[time_tier1_transit_in_vehicle]&#xA;    ,[time_freeway_rapid_transit_in_vehicle]&#xA;    ,[time_arterial_rapid_transit_in_vehicle]&#xA;    ,[time_express_bus_transit_in_vehicle]&#xA;    ,[time_local_bus_transit_in_vehicle]&#xA;    ,[time_light_rail_transit_in_vehicle]&#xA;    ,[time_commuter_rail_transit_in_vehicle]&#xA;    ,[time_transit_initial_wait]&#xA;    ,[time_transit_wait]&#xA;    ,[distance_transit_in_vehicle]&#xA;    ,[cost_fare_transit]&#xA;    ,[transfers_transit]&#xA;    ,[time_walk]&#xA;    ,[distance_walk]&#xA;    ,[time_mm]&#xA;    ,[distance_mm]&#xA;    ,[cost_fare_mm]&#xA;    ,[time_mt]&#xA;    ,[distance_mt]&#xA;    ,[cost_fare_mt]&#xA;    ,[time_bike]&#xA;    ,[distance_bike]&#xA;    ,[time_total]&#xA;    ,[distance_total]&#xA;    ,[cost_total])&#xA;SELECT&#xA;    @scenario_id AS [scenario_id]&#xA;    ,(SELECT [model_id] FROM [dimension].[model] WHERE [model_description] = 'AV 0-Passenger') AS [model_trip_id]&#xA;    ,[tripID] AS [abm_trip_id]&#xA;    ,0 AS [tour_id]  -- hardcoded Not Applicable value&#xA;    ,0 AS [person_id]  -- hardcoded Not Applicable value&#xA;    ,[hhID] AS [household_id]&#xA;    ,[mode_trip_id]&#xA;    ,0 AS [purpose_trip_origin_id]  -- hardcoded Not Applicable value&#xA;    ,0 AS [purpose_trip_destination_id]  -- hardcoded Not Applicable value&#xA;    ,0 AS [inbound_id]  -- hardcoded Not Applicable value&#xA;    ,[time_trip_start_id]&#xA;    ,0 AS [time_trip_end_id]  -- hardcoded Not Applicable value&#xA;&#x9;,[geography_trip_origin].[geography_trip_origin_id] AS [geography_trip_origin_id]&#xA;&#x9;,[geography_trip_destination].[geography_trip_destination_id] AS [geography_trip_destination_id]&#xA;    ,0 AS [geography_parking_destination_id]  -- hardcoded Not Applicable value&#xA;    ,0 AS [transit_tap_boarding_id]  -- hardcoded Not Applicable value&#xA;&#x9;,0 AS [transit_tap_alighting_id]  -- hardcoded Not Applicable value&#xA;    ,0 AS [mode_airport_arrival_id]  -- hardcoded Not Applicable value&#xA;    ,[value_of_time_category_id]&#xA;    ,[transponder_available_id]&#xA;    ,[av_used_id]&#xA;    ,[weightTrip] AS [weight_trip]&#xA;    ,[weightPersonTrip] AS [weight_person_trip]&#xA;    ,[costParking] AS [cost_parking]&#xA;    ,ISNULL([timeDrive], 0) AS [time_drive]&#xA;    ,ISNULL([distanceDrive], 0) AS [distance_drive]&#xA;    ,ISNULL([costTollDrive], 0) AS [cost_toll_drive]&#xA;    ,ISNULL([costOperatingDrive], 0) AS [cost_operating_drive]&#xA;    ,0 AS [cost_fare_drive]&#xA;    ,0 AS [time_wait_drive]&#xA;    ,0 AS [time_transit_in_vehicle]&#xA;    ,0 AS [time_tier1_transit_in_vehicle]&#xA;    ,0 AS [time_freeway_rapid_transit_in_vehicle]&#xA;    ,0 AS [time_arterial_rapid_transit_in_vehicle]&#xA;    ,0 AS [time_express_bus_transit_in_vehicle]&#xA;    ,0 AS [time_local_bus_transit_in_vehicle]&#xA;    ,0 AS [time_light_rail_transit_in_vehicle]&#xA;    ,0 AS [time_commuter_rail_transit_in_vehicle]&#xA;    ,0 AS [time_transit_initial_wait]&#xA;    ,0 AS [time_transit_wait]&#xA;    ,0 AS [distance_transit_in_vehicle]&#xA;    ,0 AS [cost_fare_transit]&#xA;    ,0 AS [transfers_transit]&#xA;    ,0 AS [time_walk]&#xA;    ,0 AS [distance_walk]&#xA;    ,0 AS [time_mm]&#xA;    ,0 AS [distance_mm]&#xA;    ,0 AS [cost_fare_mm]&#xA;    ,0 AS [time_mt]&#xA;    ,0 AS [distance_mt]&#xA;    ,0 AS [cost_fare_mt]&#xA;    ,0 AS [time_bike]&#xA;    ,0 AS [distance_bike]&#xA;    ,[timeTotal] AS [time_total]&#xA;    ,[distanceTotal] AS [distance_total]&#xA;    ,[costTotal] AS [cost_total]&#xA;FROM&#xA;    [staging].[zombieAVTrips]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;    [dimension].[mode_trip]&#xA;ON&#xA;    [zombieAVTrips].[tripMode] = [mode_trip].[mode_trip_description]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;    [dimension].[time_trip_start]&#xA;ON&#xA;    CONVERT(nvarchar, [zombieAVTrips].[departTimeAbmHalfHour]) = [time_trip_start].[trip_start_abm_half_hour]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;&#x9;[dimension].[geography_trip_origin]&#xA;ON&#xA;&#x9;CONVERT(nvarchar, [zombieAVTrips].[originMGRA]) = [geography_trip_origin].[trip_origin_mgra_13]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;&#x9;[dimension].[geography_trip_destination]&#xA;ON&#xA;&#x9;CONVERT(nvarchar, [zombieAVTrips].[destinationMGRA]) = [geography_trip_destination].[trip_destination_mgra_13]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;    [dimension].[value_of_time_category]&#xA;ON&#xA;    [zombieAVTrips].[valueOfTimeCategory]  = [value_of_time_category].[value_of_time_category_description]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;    [dimension].[transponder_available]&#xA;ON&#xA;    CASE    WHEN [zombieAVTrips].[transponderAvailable] = 'False' THEN 'Transponder Not Available'&#xA;            WHEN [zombieAVTrips].[transponderAvailable] = 'True' THEN 'Transponder Available'&#xA;            ELSE NULL END = [transponder_available].[transponder_available_description]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;    [dimension].[av_used]&#xA;ON&#xA;    CASE    WHEN [zombieAVTrips].[avUsed] = 'False' THEN 'AV Not Used'&#xA;            WHEN [zombieAVTrips].[avUsed] = 'True' THEN 'AV Used'&#xA;            ELSE NULL END = [av_used].[av_used_description]&#xA;&#xA;&#xA;&#xA;&#xA;-- insert tnc 0-passenger trips ----------------------------------------------&#xA;INSERT INTO [fact].[person_trip] (&#xA;    [scenario_id]&#xA;    ,[model_trip_id]&#xA;    ,[abm_trip_id]&#xA;    ,[tour_id]&#xA;    ,[person_id]&#xA;    ,[household_id]&#xA;    ,[mode_trip_id]&#xA;    ,[purpose_trip_origin_id]&#xA;    ,[purpose_trip_destination_id]&#xA;    ,[inbound_id]&#xA;    ,[time_trip_start_id]&#xA;    ,[time_trip_end_id]&#xA;    ,[geography_trip_origin_id]&#xA;    ,[geography_trip_destination_id]&#xA;    ,[geography_parking_destination_id]&#xA;    ,[transit_tap_boarding_id]&#xA;    ,[transit_tap_alighting_id]&#xA;    ,[mode_airport_arrival_id]&#xA;    ,[value_of_time_category_id]&#xA;    ,[transponder_available_id]&#xA;    ,[av_used_id]&#xA;    ,[weight_trip]&#xA;    ,[weight_person_trip]&#xA;    ,[cost_parking]&#xA;    ,[time_drive]&#xA;    ,[distance_drive]&#xA;    ,[cost_toll_drive]&#xA;    ,[cost_operating_drive]&#xA;    ,[cost_fare_drive]&#xA;    ,[time_wait_drive]&#xA;    ,[time_transit_in_vehicle]&#xA;    ,[time_tier1_transit_in_vehicle]&#xA;    ,[time_freeway_rapid_transit_in_vehicle]&#xA;    ,[time_arterial_rapid_transit_in_vehicle]&#xA;    ,[time_express_bus_transit_in_vehicle]&#xA;    ,[time_local_bus_transit_in_vehicle]&#xA;    ,[time_light_rail_transit_in_vehicle]&#xA;    ,[time_commuter_rail_transit_in_vehicle]&#xA;    ,[time_transit_initial_wait]&#xA;    ,[time_transit_wait]&#xA;    ,[distance_transit_in_vehicle]&#xA;    ,[cost_fare_transit]&#xA;    ,[transfers_transit]&#xA;    ,[time_walk]&#xA;    ,[distance_walk]&#xA;    ,[time_mm]&#xA;    ,[distance_mm]&#xA;    ,[cost_fare_mm]&#xA;    ,[time_mt]&#xA;    ,[distance_mt]&#xA;    ,[cost_fare_mt]&#xA;    ,[time_bike]&#xA;    ,[distance_bike]&#xA;    ,[time_total]&#xA;    ,[distance_total]&#xA;    ,[cost_total])&#xA;SELECT&#xA;    @scenario_id AS [scenario_id]&#xA;    ,(SELECT [model_id] FROM [dimension].[model] WHERE [model_description] = 'TNC 0-Passenger') AS [model_trip_id]&#xA;    ,[tripID] AS [abm_trip_id]&#xA;    ,0 AS [tour_id]  -- hardcoded Not Applicable value&#xA;    ,0 AS [person_id]  -- hardcoded Not Applicable value&#xA;    ,0 AS [household_id]  -- hardcoded Not Applicable value&#xA;    ,[mode_trip_id]&#xA;    ,[purpose_trip_origin_id]&#xA;    ,[purpose_trip_destination_id]&#xA;    ,0 AS [inbound_id]  -- hardcoded Not Applicable value&#xA;    ,[time_trip_start_id]&#xA;    ,[time_trip_end_id]&#xA;&#x9;,[geography_trip_origin].[geography_trip_origin_id] AS [geography_trip_origin_id]&#xA;&#x9;,[geography_trip_destination].[geography_trip_destination_id] AS [geography_trip_destination_id]&#xA;    ,0 AS [geography_parking_destination_id]  -- hardcoded Not Applicable value&#xA;    ,0 AS [transit_tap_boarding_id]  -- hardcoded Not Applicable value&#xA;&#x9;,0 AS [transit_tap_alighting_id]  -- hardcoded Not Applicable value&#xA;    ,0 AS [mode_airport_arrival_id]  -- hardcoded Not Applicable value&#xA;    ,[value_of_time_category_id]&#xA;    ,[transponder_available_id]&#xA;    ,[av_used_id]&#xA;    ,[weightTrip] AS [weight_trip]&#xA;    ,[weightPersonTrip] AS [weight_person_trip]&#xA;    ,0 AS [cost_parking]&#xA;    ,ISNULL([timeDrive], 0) AS [time_drive]&#xA;    ,ISNULL([distanceDrive], 0) AS [distance_drive]&#xA;    ,ISNULL([costTollDrive], 0) AS [cost_toll_drive]&#xA;    ,ISNULL([costOperatingDrive], 0) AS [cost_operating_drive]&#xA;    ,0 AS [cost_fare_drive]&#xA;    ,0 AS [time_wait_drive]&#xA;    ,0 AS [time_transit_in_vehicle]&#xA;    ,0 AS [time_tier1_transit_in_vehicle]&#xA;    ,0 AS [time_freeway_rapid_transit_in_vehicle]&#xA;    ,0 AS [time_arterial_rapid_transit_in_vehicle]&#xA;    ,0 AS [time_express_bus_transit_in_vehicle]&#xA;    ,0 AS [time_local_bus_transit_in_vehicle]&#xA;    ,0 AS [time_light_rail_transit_in_vehicle]&#xA;    ,0 AS [time_commuter_rail_transit_in_vehicle]&#xA;    ,0 AS [time_transit_initial_wait]&#xA;    ,0 AS [time_transit_wait]&#xA;    ,0 AS [distance_transit_in_vehicle]&#xA;    ,0 AS [cost_fare_transit]&#xA;    ,0 AS [transfers_transit]&#xA;    ,0 AS [time_walk]&#xA;    ,0 AS [distance_walk]&#xA;    ,0 AS [time_mm]&#xA;    ,0 AS [distance_mm]&#xA;    ,0 AS [cost_fare_mm]&#xA;    ,0 AS [time_mt]&#xA;    ,0 AS [distance_mt]&#xA;    ,0 AS [cost_fare_mt]&#xA;    ,0 AS [time_bike]&#xA;    ,0 AS [distance_bike]&#xA;    ,[timeTotal] AS [time_total]&#xA;    ,[distanceTotal] AS [distance_total]&#xA;    ,[costTotal] AS [cost_total]&#xA;FROM&#xA;    [staging].[zombieTNCTrips]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;    [dimension].[mode_trip]&#xA;ON&#xA;    [zombieTNCTrips].[tripMode] = [mode_trip].[mode_trip_description]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;    [dimension].[purpose_trip_origin]&#xA;ON&#xA;    [zombieTNCTrips].[originPurpose] = [purpose_trip_origin].[purpose_trip_origin_description]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;    [dimension].[purpose_trip_destination]&#xA;ON&#xA;    [zombieTNCTrips].[destinationPurpose] = [purpose_trip_destination].[purpose_trip_destination_description]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;    [dimension].[time_trip_start]&#xA;ON&#xA;    CONVERT(nvarchar, [zombieTNCTrips].[departTimeAbmHalfHour]) = [time_trip_start].[trip_start_abm_half_hour]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;    [dimension].[time_trip_end]&#xA;ON&#xA;    CONVERT(nvarchar, [zombieTNCTrips].[arriveTimeAbmHalfHour]) = [time_trip_end].[trip_end_abm_half_hour]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;&#x9;[dimension].[geography_trip_origin]&#xA;ON&#xA;&#x9;CONVERT(nvarchar, [zombieTNCTrips].[originMGRA]) = [geography_trip_origin].[trip_origin_mgra_13]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;&#x9;[dimension].[geography_trip_destination]&#xA;ON&#xA;&#x9;CONVERT(nvarchar, [zombieTNCTrips].[destinationMGRA]) = [geography_trip_destination].[trip_destination_mgra_13]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;    [dimension].[value_of_time_category]&#xA;ON&#xA;    [zombieTNCTrips].[valueOfTimeCategory]  = [value_of_time_category].[value_of_time_category_description]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;    [dimension].[transponder_available]&#xA;ON&#xA;    CASE    WHEN [zombieTNCTrips].[transponderAvailable] = 'False' THEN 'Transponder Not Available'&#xA;            WHEN [zombieTNCTrips].[transponderAvailable] = 'True' THEN 'Transponder Available'&#xA;            ELSE NULL END = [transponder_available].[transponder_available_description]&#xA;LEFT OUTER JOIN  -- returns NULLs as QA check&#xA;    [dimension].[av_used]&#xA;ON&#xA;    CASE    WHEN [zombieTNCTrips].[avUsed] = 'False' THEN 'AV Not Used'&#xA;            WHEN [zombieTNCTrips].[avUsed] = 'True' THEN 'AV Used'&#xA;            ELSE NULL END = [av_used].[av_used_description]&#xA;&#xA;&#xA;&#xA;&#xA;-- drop staging tables -------------------------------------------------------&#xA;DROP TABLE IF EXISTS [staging].[zombieAVTrips]&#xA;DROP TABLE IF EXISTS [staging].[zombieTNCTrips]&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
          <SQLTask:ParameterBinding
            SQLTask:ParameterName="0"
            SQLTask:DtsVariableName="$Package::scenarioID"
            SQLTask:ParameterDirection="Input"
            SQLTask:DataType="131"
            SQLTask:ParameterSize="-1" />
        </SQLTask:SqlTaskData>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\loadTours"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:DelayValidation="True"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{32f32b07-0df6-4fc2-a4c2-dbf99dea8e69}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:FailPackageOnFailure="True"
      DTS:FailParentOnFailure="True"
      DTS:LocaleID="-1"
      DTS:MaxErrorCount="0"
      DTS:ObjectName="loadTours"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2017 RC1; Â© 2017 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{A2745192-1304-4CAD-B395-584AC14AA8AD}"
          SQLTask:SqlStatementSource="SET NOCOUNT ON&#xA;-- set path to completed ABM scenario folder&#xA;DECLARE @folder nvarchar(max) = ?;&#xA;&#xA;&#xA;&#xA;&#xA;-- load commercial vehicle tours ---------------------------------------------&#xA;&#xA;-- create staging table&#xA;DROP TABLE IF EXISTS [staging].[commercialVehicleTours]&#xA;CREATE TABLE [staging].[commercialVehicleTours] (&#xA;    [tourID] int NOT NULL,&#xA;    [actorType] nvarchar(20) NOT NULL,&#xA;    [tourPurpose] nvarchar(10) NOT NULL,&#xA;    [departTimeAbmHalfHour] int NOT NULL,&#xA;    [arriveTimeAbmHalfHour] int NOT NULL,&#xA;    [departTimeFiveTod] float NOT NULL,&#xA;    [arriveTimeFiveTod] float NOT NULL,&#xA;    [originTAZ] int NOT NULL,&#xA;    [tourMode] nvarchar(25) NOT NULL,&#xA;    CONSTRAINT pk_staging_commercialVehicleTours PRIMARY KEY([tourID]))&#xA;WITH (DATA_COMPRESSION = PAGE)&#xA;&#xA;-- bulk load into staging table&#xA;DECLARE @sqlCV nvarchar(max) = '&#xA;&#x9;BULK INSERT [staging].[commercialVehicleTours]&#xA;&#x9;FROM  ''' + @folder + '\report\commercialVehicleTours.csv'' &#xA;&#x9;WITH &#xA;&#x9;( &#xA;&#x9;&#x9;FIRSTROW = 2,&#xA;&#x9;&#x9;FIELDTERMINATOR = '','', &#xA;&#x9;&#x9;ROWTERMINATOR = ''\n'',&#xA;&#x9;&#x9;MAXERRORS = 0,&#xA;&#x9;&#x9;TABLOCK&#xA;&#x9;)'&#xA;EXEC sp_executesql @sqlCV&#xA;&#xA;&#xA;&#xA;&#xA;-- load cross border tours ---------------------------------------------------&#xA;&#xA;-- create staging table&#xA;DROP TABLE IF EXISTS [staging].[crossBorderTours]&#xA;CREATE TABLE [staging].[crossBorderTours] (&#xA;    [tourID] int NOT NULL,&#xA;    [tourPurpose] nvarchar(10) NOT NULL,&#xA;    [sentri] nvarchar(5) NOT NULL,&#xA;    [point_of_entry] nvarchar(20) NOT NULL,&#xA;    [departTimeAbmHalfHour] int NOT NULL,&#xA;    [arriveTimeAbmHalfHour] int NOT NULL,&#xA;    [departTimeFiveTod] float NOT NULL,&#xA;    [arriveTimeFiveTod] float NOT NULL,&#xA;    [originMGRA] int NOT NULL,&#xA;    [destinationMGRA] int NOT NULL,&#xA;    [originTAZ] int NOT NULL,&#xA;    [destinationTAZ] int NOT NULL,&#xA;    [tourMode] nvarchar(20) NOT NULL,&#xA;    CONSTRAINT pk_staging_crossBorderTours PRIMARY KEY([tourID]))&#xA;WITH (DATA_COMPRESSION = PAGE)&#xA;&#xA;-- bulk load into staging table&#xA;DECLARE @sqlCB nvarchar(max) = '&#xA;&#x9;BULK INSERT [staging].[crossBorderTours]&#xA;&#x9;FROM  ''' + @folder + '\report\crossBorderTours.csv'' &#xA;&#x9;WITH &#xA;&#x9;( &#xA;&#x9;&#x9;FIRSTROW = 2,&#xA;&#x9;&#x9;FIELDTERMINATOR = '','', &#xA;&#x9;&#x9;ROWTERMINATOR = ''\n'',&#xA;&#x9;&#x9;MAXERRORS = 0,&#xA;&#x9;&#x9;TABLOCK&#xA;&#x9;)'&#xA;EXEC sp_executesql @sqlCB&#xA;&#xA;&#xA;&#xA;&#xA;-- load individual tours -----------------------------------------------------&#xA;&#xA;-- create staging table&#xA;DROP TABLE IF EXISTS [staging].[individualTours]&#xA;CREATE TABLE [staging].[individualTours] (&#xA;    [tourID] int NOT NULL,&#xA;    [personID] int NOT NULL,&#xA;    [tourCategory] nvarchar(30) NOT NULL,&#xA;    [tourPurpose] nvarchar(15) NOT NULL,&#xA;    [departTimeAbmHalfHour] int NOT NULL,&#xA;    [arriveTimeAbmHalfHour] int NOT NULL,&#xA;    [departTimeFiveTod] float NOT NULL,&#xA;    [arriveTimeFiveTod] float NOT NULL,&#xA;    [originMGRA] int NOT NULL,&#xA;    [destinationMGRA] int NOT NULL,&#xA;    [originTAZ] int NOT NULL,&#xA;    [destinationTAZ] int NOT NULL,&#xA;    [tourMode] nvarchar(30) NOT NULL,&#xA;    CONSTRAINT pk_staging_individualTours PRIMARY KEY([tourID]))&#xA;WITH (DATA_COMPRESSION = PAGE)&#xA;&#xA;-- bulk load into staging table&#xA;DECLARE @sqlIndiv nvarchar(max) = '&#xA;&#x9;BULK INSERT [staging].[individualTours]&#xA;&#x9;FROM  ''' + @folder + '\report\individualTours.csv'' &#xA;&#x9;WITH &#xA;&#x9;( &#xA;&#x9;&#x9;FIRSTROW = 2,&#xA;&#x9;&#x9;FIELDTERMINATOR = '','', &#xA;&#x9;&#x9;ROWTERMINATOR = ''\n'',&#xA;&#x9;&#x9;MAXERRORS = 0,&#xA;&#x9;&#x9;TABLOCK&#xA;&#x9;)'&#xA;EXEC sp_executesql @sqlIndiv&#xA;&#xA;&#xA;&#xA;&#xA;-- load internal-external tours ----------------------------------------------&#xA;&#xA;-- create staging table&#xA;DROP TABLE IF EXISTS [staging].[internalExternalTours]&#xA;CREATE TABLE [staging].[internalExternalTours] (&#xA;    [tourID] int NOT NULL,&#xA;    [personID] int NOT NULL,&#xA;    [departTimeAbmHalfHour] int NOT NULL,&#xA;    [arriveTimeAbmHalfHour] int NOT NULL,&#xA;    [departTimeFiveTod] float NOT NULL,&#xA;    [arriveTimeFiveTod] float NOT NULL,&#xA;    [originMGRA] int NOT NULL,&#xA;    [destinationMGRA] int NOT NULL,&#xA;    [originTAZ] int NOT NULL,&#xA;    [destinationTAZ] int NOT NULL,&#xA;    [tourMode] nvarchar(30) NOT NULL,&#xA;    CONSTRAINT pk_staging_internalExternalTours PRIMARY KEY([tourID]))&#xA;WITH (DATA_COMPRESSION = PAGE)&#xA;&#xA;-- bulk load into staging table&#xA;DECLARE @sqlIE nvarchar(max) = '&#xA;&#x9;BULK INSERT [staging].[internalExternalTours]&#xA;&#x9;FROM  ''' + @folder + '\report\internalExternalTours.csv'' &#xA;&#x9;WITH &#xA;&#x9;( &#xA;&#x9;&#x9;FIRSTROW = 2,&#xA;&#x9;&#x9;FIELDTERMINATOR = '','', &#xA;&#x9;&#x9;ROWTERMINATOR = ''\n'',&#xA;&#x9;&#x9;MAXERRORS = 0,&#xA;&#x9;&#x9;TABLOCK&#xA;&#x9;)'&#xA;EXEC sp_executesql @sqlIE&#xA;&#xA;&#xA;&#xA;&#xA;-- load joint tours ----------------------------------------------------------&#xA;&#xA;-- create staging table&#xA;DROP TABLE IF EXISTS [staging].[jointTours]&#xA;CREATE TABLE [staging].[jointTours] (&#xA;    [tourID] int NOT NULL,&#xA;    [hhID] int NOT NULL,&#xA;    [tourParticipants] nvarchar(30) NOT NULL,&#xA;    [tourCategory] nvarchar(25) NOT NULL,&#xA;    [tourPurpose] nvarchar(15) NOT NULL,&#xA;    [departTimeAbmHalfHour] int NOT NULL,&#xA;    [arriveTimeAbmHalfHour] int NOT NULL,&#xA;    [departTimeFiveTod] float NOT NULL,&#xA;    [arriveTimeFiveTod] float NOT NULL,&#xA;    [originMGRA] int NOT NULL,&#xA;    [destinationMGRA] int NOT NULL,&#xA;    [originTAZ] int NOT NULL,&#xA;    [destinationTAZ] int NOT NULL,&#xA;    [tourMode] nvarchar(30) NOT NULL,&#xA;    CONSTRAINT pk_staging_jointTours PRIMARY KEY([tourID]))&#xA;WITH (DATA_COMPRESSION = PAGE)&#xA;&#xA;-- bulk load into staging table&#xA;DECLARE @sqlJoint nvarchar(max) = '&#xA;&#x9;BULK INSERT [staging].[jointTours]&#xA;&#x9;FROM  ''' + @folder + '\report\jointTours.csv'' &#xA;&#x9;WITH &#xA;&#x9;( &#xA;&#x9;&#x9;FIRSTROW = 2,&#xA;&#x9;&#x9;FIELDTERMINATOR = '','', &#xA;&#x9;&#x9;ROWTERMINATOR = ''\n'',&#xA;&#x9;&#x9;MAXERRORS = 0,&#xA;&#x9;&#x9;TABLOCK&#xA;&#x9;)'&#xA;EXEC sp_executesql @sqlJoint&#xA;&#xA;&#xA;&#xA;&#xA;-- load visitor tours --------------------------------------------------------&#xA;&#xA;-- create staging table&#xA;DROP TABLE IF EXISTS [staging].[visitorTours]&#xA;CREATE TABLE [staging].[visitorTours] (&#xA;    [tourID] int NOT NULL,&#xA;    [segment] nvarchar(10) NOT NULL,&#xA;    [tourPurpose] nvarchar(15) NOT NULL,&#xA;    [partySize] int NOT NULL,&#xA;    [income] nvarchar(15) NOT NULL,&#xA;    [departTimeAbmHalfHour] int NOT NULL,&#xA;    [arriveTimeAbmHalfHour] int NOT NULL,&#xA;    [departTimeFiveTod] float NOT NULL,&#xA;    [arriveTimeFiveTod] float NOT NULL,&#xA;    [originMGRA] int NOT NULL,&#xA;    [destinationMGRA] int NOT NULL,&#xA;    [originTAZ] int NOT NULL,&#xA;    [destinationTAZ] int NOT NULL,&#xA;    [tourMode] nvarchar(30) NOT NULL,&#xA;    CONSTRAINT pk_staging_visitorTours PRIMARY KEY([tourID]))&#xA;WITH (DATA_COMPRESSION = PAGE)&#xA;&#xA;-- bulk load into staging table&#xA;DECLARE @sqlVisitor nvarchar(max) = '&#xA;&#x9;BULK INSERT [staging].[visitorTours]&#xA;&#x9;FROM  ''' + @folder + '\report\visitorTours.csv'' &#xA;&#x9;WITH &#xA;&#x9;( &#xA;&#x9;&#x9;FIRSTROW = 2,&#xA;&#x9;&#x9;FIELDTERMINATOR = '','', &#xA;&#x9;&#x9;ROWTERMINATOR = ''\n'',&#xA;&#x9;&#x9;MAXERRORS = 0,&#xA;&#x9;&#x9;TABLOCK&#xA;&#x9;)'&#xA;EXEC sp_executesql @sqlVisitor&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
          <SQLTask:ParameterBinding
            SQLTask:ParameterName="0"
            SQLTask:DtsVariableName="$Package::scenarioFilePath"
            SQLTask:ParameterDirection="Input"
            SQLTask:DataType="130"
            SQLTask:ParameterSize="200" />
        </SQLTask:SqlTaskData>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\loadTripsIndividual"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:DelayValidation="True"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{e8e2a1d4-6417-4c4f-83b7-eaacc8334922}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:FailPackageOnFailure="True"
      DTS:FailParentOnFailure="True"
      DTS:LocaleID="-1"
      DTS:MaxErrorCount="0"
      DTS:ObjectName="loadTripsIndividual"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2017 RC1; Â© 2017 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="1">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{A2745192-1304-4CAD-B395-584AC14AA8AD}"
          SQLTask:SqlStatementSource="SET NOCOUNT ON&#xA;-- set path to completed ABM scenario folder&#xA;DECLARE @folder nvarchar(max) = ?;&#xA;&#xA;&#xA;&#xA;&#xA;-- load individual trips -----------------------------------------------------&#xA;&#xA;-- create staging table&#xA;DROP TABLE IF EXISTS [staging].[individualTrips]&#xA;CREATE TABLE [staging].[individualTrips] (&#xA;    [tripID] int NOT NULL,&#xA;    [personID] int NOT NULL,&#xA;    [tourID] int NOT NULL,&#xA;    [stopID] int NOT NULL,&#xA;    [inbound] nvarchar(5) NOT NULL,&#xA;    [tripPurposeOrigin] nvarchar(15) NOT NULL,&#xA;    [tripPurposeDestination] nvarchar(15) NOT NULL,&#xA;    [departTimeAbmHalfHour] int NOT NULL,&#xA;    [departTimeFiveTod] float NOT NULL,&#xA;    [originMGRA] int NOT NULL,&#xA;    [destinationMGRA] int NOT NULL,&#xA;    [parkingMGRA] float NULL,  -- allow nulls&#xA;    [originTAZ] int NOT NULL,&#xA;    [destinationTAZ] int NOT NULL,&#xA;    [parkingTAZ] float NULL,  -- allow nulls&#xA;    [tripMode] nvarchar(60) NOT NULL,&#xA;    [boardingTAP] float NULL,  -- allow nulls&#xA;    [alightingTAP] float NULL,  -- allow nulls&#xA;    [valueOfTimeCategory] nvarchar(10) NOT NULL,&#xA;    [transponderAvailable] nvarchar(5) NOT NULL,&#xA;    [avUsed] nvarchar(5) NOT NULL,&#xA;    [microMobilityTransitAccess] nvarchar(20) NOT NULL,&#xA;    [microMobilityTransitEgress] nvarchar(20) NOT NULL,&#xA;    [weightTrip] float NOT NULL,&#xA;    [weightPersonTrip] float NOT NULL,&#xA;    [costParking] float NOT NULL,&#xA;    [timeDrive] float NULL,&#xA;    [distanceDrive] float NULL,&#xA;    [costTollDrive] float NULL,&#xA;    [costOperatingDrive] float NULL,&#xA;    [timeAutoTerminalWalk] float NULL,&#xA;    [distanceAutoTerminalWalk] float NULL,&#xA;    [costFareDrive] float NULL,&#xA;    [timeWaitDrive] float NULL,&#xA;    [timeTransitInVehicle] float NULL,&#xA;    [timeTier1TransitInVehicle] float NULL,&#xA;    [timeFreewayRapidTransitInVehicle] float NULL,&#xA;    [timeArterialRapidTransitInVehicle] float NULL,&#xA;    [timeExpressBusTransitInVehicle] float NULL,&#xA;    [timeLocalBusTransitInVehicle] float NULL,&#xA;    [timeLightRailTransitInVehicle] float NULL,&#xA;    [timeCommuterRailTransitInVehicle] float NULL,&#xA;    [timeTransitInitialWait] float NULL,&#xA;    [timeTransitWait] float NULL,&#xA;    [timeTransitWalk] float NULL,&#xA;    [distanceTransitInVehicle] float NULL,&#xA;    [distanceTransitWalk] float NULL,&#xA;    [costFareTransit] float NULL,&#xA;    [transfersTransit] float NULL,&#xA;    [timeDriveTransit] float NULL,&#xA;    [distanceDriveTransit] float NULL,&#xA;    [timeTransitWalkAccessEgress] float NULL,&#xA;    [distanceTransitWalkAccessEgress] float NULL,&#xA;    [timeTransitMMAccessEgress] float NULL,&#xA;    [distanceTransitMMAccessEgress] float NULL,&#xA;    [costFareTransitMMAccessEgress] float NULL,&#xA;    [timeTransitMTAccessEgress] float NULL,&#xA;    [distanceTransitMTAccessEgress] float NULL,&#xA;    [costFareTransitMTAccessEgress] float NULL,&#xA;    [timeWalk] float NULL,&#xA;    [distanceWalk] float NULL,&#xA;    [timeMM] float NULL,&#xA;    [distanceMM] float NULL,&#xA;    [costFareMM] float NULL,&#xA;    [timeMT] float NULL,&#xA;    [distanceMT] float NULL,&#xA;    [costFareMT] float NULL,&#xA;    [timeBike] float NULL,&#xA;    [distanceBike] float NULL,&#xA;    [timeTotal] float NOT NULL,&#xA;    [distanceTotal] float NOT NULL,&#xA;    [costTotal] float NOT NULL,&#xA;    CONSTRAINT pk_staging_individualTrips PRIMARY KEY([tripID]))&#xA;WITH (DATA_COMPRESSION = PAGE)&#xA;&#xA;-- bulk load into staging table&#xA;DECLARE @sqlIndividual nvarchar(max) = '&#xA;&#x9;BULK INSERT [staging].[individualTrips]&#xA;&#x9;FROM  ''' + @folder + '\report\individualTrips.csv'' &#xA;&#x9;WITH &#xA;&#x9;( &#xA;&#x9;&#x9;FIRSTROW = 2,&#xA;&#x9;&#x9;FIELDTERMINATOR = '','', &#xA;&#x9;&#x9;ROWTERMINATOR = ''\n'',&#xA;&#x9;&#x9;MAXERRORS = 0,&#xA;&#x9;&#x9;TABLOCK,&#xA;&#x9;&#x9;ORDER([tripID]) )'&#xA;EXEC sp_executesql @sqlIndividual&#xA;&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
          <SQLTask:ParameterBinding
            SQLTask:ParameterName="0"
            SQLTask:DtsVariableName="$Package::scenarioFilePath"
            SQLTask:ParameterDirection="Input"
            SQLTask:DataType="130"
            SQLTask:ParameterSize="200" />
        </SQLTask:SqlTaskData>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\loadTripsNonIndividual"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:DelayValidation="True"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{e37904ee-5885-4ec2-8a1d-cf5c782b772f}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:FailPackageOnFailure="True"
      DTS:FailParentOnFailure="True"
      DTS:LocaleID="-1"
      DTS:MaxErrorCount="0"
      DTS:ObjectName="loadTripsNonIndividual"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2017 RC1; Â© 2017 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{A2745192-1304-4CAD-B395-584AC14AA8AD}"
          SQLTask:SqlStatementSource="SET NOCOUNT ON&#xA;-- set path to completed ABM scenario folder&#xA;DECLARE @folder nvarchar(max) = ?;&#xA;&#xA;&#xA;&#xA;&#xA;-- load airport CBX trips ----------------------------------------------------&#xA;&#xA;-- create staging table&#xA;DROP TABLE IF EXISTS [staging].[airportCBXTrips]&#xA;CREATE TABLE [staging].[airportCBXTrips] (&#xA;    [tripID] int NOT NULL,&#xA;    [inbound] nvarchar(5) NOT NULL,&#xA;    [tripPurpose] nvarchar(20) NOT NULL,&#xA;    [incomeCategory] nvarchar(15) NOT NULL,&#xA;    [nightsStayed] int NOT NULL,&#xA;    [departTimeAbmHalfHour] int NOT NULL,&#xA;    [departTimeFiveTod] float NOT NULL,&#xA;    [originMGRA] int NOT NULL,&#xA;    [destinationMGRA] int NOT NULL,&#xA;    [parkingMGRA] float NULL,  -- allow nulls&#xA;    [originTAZ] int NOT NULL,&#xA;    [destinationTAZ] int NOT NULL,&#xA;    [parkingTAZ] float NULL,  -- allow nulls&#xA;    [tripMode] nvarchar(60) NOT NULL,&#xA;    [arrivalMode] nvarchar(45) NOT NULL,&#xA;    [boardingTAP] float NULL,  -- allow nulls&#xA;    [alightingTAP] float NULL,  -- allow nulls&#xA;    [valueOfTimeCategory] nvarchar(10) NOT NULL,&#xA;    [transponderAvailable] nvarchar(5) NOT NULL,&#xA;    [avUsed] nvarchar(5) NOT NULL,&#xA;    [weightTrip] float NOT NULL,&#xA;    [weightPersonTrip] float NOT NULL,&#xA;    [timeDrive] float NULL,&#xA;    [distanceDrive] float NULL,&#xA;    [costTollDrive] float NULL,&#xA;    [costOperatingDrive] float NULL,&#xA;    [costFareDrive] float NULL,&#xA;    [timeWaitDrive] float NULL,&#xA;    [timeTransitInVehicle] float NULL,&#xA;    [timeTier1TransitInVehicle] float NULL,&#xA;    [timeFreewayRapidTransitInVehicle] float NULL,&#xA;    [timeArterialRapidTransitInVehicle] float NULL,&#xA;    [timeExpressBusTransitInVehicle] float NULL,&#xA;    [timeLocalBusTransitInVehicle] float NULL,&#xA;    [timeLightRailTransitInVehicle] float NULL,&#xA;    [timeCommuterRailTransitInVehicle] float NULL,&#xA;    [timeTransitInitialWait] float NULL,&#xA;    [timeTransitWait] float NULL,&#xA;    [timeTransitWalk] float NULL,&#xA;    [distanceTransitInVehicle] float NULL,&#xA;    [distanceTransitWalk] float NULL,&#xA;    [costFareTransit] float NULL,&#xA;    [transfersTransit] float NULL,&#xA;    [timeDriveTransit] float NULL,&#xA;    [distanceDriveTransit] float NULL,&#xA;    [timeTransitWalkAccessEgress] float NULL,&#xA;    [distanceTransitWalkAccessEgress] float NULL,&#xA;    [timeTransitMMAccessEgress] float NULL,&#xA;    [distanceTransitMMAccessEgress] float NULL,&#xA;    [costFareTransitMMAccessEgress] float NULL,&#xA;    [timeTransitMTAccessEgress] float NULL,&#xA;    [distanceTransitMTAccessEgress] float NULL,&#xA;    [costFareTransitMTAccessEgress] float NULL,&#xA;    [timeWalk] float NULL,&#xA;    [distanceWalk] float NULL,&#xA;    [timeMM] float NULL,&#xA;    [distanceMM] float NULL,&#xA;    [costFareMM] float NULL,&#xA;    [timeMT] float NULL,&#xA;    [distanceMT] float NULL,&#xA;    [costFareMT] float NULL,&#xA;    [timeBike] float NULL,&#xA;    [distanceBike] float NULL,&#xA;    [timeTotal] float NOT NULL,&#xA;    [distanceTotal] float NOT NULL,&#xA;    [costTotal] float NOT NULL,&#xA;    CONSTRAINT pk_staging_airportCBXTrips PRIMARY KEY([tripID]))&#xA;WITH (DATA_COMPRESSION = PAGE)&#xA;&#xA;-- bulk load into staging table&#xA;DECLARE @sqlCBX nvarchar(max) = '&#xA;&#x9;BULK INSERT [staging].[airportCBXTrips]&#xA;&#x9;FROM  ''' + @folder + '\report\airportCBXTrips.csv'' &#xA;&#x9;WITH &#xA;&#x9;( &#xA;&#x9;&#x9;FIRSTROW = 2,&#xA;&#x9;&#x9;FIELDTERMINATOR = '','', &#xA;&#x9;&#x9;ROWTERMINATOR = ''\n'',&#xA;&#x9;&#x9;MAXERRORS = 0,&#xA;&#x9;&#x9;TABLOCK,&#xA;        ORDER([tripID])&#xA;&#x9;)'&#xA;EXEC sp_executesql @sqlCBX&#xA;&#xA;&#xA;&#xA;&#xA;-- load airport SAN trips ----------------------------------------------------&#xA;&#xA;-- create staging table&#xA;DROP TABLE IF EXISTS [staging].[airportSANTrips]&#xA;CREATE TABLE [staging].[airportSANTrips] (&#xA;    [tripID] int NOT NULL,&#xA;    [inbound] nvarchar(5) NOT NULL,&#xA;    [tripPurpose] nvarchar(20) NOT NULL,&#xA;    [incomeCategory] nvarchar(15) NOT NULL,&#xA;    [nightsStayed] int NOT NULL,&#xA;    [departTimeAbmHalfHour] int NOT NULL,&#xA;    [departTimeFiveTod] float NOT NULL,&#xA;    [originMGRA] int NOT NULL,&#xA;    [destinationMGRA] int NOT NULL,&#xA;    [parkingMGRA] float NULL,  -- allow nulls&#xA;    [originTAZ] int NOT NULL,&#xA;    [destinationTAZ] int NOT NULL,&#xA;    [parkingTAZ] float NULL,  -- allow nulls&#xA;    [tripMode] nvarchar(60) NOT NULL,&#xA;    [arrivalMode] nvarchar(45) NOT NULL,&#xA;    [boardingTAP] float NULL,  -- allow nulls&#xA;    [alightingTAP] float NULL,  -- allow nulls&#xA;    [valueOfTimeCategory] nvarchar(10) NOT NULL,&#xA;    [transponderAvailable] nvarchar(5) NOT NULL,&#xA;    [avUsed] nvarchar(5) NOT NULL,&#xA;    [weightTrip] float NOT NULL,&#xA;    [weightPersonTrip] float NOT NULL,&#xA;    [timeDrive] float NULL,&#xA;    [distanceDrive] float NULL,&#xA;    [costTollDrive] float NULL,&#xA;    [costOperatingDrive] float NULL,&#xA;    [costFareDrive] float NULL,&#xA;    [timeWaitDrive] float NULL,&#xA;    [timeTransitInVehicle] float NULL,&#xA;    [timeTier1TransitInVehicle] float NULL,&#xA;    [timeFreewayRapidTransitInVehicle] float NULL,&#xA;    [timeArterialRapidTransitInVehicle] float NULL,&#xA;    [timeExpressBusTransitInVehicle] float NULL,&#xA;    [timeLocalBusTransitInVehicle] float NULL,&#xA;    [timeLightRailTransitInVehicle] float NULL,&#xA;    [timeCommuterRailTransitInVehicle] float NULL,&#xA;    [timeTransitInitialWait] float NULL,&#xA;    [timeTransitWait] float NULL,&#xA;    [timeTransitWalk] float NULL,&#xA;    [distanceTransitInVehicle] float NULL,&#xA;    [distanceTransitWalk] float NULL,&#xA;    [costFareTransit] float NULL,&#xA;    [transfersTransit] float NULL,&#xA;    [timeDriveTransit] float NULL,&#xA;    [distanceDriveTransit] float NULL,&#xA;    [timeTransitWalkAccessEgress] float NULL,&#xA;    [distanceTransitWalkAccessEgress] float NULL,&#xA;    [timeTransitMMAccessEgress] float NULL,&#xA;    [distanceTransitMMAccessEgress] float NULL,&#xA;    [costFareTransitMMAccessEgress] float NULL,&#xA;    [timeTransitMTAccessEgress] float NULL,&#xA;    [distanceTransitMTAccessEgress] float NULL,&#xA;    [costFareTransitMTAccessEgress] float NULL,&#xA;    [timeWalk] float NULL,&#xA;    [distanceWalk] float NULL,&#xA;    [timeMM] float NULL,&#xA;    [distanceMM] float NULL,&#xA;    [costFareMM] float NULL,&#xA;    [timeMT] float NULL,&#xA;    [distanceMT] float NULL,&#xA;    [costFareMT] float NULL,&#xA;    [timeBike] float NULL,&#xA;    [distanceBike] float NULL,&#xA;    [timeTotal] float NOT NULL,&#xA;    [distanceTotal] float NOT NULL,&#xA;    [costTotal] float NOT NULL,&#xA;    CONSTRAINT pk_staging_airportSANTrips PRIMARY KEY([tripID]))&#xA;WITH (DATA_COMPRESSION = PAGE)&#xA;&#xA;-- bulk load into staging table&#xA;DECLARE @sqlSAN nvarchar(max) = '&#xA;&#x9;BULK INSERT [staging].[airportSANTrips]&#xA;&#x9;FROM  ''' + @folder + '\report\airportSANTrips.csv'' &#xA;&#x9;WITH &#xA;&#x9;( &#xA;&#x9;&#x9;FIRSTROW = 2,&#xA;&#x9;&#x9;FIELDTERMINATOR = '','', &#xA;&#x9;&#x9;ROWTERMINATOR = ''\n'',&#xA;&#x9;&#x9;MAXERRORS = 0,&#xA;&#x9;&#x9;TABLOCK,&#xA;        ORDER([tripID])&#xA;&#x9;)'&#xA;EXEC sp_executesql @sqlSAN&#xA;&#xA;&#xA;&#xA;&#xA;-- load commercial vehicle trips ---------------------------------------------&#xA;&#xA;-- create staging table&#xA;DROP TABLE IF EXISTS [staging].[commercialVehicleTrips]&#xA;CREATE TABLE [staging].[commercialVehicleTrips] (&#xA;    [tripID] int NOT NULL,&#xA;    [tourID] int NOT NULL,&#xA;    [stopID] int NOT NULL,&#xA;    [tripPurposeOrigin] nvarchar(25) NOT NULL,&#xA;    [tripPurposeDestination] nvarchar(25) NOT NULL,&#xA;    [departTimeAbmHalfHour] int NOT NULL,&#xA;    [arriveTimeAbmHalfHour] int NOT NULL,&#xA;    [departTimeFiveTod] float NOT NULL,&#xA;    [arriveTimeFiveTod] float NOT NULL,&#xA;    [stopDuration] float NOT NULL,&#xA;    [originTAZ] int NOT NULL,&#xA;    [destinationTAZ] int NOT NULL,&#xA;    [parkingTAZ] float NULL,  -- allow nulls&#xA;    [tripMode] nvarchar(30) NOT NULL,&#xA;    [valueOfTimeCategory] nvarchar(10) NOT NULL,&#xA;    [transponderAvailable] nvarchar(5) NOT NULL,&#xA;    [avUsed] nvarchar(5) NOT NULL,&#xA;    [weightTrip] float NOT NULL,&#xA;    [weightPersonTrip] float NOT NULL,&#xA;    [timeDrive] float NULL,&#xA;    [distanceDrive] float NULL,&#xA;    [costTollDrive] float NULL,&#xA;    [costOperatingDrive] float NULL,&#xA;    [timeTotal] float NOT NULL,&#xA;    [distanceTotal] float NOT NULL,&#xA;    [costTotal] float NOT NULL,&#xA;    CONSTRAINT pk_staging_commercialVehicleTrips PRIMARY KEY([tripID]))&#xA;WITH (DATA_COMPRESSION = PAGE)&#xA;&#xA;-- bulk load into staging table&#xA;DECLARE @sqlCV nvarchar(max) = '&#xA;&#x9;BULK INSERT [staging].[commercialVehicleTrips]&#xA;&#x9;FROM  ''' + @folder + '\report\commercialVehicleTrips.csv'' &#xA;&#x9;WITH &#xA;&#x9;( &#xA;&#x9;&#x9;FIRSTROW = 2,&#xA;&#x9;&#x9;FIELDTERMINATOR = '','', &#xA;&#x9;&#x9;ROWTERMINATOR = ''\n'',&#xA;&#x9;&#x9;MAXERRORS = 0,&#xA;&#x9;&#x9;TABLOCK,&#xA;        ORDER([tripID])&#xA;&#x9;)'&#xA;EXEC sp_executesql @sqlCV&#xA;&#xA;&#xA;&#xA;&#xA;-- load cross border trips ---------------------------------------------------&#xA;&#xA;-- create staging table&#xA;DROP TABLE IF EXISTS [staging].[crossBorderTrips]&#xA;CREATE TABLE [staging].[crossBorderTrips] (&#xA;    [tripID] int NOT NULL,&#xA;    [tourID] int NOT NULL,&#xA;    [stopID] int NOT NULL,&#xA;    [inbound] nvarchar(5) NOT NULL,&#xA;    [tripPurposeOrigin] nvarchar(10) NOT NULL,&#xA;    [tripPurposeDestination] nvarchar(10) NOT NULL,&#xA;    [departTimeAbmHalfHour] int NOT NULL,&#xA;    [departTimeFiveTod] float NOT NULL,&#xA;    [originMGRA] int NOT NULL,&#xA;    [destinationMGRA] int NOT NULL,&#xA;    [parkingMGRA] float NULL,  -- allow nulls&#xA;    [originTAZ] int NOT NULL,&#xA;    [destinationTAZ] int NOT NULL,&#xA;    [parkingTAZ] float NULL,  -- allow nulls&#xA;    [tripMode] nvarchar(60) NOT NULL,&#xA;    [boardingTAP] float NULL,  -- allow nulls&#xA;    [alightingTAP] float NULL,  -- allow nulls&#xA;    [valueOfTimeCategory] nvarchar(10) NOT NULL,&#xA;    [transponderAvailable] nvarchar(5) NOT NULL,&#xA;    [avUsed] nvarchar(5) NOT NULL,&#xA;    [weightTrip] float NOT NULL,&#xA;    [weightPersonTrip] float NOT NULL,&#xA;    [costParking] float NOT NULL,&#xA;    [timeDrive] float NULL,&#xA;    [distanceDrive] float NULL,&#xA;    [costTollDrive] float NULL,&#xA;    [costOperatingDrive] float NULL,&#xA;    [costFareDrive] float NULL,&#xA;    [timeWaitDrive] float NULL,&#xA;    [timeTransitInVehicle] float NULL,&#xA;    [timeTier1TransitInVehicle] float NULL,&#xA;    [timeFreewayRapidTransitInVehicle] float NULL,&#xA;    [timeArterialRapidTransitInVehicle] float NULL,&#xA;    [timeExpressBusTransitInVehicle] float NULL,&#xA;    [timeLocalBusTransitInVehicle] float NULL,&#xA;    [timeLightRailTransitInVehicle] float NULL,&#xA;    [timeCommuterRailTransitInVehicle] float NULL,&#xA;    [timeTransitInitialWait] float NULL,&#xA;    [timeTransitWait] float NULL,&#xA;    [timeTransitWalk] float NULL,&#xA;    [distanceTransitInVehicle] float NULL,&#xA;    [distanceTransitWalk] float NULL,&#xA;    [costFareTransit] float NULL,&#xA;    [transfersTransit] float NULL,&#xA;    [timeDriveTransit] float NULL,&#xA;    [distanceDriveTransit] float NULL,&#xA;    [timeTransitWalkAccessEgress] float NULL,&#xA;    [distanceTransitWalkAccessEgress] float NULL,&#xA;    [timeTransitMMAccessEgress] float NULL,&#xA;    [distanceTransitMMAccessEgress] float NULL,&#xA;    [costFareTransitMMAccessEgress] float NULL,&#xA;    [timeTransitMTAccessEgress] float NULL,&#xA;    [distanceTransitMTAccessEgress] float NULL,&#xA;    [costFareTransitMTAccessEgress] float NULL,&#xA;    [timeWalk] float NULL,&#xA;    [distanceWalk] float NULL,&#xA;    [timeMM] float NULL,&#xA;    [distanceMM] float NULL,&#xA;    [costFareMM] float NULL,&#xA;    [timeMT] float NULL,&#xA;    [distanceMT] float NULL,&#xA;    [costFareMT] float NULL,&#xA;    [timeBike] float NULL,&#xA;    [distanceBike] float NULL,&#xA;    [timeTotal] float NOT NULL,&#xA;    [distanceTotal] float NOT NULL,&#xA;    [costTotal] float NOT NULL,&#xA;    CONSTRAINT pk_staging_crossBorderTrips PRIMARY KEY([tripID]))&#xA;WITH (DATA_COMPRESSION = PAGE)&#xA;&#xA;-- bulk load into staging table&#xA;DECLARE @sqlCB nvarchar(max) = '&#xA;&#x9;BULK INSERT [staging].[crossBorderTrips]&#xA;&#x9;FROM  ''' + @folder + '\report\crossBorderTrips.csv'' &#xA;&#x9;WITH &#xA;&#x9;( &#xA;&#x9;&#x9;FIRSTROW = 2,&#xA;&#x9;&#x9;FIELDTERMINATOR = '','', &#xA;&#x9;&#x9;ROWTERMINATOR = ''\n'',&#xA;&#x9;&#x9;MAXERRORS = 0,&#xA;&#x9;&#x9;TABLOCK,&#xA;        ORDER([tripID])&#xA;&#x9;)'&#xA;EXEC sp_executesql @sqlCB&#xA;&#xA;&#xA;&#xA;&#xA;-- load external-external trips ----------------------------------------------&#xA;&#xA;-- create staging table&#xA;DROP TABLE IF EXISTS [staging].[externalExternalTrips]&#xA;CREATE TABLE [staging].[externalExternalTrips] (&#xA;    [tripID] int NOT NULL,&#xA;    [departTimeFiveTod] float NOT NULL,&#xA;    [originTAZ] int NOT NULL,&#xA;    [destinationTAZ] int NOT NULL,&#xA;    [tripMode] nvarchar(15) NOT NULL,&#xA;    [valueOfTimeCategory] nvarchar(10) NOT NULL,&#xA;    [transponderAvailable] nvarchar(5) NOT NULL,&#xA;    [avUsed] nvarchar(5) NOT NULL,&#xA;    [weightTrip] float NOT NULL,&#xA;    [weightPersonTrip] float NOT NULL,&#xA;    [timeDrive] float NULL,&#xA;    [distanceDrive] float NULL,&#xA;    [costTollDrive] float NULL,&#xA;    [costOperatingDrive] float NULL,&#xA;    [timeTotal] float NOT NULL,&#xA;    [distanceTotal] float NOT NULL,&#xA;    [costTotal] float NOT NULL,&#xA;    CONSTRAINT pk_staging_externalExternalTrips PRIMARY KEY([tripID]))&#xA;WITH (DATA_COMPRESSION = PAGE)&#xA;&#xA;-- bulk load into staging table&#xA;DECLARE @sqlEE nvarchar(max) = '&#xA;&#x9;BULK INSERT [staging].[externalExternalTrips]&#xA;&#x9;FROM  ''' + @folder + '\report\externalExternalTrips.csv'' &#xA;&#x9;WITH &#xA;&#x9;( &#xA;&#x9;&#x9;FIRSTROW = 2,&#xA;&#x9;&#x9;FIELDTERMINATOR = '','', &#xA;&#x9;&#x9;ROWTERMINATOR = ''\n'',&#xA;&#x9;&#x9;MAXERRORS = 0,&#xA;&#x9;&#x9;TABLOCK,&#xA;        ORDER([tripID])&#xA;&#x9;)'&#xA;EXEC sp_executesql @sqlEE&#xA;&#xA;&#xA;&#xA;&#xA;-- load external-internal trips ----------------------------------------------&#xA;&#xA;-- create staging table&#xA;DROP TABLE IF EXISTS [staging].[externalInternalTrips]&#xA;CREATE TABLE [staging].[externalInternalTrips] (&#xA;    [tripID] int NOT NULL,&#xA;    [departTimeFiveTod] float NOT NULL,&#xA;    [originTAZ] int NOT NULL,&#xA;    [destinationTAZ] int NOT NULL,&#xA;    [tripMode] nvarchar(15) NOT NULL,&#xA;    [tripPurpose] nvarchar(10) NOT NULL,&#xA;    [valueOfTimeCategory] nvarchar(10) NOT NULL,&#xA;    [transponderAvailable] nvarchar(5) NOT NULL,&#xA;    [avUsed] nvarchar(5) NOT NULL,&#xA;    [weightTrip] float NOT NULL,&#xA;    [weightPersonTrip] float NOT NULL,&#xA;    [timeDrive] float NULL,&#xA;    [distanceDrive] float NULL,&#xA;    [costTollDrive] float NULL,&#xA;    [costOperatingDrive] float NULL,&#xA;    [timeTotal] float NOT NULL,&#xA;    [distanceTotal] float NOT NULL,&#xA;    [costTotal] float NOT NULL,&#xA;    CONSTRAINT pk_staging_externalInternalTrips PRIMARY KEY([tripID]))&#xA;WITH (DATA_COMPRESSION = PAGE)&#xA;&#xA;-- bulk load into staging table&#xA;DECLARE @sqlEI nvarchar(max) = '&#xA;&#x9;BULK INSERT [staging].[externalInternalTrips]&#xA;&#x9;FROM  ''' + @folder + '\report\externalInternalTrips.csv'' &#xA;&#x9;WITH &#xA;&#x9;( &#xA;&#x9;&#x9;FIRSTROW = 2,&#xA;&#x9;&#x9;FIELDTERMINATOR = '','', &#xA;&#x9;&#x9;ROWTERMINATOR = ''\n'',&#xA;&#x9;&#x9;MAXERRORS = 0,&#xA;&#x9;&#x9;TABLOCK,&#xA;        ORDER([tripID])&#xA;&#x9;)'&#xA;EXEC sp_executesql @sqlEI&#xA;&#xA;&#xA;&#xA;&#xA;-- load internal-external trips ----------------------------------------------&#xA;&#xA;-- create staging table&#xA;DROP TABLE IF EXISTS [staging].[internalExternalTrips]&#xA;CREATE TABLE [staging].[internalExternalTrips] (&#xA;    [tripID] int NOT NULL,&#xA;    [personID] int NOT NULL,&#xA;    [tourID] int NOT NULL,&#xA;    [stopID] int NOT NULL,&#xA;    [inbound] nvarchar(5) NOT NULL,&#xA;    [departTimeAbmHalfHour] int NOT NULL,&#xA;    [departTimeFiveTod] float NOT NULL,&#xA;    [originMGRA] int NOT NULL,&#xA;    [destinationMGRA] int NOT NULL,&#xA;    [parkingMGRA] float NULL,  -- allow nulls&#xA;    [originTAZ] int NOT NULL,&#xA;    [destinationTAZ] int NOT NULL,&#xA;    [parkingTAZ] float NULL,  -- allow nulls&#xA;    [tripMode] nvarchar(60) NOT NULL,&#xA;    [boardingTAP] float NULL,  -- allow nulls&#xA;    [alightingTAP] float NULL,  -- allow nulls&#xA;    [valueOfTimeCategory] nvarchar(10) NOT NULL,&#xA;    [transponderAvailable] nvarchar(5) NOT NULL,&#xA;    [avUsed] nvarchar(5) NOT NULL,&#xA;    [weightTrip] float NOT NULL,&#xA;    [weightPersonTrip] float NOT NULL,&#xA;    [timeDrive] float NULL,&#xA;    [distanceDrive] float NULL,&#xA;    [costTollDrive] float NULL,&#xA;    [costOperatingDrive] float NULL,&#xA;    [costFareDrive] float NULL,&#xA;    [timeWaitDrive] float NULL,&#xA;    [timeTransitInVehicle] float NULL,&#xA;    [timeTier1TransitInVehicle] float NULL,&#xA;    [timeFreewayRapidTransitInVehicle] float NULL,&#xA;    [timeArterialRapidTransitInVehicle] float NULL,&#xA;    [timeExpressBusTransitInVehicle] float NULL,&#xA;    [timeLocalBusTransitInVehicle] float NULL,&#xA;    [timeLightRailTransitInVehicle] float NULL,&#xA;    [timeCommuterRailTransitInVehicle] float NULL,&#xA;    [timeTransitInitialWait] float NULL,&#xA;    [timeTransitWait] float NULL,&#xA;    [timeTransitWalk] float NULL,&#xA;    [distanceTransitInVehicle] float NULL,&#xA;    [distanceTransitWalk] float NULL,&#xA;    [costFareTransit] float NULL,&#xA;    [transfersTransit] float NULL,&#xA;    [timeDriveTransit] float NULL,&#xA;    [distanceDriveTransit] float NULL,&#xA;    [timeTransitWalkAccessEgress] float NULL,&#xA;    [distanceTransitWalkAccessEgress] float NULL,&#xA;    [timeTransitMMAccessEgress] float NULL,&#xA;    [distanceTransitMMAccessEgress] float NULL,&#xA;    [costFareTransitMMAccessEgress] float NULL,&#xA;    [timeTransitMTAccessEgress] float NULL,&#xA;    [distanceTransitMTAccessEgress] float NULL,&#xA;    [costFareTransitMTAccessEgress] float NULL,&#xA;    [timeWalk] float NULL,&#xA;    [distanceWalk] float NULL,&#xA;    [timeMM] float NULL,&#xA;    [distanceMM] float NULL,&#xA;    [costFareMM] float NULL,&#xA;    [timeMT] float NULL,&#xA;    [distanceMT] float NULL,&#xA;    [costFareMT] float NULL,&#xA;    [timeBike] float NULL,&#xA;    [distanceBike] float NULL,&#xA;    [timeTotal] float NOT NULL,&#xA;    [distanceTotal] float NOT NULL,&#xA;    [costTotal] float NOT NULL,&#xA;    CONSTRAINT pk_staging_internalExternalTrips PRIMARY KEY([tripID]))&#xA;WITH (DATA_COMPRESSION = PAGE)&#xA;&#xA;-- bulk load into staging table&#xA;DECLARE @sqlIE nvarchar(max) = '&#xA;&#x9;BULK INSERT [staging].[internalExternalTrips]&#xA;&#x9;FROM  ''' + @folder + '\report\internalExternalTrips.csv'' &#xA;&#x9;WITH &#xA;&#x9;( &#xA;&#x9;&#x9;FIRSTROW = 2,&#xA;&#x9;&#x9;FIELDTERMINATOR = '','', &#xA;&#x9;&#x9;ROWTERMINATOR = ''\n'',&#xA;&#x9;&#x9;MAXERRORS = 0,&#xA;&#x9;&#x9;TABLOCK,&#xA;        ORDER([tripID])&#xA;&#x9;)'&#xA;EXEC sp_executesql @sqlIE&#xA;&#xA;&#xA;&#xA;&#xA;-- load joint trips ----------------------------------------------------------&#xA;&#xA;-- create staging table&#xA;DROP TABLE IF EXISTS [staging].[jointTrips]&#xA;CREATE TABLE [staging].[jointTrips] (&#xA;    [tripID] int NOT NULL,&#xA;    [personID] int NOT NULL,&#xA;    [tourID] int NOT NULL,&#xA;    [stopID] int NOT NULL,&#xA;    [inbound] nvarchar(5) NOT NULL,&#xA;    [tripPurposeOrigin] nvarchar(15) NOT NULL,&#xA;    [tripPurposeDestination] nvarchar(15) NOT NULL,&#xA;    [departTimeAbmHalfHour] int NOT NULL,&#xA;    [departTimeFiveTod] float NOT NULL,&#xA;    [originMGRA] int NOT NULL,&#xA;    [destinationMGRA] int NOT NULL,&#xA;    [parkingMGRA] float NULL,  -- allow nulls&#xA;    [originTAZ] int NOT NULL,&#xA;    [destinationTAZ] int NOT NULL,&#xA;    [parkingTAZ] float NULL,  -- allow nulls&#xA;    [tripMode] nvarchar(60) NOT NULL,&#xA;    [boardingTAP] float NULL,  -- allow nulls&#xA;    [alightingTAP] float NULL,  -- allow nulls&#xA;    [valueOfTimeCategory] nvarchar(10) NOT NULL,&#xA;    [transponderAvailable] nvarchar(5) NOT NULL,&#xA;    [avUsed] nvarchar(5) NOT NULL,&#xA;    [weightTrip] float NOT NULL,&#xA;    [weightPersonTrip] float NOT NULL,&#xA;    [costParking] float NOT NULL,&#xA;    [timeDrive] float NULL,&#xA;    [distanceDrive] float NULL,&#xA;    [costTollDrive] float NULL,&#xA;    [costOperatingDrive] float NULL,&#xA;    [timeAutoTerminalWalk] float NULL,&#xA;    [distanceAutoTerminalWalk] float NULL,&#xA;    [costFareDrive] float NULL,&#xA;    [timeWaitDrive] float NULL,&#xA;    [timeTransitInVehicle] float NULL,&#xA;    [timeTier1TransitInVehicle] float NULL,&#xA;    [timeFreewayRapidTransitInVehicle] float NULL,&#xA;    [timeArterialRapidTransitInVehicle] float NULL,&#xA;    [timeExpressBusTransitInVehicle] float NULL,&#xA;    [timeLocalBusTransitInVehicle] float NULL,&#xA;    [timeLightRailTransitInVehicle] float NULL,&#xA;    [timeCommuterRailTransitInVehicle] float NULL,&#xA;    [timeTransitInitialWait] float NULL,&#xA;    [timeTransitWait] float NULL,&#xA;    [timeTransitWalk] float NULL,&#xA;    [distanceTransitInVehicle] float NULL,&#xA;    [distanceTransitWalk] float NULL,&#xA;    [costFareTransit] float NULL,&#xA;    [transfersTransit] float NULL,&#xA;    [timeDriveTransit] float NULL,&#xA;    [distanceDriveTransit] float NULL,&#xA;    [timeTransitWalkAccessEgress] float NULL,&#xA;    [distanceTransitWalkAccessEgress] float NULL,&#xA;    [timeTransitMMAccessEgress] float NULL,&#xA;    [distanceTransitMMAccessEgress] float NULL,&#xA;    [costFareTransitMMAccessEgress] float NULL,&#xA;    [timeTransitMTAccessEgress] float NULL,&#xA;    [distanceTransitMTAccessEgress] float NULL,&#xA;    [costFareTransitMTAccessEgress] float NULL,&#xA;    [timeWalk] float NULL,&#xA;    [distanceWalk] float NULL,&#xA;    [timeMM] float NULL,&#xA;    [distanceMM] float NULL,&#xA;    [costFareMM] float NULL,&#xA;    [timeMT] float NULL,&#xA;    [distanceMT] float NULL,&#xA;    [costFareMT] float NULL,&#xA;    [timeBike] float NULL,&#xA;    [distanceBike] float NULL,&#xA;    [timeTotal] float NOT NULL,&#xA;    [distanceTotal] float NOT NULL,&#xA;    [costTotal] float NOT NULL,&#xA;    CONSTRAINT pk_staging_jointTrips PRIMARY KEY([tripID], [personID]))&#xA;WITH (DATA_COMPRESSION = PAGE)&#xA;&#xA;-- bulk load into staging table&#xA;DECLARE @sqlJoint nvarchar(max) = '&#xA;&#x9;BULK INSERT [staging].[jointTrips]&#xA;&#x9;FROM  ''' + @folder + '\report\jointTrips.csv'' &#xA;&#x9;WITH &#xA;&#x9;( &#xA;&#x9;&#x9;FIRSTROW = 2,&#xA;&#x9;&#x9;FIELDTERMINATOR = '','', &#xA;&#x9;&#x9;ROWTERMINATOR = ''\n'',&#xA;&#x9;&#x9;MAXERRORS = 0,&#xA;&#x9;&#x9;TABLOCK,&#xA;        ORDER([tripID])&#xA;&#x9;)'&#xA;EXEC sp_executesql @sqlJoint&#xA;&#xA;&#xA;&#xA;&#xA;-- load truck trips ----------------------------------------------------------&#xA;&#xA;-- create staging table&#xA;DROP TABLE IF EXISTS [staging].[truckTrips]&#xA;CREATE TABLE [staging].[truckTrips] (&#xA;    [tripID] int NOT NULL,&#xA;    [departTimeFiveTod] float NOT NULL,&#xA;    [originTAZ] int NOT NULL,&#xA;    [destinationTAZ] int NOT NULL,&#xA;    [tripMode] nvarchar(30) NOT NULL,&#xA;    [valueOfTimeCategory] nvarchar(10) NOT NULL,&#xA;    [transponderAvailable] nvarchar(5) NOT NULL,&#xA;    [avUsed] nvarchar(5) NOT NULL,&#xA;    [weightTrip] float NOT NULL,&#xA;    [weightPersonTrip] float NOT NULL,&#xA;    [timeDrive] float NULL,&#xA;    [distanceDrive] float NULL,&#xA;    [costTollDrive] float NULL,&#xA;    [costOperatingDrive] float NULL,&#xA;    [timeTotal] float NOT NULL,&#xA;    [distanceTotal] float NOT NULL,&#xA;    [costTotal] float NOT NULL,&#xA;    CONSTRAINT pk_staging_truckTrips PRIMARY KEY([tripID]))&#xA;WITH (DATA_COMPRESSION = PAGE)&#xA;&#xA;-- bulk load into staging table&#xA;DECLARE @sqlTruck nvarchar(max) = '&#xA;&#x9;BULK INSERT [staging].[truckTrips]&#xA;&#x9;FROM  ''' + @folder + '\report\truckTrips.csv'' &#xA;&#x9;WITH &#xA;&#x9;( &#xA;&#x9;&#x9;FIRSTROW = 2,&#xA;&#x9;&#x9;FIELDTERMINATOR = '','', &#xA;&#x9;&#x9;ROWTERMINATOR = ''\n'',&#xA;&#x9;&#x9;MAXERRORS = 0,&#xA;&#x9;&#x9;TABLOCK,&#xA;        ORDER([tripID])&#xA;&#x9;)'&#xA;EXEC sp_executesql @sqlTruck&#xA;&#xA;&#xA;&#xA;&#xA;-- load visitor trips --------------------------------------------------------&#xA;&#xA;-- create staging table&#xA;DROP TABLE IF EXISTS [staging].[visitorTrips]&#xA;CREATE TABLE [staging].[visitorTrips] (&#xA;    [tripID] int NOT NULL,&#xA;    [tourID] int NOT NULL,&#xA;    [stopID] int NOT NULL,&#xA;    [inbound] nvarchar(5) NOT NULL,&#xA;    [tripPurposeOrigin] nvarchar(15) NOT NULL,&#xA;    [tripPurposeDestination] nvarchar(15) NOT NULL,&#xA;    [departTimeAbmHalfHour] int NOT NULL,&#xA;    [departTimeFiveTod] float NOT NULL,&#xA;    [originMGRA] int NOT NULL,&#xA;    [destinationMGRA] int NOT NULL,&#xA;    [parkingMGRA] float NULL,  -- allow nulls&#xA;    [originTAZ] int NOT NULL,&#xA;    [destinationTAZ] int NOT NULL,&#xA;    [parkingTAZ] float NULL,  -- allow nulls&#xA;    [tripMode] nvarchar(60) NOT NULL,&#xA;    [boardingTAP] float NULL,  -- allow nulls&#xA;    [alightingTAP] float NULL,  -- allow nulls&#xA;    [valueOfTimeCategory] nvarchar(10) NOT NULL,&#xA;    [transponderAvailable] nvarchar(5) NOT NULL,&#xA;    [avUsed] nvarchar(5) NOT NULL,&#xA;    [microMobilityTransitAccess] nvarchar(20) NOT NULL,&#xA;    [microMobilityTransitEgress] nvarchar(20) NOT NULL,&#xA;    [weightTrip] float NOT NULL,&#xA;    [weightPersonTrip] float NOT NULL,&#xA;    [costParking] float NOT NULL,&#xA;    [timeDrive] float NULL,&#xA;    [distanceDrive] float NULL,&#xA;    [costTollDrive] float NULL,&#xA;    [costOperatingDrive] float NULL,&#xA;    [costFareDrive] float NULL,&#xA;    [timeWaitDrive] float NULL,&#xA;    [timeTransitInVehicle] float NULL,&#xA;    [timeTier1TransitInVehicle] float NULL,&#xA;    [timeFreewayRapidTransitInVehicle] float NULL,&#xA;    [timeArterialRapidTransitInVehicle] float NULL,&#xA;    [timeExpressBusTransitInVehicle] float NULL,&#xA;    [timeLocalBusTransitInVehicle] float NULL,&#xA;    [timeLightRailTransitInVehicle] float NULL,&#xA;    [timeCommuterRailTransitInVehicle] float NULL,&#xA;    [timeTransitInitialWait] float NULL,&#xA;    [timeTransitWait] float NULL,&#xA;    [timeTransitWalk] float NULL,&#xA;    [distanceTransitInVehicle] float NULL,&#xA;    [distanceTransitWalk] float NULL,&#xA;    [costFareTransit] float NULL,&#xA;    [transfersTransit] float NULL,&#xA;    [timeDriveTransit] float NULL,&#xA;    [distanceDriveTransit] float NULL,&#xA;    [timeTransitWalkAccessEgress] float NULL,&#xA;    [distanceTransitWalkAccessEgress] float NULL,&#xA;    [timeTransitMMAccessEgress] float NULL,&#xA;    [distanceTransitMMAccessEgress] float NULL,&#xA;    [costFareTransitMMAccessEgress] float NULL,&#xA;    [timeTransitMTAccessEgress] float NULL,&#xA;    [distanceTransitMTAccessEgress] float NULL,&#xA;    [costFareTransitMTAccessEgress] float NULL,&#xA;    [timeWalk] float NULL,&#xA;    [distanceWalk] float NULL,&#xA;    [timeMM] float NULL,&#xA;    [distanceMM] float NULL,&#xA;    [costFareMM] float NULL,&#xA;    [timeMT] float NULL,&#xA;    [distanceMT] float NULL,&#xA;    [costFareMT] float NULL,&#xA;    [timeBike] float NULL,&#xA;    [distanceBike] float NULL,&#xA;    [timeTotal] float NOT NULL,&#xA;    [distanceTotal] float NOT NULL,&#xA;    [costTotal] float NOT NULL,&#xA;    CONSTRAINT pk_staging_visitorTrips PRIMARY KEY([tripID]))&#xA;WITH (DATA_COMPRESSION = PAGE)&#xA;&#xA;-- bulk load into staging table&#xA;DECLARE @sqlVisitor nvarchar(max) = '&#xA;&#x9;BULK INSERT [staging].[visitorTrips]&#xA;&#x9;FROM  ''' + @folder + '\report\visitorTrips.csv'' &#xA;&#x9;WITH &#xA;&#x9;( &#xA;&#x9;&#x9;FIRSTROW = 2,&#xA;&#x9;&#x9;FIELDTERMINATOR = '','', &#xA;&#x9;&#x9;ROWTERMINATOR = ''\n'',&#xA;&#x9;&#x9;MAXERRORS = 0,&#xA;&#x9;&#x9;TABLOCK,&#xA;        ORDER([tripID])&#xA;&#x9;)'&#xA;EXEC sp_executesql @sqlVisitor&#xA;&#xA;&#xA;&#xA;&#xA;-- load zombie AV trips -----------------------------------------------------&#xA;&#xA;-- create staging table&#xA;DROP TABLE IF EXISTS [staging].[zombieAVTrips]&#xA;CREATE TABLE [staging].[zombieAVTrips] (&#xA;    [tripID] int NOT NULL,&#xA;    [hhID] int NOT NULL,&#xA;    [vehID] int NOT NULL,&#xA;    [vehicleTripID] int NOT NULL,&#xA;    [originIsHome] nvarchar(5) NOT NULL,&#xA;    [destinationIsHome] nvarchar(5) NOT NULL,&#xA;    [originIsRemoteParking] nvarchar(5) NOT NULL,&#xA;    [destinationIsRemoteParking] nvarchar(5) NOT NULL,&#xA;    [departTimeAbmHalfHour] int NOT NULL,&#xA;    [departTimeFiveTod] float NOT NULL,&#xA;    [originMGRA] int NOT NULL,&#xA;    [destinationMGRA] int NOT NULL,&#xA;    [parkingMGRA] float NULL,  -- allow nulls&#xA;    [originTAZ] int NOT NULL,&#xA;    [destinationTAZ] int NOT NULL,&#xA;    [parkingTAZ] float NULL,  -- allow nulls&#xA;    [tripMode] nvarchar(60) NOT NULL,&#xA;    [valueOfTimeCategory] nvarchar(10) NOT NULL,&#xA;    [transponderAvailable] nvarchar(5) NOT NULL,&#xA;    [avUsed] nvarchar(5) NOT NULL,&#xA;    [weightTrip] float NOT NULL,&#xA;    [weightPersonTrip] float NOT NULL,&#xA;    [costParking] float NOT NULL,&#xA;    [timeDrive] float NULL,&#xA;    [distanceDrive] float NULL,&#xA;    [costTollDrive] float NULL,&#xA;    [costOperatingDrive] float NULL,&#xA;    [timeTotal] float NOT NULL,&#xA;    [distanceTotal] float NOT NULL,&#xA;    [costTotal] float NOT NULL,&#xA;    CONSTRAINT pk_staging_zombieAVTrips PRIMARY KEY([tripID]))&#xA;WITH (DATA_COMPRESSION = PAGE)&#xA;&#xA;-- bulk load into staging table&#xA;DECLARE @sqlAV nvarchar(max) = '&#xA;&#x9;BULK INSERT [staging].[zombieAVTrips]&#xA;&#x9;FROM  ''' + @folder + '\report\zombieAVTrips.csv'' &#xA;&#x9;WITH &#xA;&#x9;( &#xA;&#x9;&#x9;FIRSTROW = 2,&#xA;&#x9;&#x9;FIELDTERMINATOR = '','', &#xA;&#x9;&#x9;ROWTERMINATOR = ''\n'',&#xA;&#x9;&#x9;MAXERRORS = 0,&#xA;&#x9;&#x9;TABLOCK,&#xA;        ORDER([tripID])&#xA;&#x9;)'&#xA;EXEC sp_executesql @sqlAV&#xA;&#xA;&#xA;&#xA;&#xA;-- load zombie TNC trips -----------------------------------------------------&#xA;&#xA;-- create staging table&#xA;DROP TABLE IF EXISTS [staging].[zombieTNCTrips]&#xA;CREATE TABLE [staging].[zombieTNCTrips] (&#xA;    [tripID] int NOT NULL,&#xA;    [originPurpose] nvarchar(15) NOT NULL,&#xA;    [destinationPurpose] nvarchar(15) NOT NULL,&#xA;    [departTimeAbmHalfHour] int NOT NULL,&#xA;    [arriveTimeAbmHalfHour] int NOT NULL,&#xA;    [departTimeFiveTod] float NOT NULL,&#xA;    [arriveTimeFiveTod] float NOT NULL,&#xA;    [originMGRA] int NOT NULL,&#xA;    [destinationMGRA] int NOT NULL,&#xA;    [parkingMGRA] float NULL,  -- allow nulls&#xA;    [originTAZ] int NOT NULL,&#xA;    [destinationTAZ] int NOT NULL,&#xA;    [parkingTAZ] float NULL,  -- allow nulls&#xA;    [tripMode] nvarchar(60) NOT NULL,&#xA;    [valueOfTimeCategory] nvarchar(10) NOT NULL,&#xA;    [transponderAvailable] nvarchar(5) NOT NULL,&#xA;    [avUsed] nvarchar(5) NOT NULL,&#xA;    [weightTrip] float NOT NULL,&#xA;    [weightPersonTrip] float NOT NULL,&#xA;    [timeDrive] float NULL,&#xA;    [distanceDrive] float NULL,&#xA;    [costTollDrive] float NULL,&#xA;    [costOperatingDrive] float NULL,&#xA;    [timeTotal] float NOT NULL,&#xA;    [distanceTotal] float NOT NULL,&#xA;    [costTotal] float NOT NULL,&#xA;    CONSTRAINT pk_staging_zombieTNCTrips PRIMARY KEY([tripID]))&#xA;WITH (DATA_COMPRESSION = PAGE)&#xA;&#xA;-- bulk load into staging table&#xA;DECLARE @sqlTNC nvarchar(max) = '&#xA;&#x9;BULK INSERT [staging].[zombieTNCTrips]&#xA;&#x9;FROM  ''' + @folder + '\report\zombieTNCTrips.csv'' &#xA;&#x9;WITH &#xA;&#x9;( &#xA;&#x9;&#x9;FIRSTROW = 2,&#xA;&#x9;&#x9;FIELDTERMINATOR = '','', &#xA;&#x9;&#x9;ROWTERMINATOR = ''\n'',&#xA;&#x9;&#x9;MAXERRORS = 0,&#xA;&#x9;&#x9;TABLOCK,&#xA;        ORDER([tripID])&#xA;&#x9;)'&#xA;EXEC sp_executesql @sqlTNC&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
          <SQLTask:ParameterBinding
            SQLTask:ParameterName="0"
            SQLTask:DtsVariableName="$Package::scenarioFilePath"
            SQLTask:ParameterDirection="Input"
            SQLTask:DataType="130"
            SQLTask:ParameterSize="200" />
        </SQLTask:SqlTaskData>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\resetTableSeed"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:DelayValidation="True"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{ce1b27f3-30e8-40f2-9d87-500c542af61e}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:FailPackageOnFailure="True"
      DTS:FailParentOnFailure="True"
      DTS:LocaleID="-1"
      DTS:MaxErrorCount="0"
      DTS:ObjectName="resetTableSeed"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2017 RC1; Â© 2017 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="2">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{A2745192-1304-4CAD-B395-584AC14AA8AD}"
          SQLTask:SqlStatementSource="-- reseed identity to 0 (sets to 1 since records are in the table) for new scenario&#xA;-- do so only if records are in the table, otherwise seed is already set to 1&#xA;IF EXISTS (SELECT TOP 1 [scenario_id] FROM [fact].[person_trip])&#xA;DBCC CHECKIDENT ('fact.person_trip', RESEED, 0)" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:PrecedenceConstraints>
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint]"
      DTS:CreationName=""
      DTS:DTSID="{903EC262-9F15-4346-8F2B-A5693C129803}"
      DTS:From="Package\loadTours"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint"
      DTS:To="Package\insertTours" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 1]"
      DTS:CreationName=""
      DTS:DTSID="{621B3DFD-A0E9-4319-BF5B-8B37C980CC0C}"
      DTS:From="Package\insertTours"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 1"
      DTS:To="Package\loadTripsNonIndividual" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 10]"
      DTS:CreationName=""
      DTS:DTSID="{9E169A2A-B71F-4493-9759-E984BB6157C0}"
      DTS:From="Package\resetTableSeed"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 10"
      DTS:To="Package\insertTripsVisitor" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 11]"
      DTS:CreationName=""
      DTS:DTSID="{6BE86597-5E65-4352-BE4A-5F4FAB5F7366}"
      DTS:From="Package\loadTripsIndividual"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 11"
      DTS:To="Package\insertTripsIndividual" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 12]"
      DTS:CreationName=""
      DTS:DTSID="{16A7CD02-D42C-4F72-953B-4D6DFC489E97}"
      DTS:From="Package\resetTableSeed"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 12"
      DTS:To="Package\insertTripsZombie" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 2]"
      DTS:CreationName=""
      DTS:DTSID="{20914B9D-96FF-42D2-8FA9-9040DC740E63}"
      DTS:From="Package\insertTours"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 2"
      DTS:To="Package\loadTripsIndividual" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 3]"
      DTS:CreationName=""
      DTS:DTSID="{0E4AB1FF-6CFA-4520-A1A2-7649B16F660E}"
      DTS:From="Package\loadTripsNonIndividual"
      DTS:ObjectName="Constraint 3"
      DTS:To="Package\resetTableSeed" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 4]"
      DTS:CreationName=""
      DTS:DTSID="{F4BA1218-5B3C-494B-BB15-C686C2BACF93}"
      DTS:From="Package\loadTripsIndividual"
      DTS:ObjectName="Constraint 4"
      DTS:To="Package\resetTableSeed" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 5]"
      DTS:CreationName=""
      DTS:DTSID="{4B22D21F-B6DF-4466-B147-FAF71AB4A3A0}"
      DTS:From="Package\resetTableSeed"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 5"
      DTS:To="Package\insertTripsOther" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 6]"
      DTS:CreationName=""
      DTS:DTSID="{8EBB37E0-B87B-4047-B885-3AF8EBF6E4EC}"
      DTS:From="Package\resetTableSeed"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 6"
      DTS:To="Package\insertTripsIndividual" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 7]"
      DTS:CreationName=""
      DTS:DTSID="{8792EEA7-7330-49B2-AFCC-ACFB26815DD4}"
      DTS:From="Package\resetTableSeed"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 7"
      DTS:To="Package\insertTripsAggregate" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 8]"
      DTS:CreationName=""
      DTS:DTSID="{D51011B3-1DCC-4C6B-BC8C-ABA41CC86E21}"
      DTS:From="Package\resetTableSeed"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 8"
      DTS:To="Package\insertTripsAirport" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 9]"
      DTS:CreationName=""
      DTS:DTSID="{7A86DF76-185D-42B6-B2FD-22DAF9A02F1A}"
      DTS:From="Package\resetTableSeed"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 9"
      DTS:To="Package\insertTripsCrossBorder" />
  </DTS:PrecedenceConstraints>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="32" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml">
        <NodeLayout
          Size="134,42"
          Id="Package\insertTours"
          TopLeft="523,150" />
        <NodeLayout
          Size="181,42"
          Id="Package\insertTripsAggregate"
          TopLeft="126,396" />
        <NodeLayout
          Size="163,42"
          Id="Package\insertTripsAirport"
          TopLeft="316,395" />
        <NodeLayout
          Size="192,42"
          Id="Package\insertTripsCrossBorder"
          TopLeft="489,395" />
        <NodeLayout
          Size="177,42"
          Id="Package\insertTripsIndividual"
          TopLeft="698,398" />
        <NodeLayout
          Size="158,42"
          Id="Package\insertTripsOther"
          TopLeft="884,401" />
        <NodeLayout
          Size="161,42"
          Id="Package\insertTripsVisitor"
          TopLeft="1049,402" />
        <NodeLayout
          Size="167,42"
          Id="Package\insertTripsZombie"
          TopLeft="1224,405" />
        <NodeLayout
          Size="128,42"
          Id="Package\loadTours"
          TopLeft="533,74" />
        <NodeLayout
          Size="171,42"
          Id="Package\loadTripsIndividual"
          TopLeft="613,238" />
        <NodeLayout
          Size="191,42"
          Id="Package\loadTripsNonIndividual"
          TopLeft="406,238" />
        <NodeLayout
          Size="157,42"
          Id="Package\resetTableSeed"
          TopLeft="517,317" />
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint]"
          TopLeft="593.5,116">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,34"
              Start="0,0"
              End="0,26.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,26.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 1]"
          TopLeft="569,192">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-67.5,46"
              Start="0,0"
              End="-67.5,38.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,14.7256637168142" />
                  <mssgle:CubicBezierSegment
                    Point1="0,14.7256637168142"
                    Point2="0,18.7256637168142"
                    Point3="-4,18.7256637168142" />
                  <mssgle:LineSegment
                    End="-63.5,18.7256637168142" />
                  <mssgle:CubicBezierSegment
                    Point1="-63.5,18.7256637168142"
                    Point2="-67.5,18.7256637168142"
                    Point3="-67.5,22.7256637168142" />
                  <mssgle:LineSegment
                    End="-67.5,38.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 10]"
          TopLeft="632.75,359">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="496.75,43"
              Start="0,0"
              End="496.75,35.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,10.812108559499" />
                  <mssgle:CubicBezierSegment
                    Point1="0,10.812108559499"
                    Point2="0,14.812108559499"
                    Point3="4,14.812108559499" />
                  <mssgle:LineSegment
                    End="492.75,14.812108559499" />
                  <mssgle:CubicBezierSegment
                    Point1="492.75,14.812108559499"
                    Point2="496.75,14.812108559499"
                    Point3="496.75,18.812108559499" />
                  <mssgle:LineSegment
                    End="496.75,35.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 11]"
          TopLeft="725.666666666667,280">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="89,118"
              Start="0,0"
              End="89,110.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,55.0228660013565" />
                  <mssgle:CubicBezierSegment
                    Point1="0,55.0228660013565"
                    Point2="0,59.0228660013565"
                    Point3="4,59.0228660013565" />
                  <mssgle:LineSegment
                    End="85,59.0228660013565" />
                  <mssgle:CubicBezierSegment
                    Point1="85,59.0228660013565"
                    Point2="89,59.0228660013565"
                    Point3="89,63.0228660013565" />
                  <mssgle:LineSegment
                    End="89,110.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 12]"
          TopLeft="651.375,359">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="656.125,46"
              Start="0,0"
              End="656.125,38.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,6.29171817058096" />
                  <mssgle:CubicBezierSegment
                    Point1="0,6.29171817058096"
                    Point2="0,10.291718170581"
                    Point3="4,10.291718170581" />
                  <mssgle:LineSegment
                    End="652.125,10.291718170581" />
                  <mssgle:CubicBezierSegment
                    Point1="652.125,10.291718170581"
                    Point2="656.125,10.291718170581"
                    Point3="656.125,14.291718170581" />
                  <mssgle:LineSegment
                    End="656.125,38.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 2]"
          TopLeft="611,192">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="87.5,46"
              Start="0,0"
              End="87.5,38.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,14.7256637168142" />
                  <mssgle:CubicBezierSegment
                    Point1="0,14.7256637168142"
                    Point2="0,18.7256637168142"
                    Point3="4,18.7256637168142" />
                  <mssgle:LineSegment
                    End="83.5,18.7256637168142" />
                  <mssgle:CubicBezierSegment
                    Point1="83.5,18.7256637168142"
                    Point2="87.5,18.7256637168142"
                    Point3="87.5,22.7256637168142" />
                  <mssgle:LineSegment
                    End="87.5,38.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 3]"
          TopLeft="501.5,280">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="69.1666666666666,37"
              Start="0,0"
              End="69.1666666666666,29.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,17.9760403530895" />
                  <mssgle:CubicBezierSegment
                    Point1="0,17.9760403530895"
                    Point2="0,21.9760403530895"
                    Point3="4,21.9760403530895" />
                  <mssgle:LineSegment
                    End="65.1666666666666,21.9760403530895" />
                  <mssgle:CubicBezierSegment
                    Point1="65.1666666666666,21.9760403530895"
                    Point2="69.1666666666666,21.9760403530895"
                    Point3="69.1666666666666,25.9760403530895" />
                  <mssgle:LineSegment
                    End="69.1666666666666,29.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 4]"
          TopLeft="671.333333333333,280">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-51,37"
              Start="0,0"
              End="-51,29.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,14.4811656910155" />
                  <mssgle:CubicBezierSegment
                    Point1="0,14.4811656910155"
                    Point2="0,18.4811656910155"
                    Point3="-4,18.4811656910155" />
                  <mssgle:LineSegment
                    End="-47,18.4811656910155" />
                  <mssgle:CubicBezierSegment
                    Point1="-47,18.4811656910155"
                    Point2="-51,18.4811656910155"
                    Point3="-51,22.4811656910155" />
                  <mssgle:LineSegment
                    End="-51,29.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 5]"
          TopLeft="614.125,359">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="348.875,42"
              Start="0,0"
              End="348.875,34.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,14.1734417344173" />
                  <mssgle:CubicBezierSegment
                    Point1="0,14.1734417344173"
                    Point2="0,18.1734417344173"
                    Point3="4,18.1734417344173" />
                  <mssgle:LineSegment
                    End="344.875,18.1734417344173" />
                  <mssgle:CubicBezierSegment
                    Point1="344.875,18.1734417344173"
                    Point2="348.875,18.1734417344173"
                    Point3="348.875,22.1734417344173" />
                  <mssgle:LineSegment
                    End="348.875,34.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 6]"
          TopLeft="595.5,359">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="162.833333333333,39"
              Start="0,0"
              End="162.833333333333,31.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,19.1903695408735" />
                  <mssgle:CubicBezierSegment
                    Point1="0,19.1903695408735"
                    Point2="0,23.1903695408735"
                    Point3="4,23.1903695408735" />
                  <mssgle:LineSegment
                    End="158.833333333333,23.1903695408735" />
                  <mssgle:CubicBezierSegment
                    Point1="158.833333333333,23.1903695408735"
                    Point2="162.833333333333,23.1903695408735"
                    Point3="162.833333333333,27.1903695408735" />
                  <mssgle:LineSegment
                    End="162.833333333333,31.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 7]"
          TopLeft="539.625,359">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-323.125,37"
              Start="0,0"
              End="-323.125,29.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,4.27812113720643" />
                  <mssgle:CubicBezierSegment
                    Point1="0,4.27812113720643"
                    Point2="0,8.27812113720643"
                    Point3="-4,8.27812113720643" />
                  <mssgle:LineSegment
                    End="-319.125,8.27812113720643" />
                  <mssgle:CubicBezierSegment
                    Point1="-319.125,8.27812113720643"
                    Point2="-323.125,8.27812113720643"
                    Point3="-323.125,12.2781211372064" />
                  <mssgle:LineSegment
                    End="-323.125,29.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 8]"
          TopLeft="558.25,359">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-160.75,36"
              Start="0,0"
              End="-160.75,28.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,8.40083507306889" />
                  <mssgle:CubicBezierSegment
                    Point1="0,8.40083507306889"
                    Point2="0,12.4008350730689"
                    Point3="-4,12.4008350730689" />
                  <mssgle:LineSegment
                    End="-156.75,12.4008350730689" />
                  <mssgle:CubicBezierSegment
                    Point1="-156.75,12.4008350730689"
                    Point2="-160.75,12.4008350730689"
                    Point3="-160.75,16.4008350730689" />
                  <mssgle:LineSegment
                    End="-160.75,28.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 9]"
          TopLeft="576.875,359">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="8.125,36"
              Start="0,0"
              End="8.125,28.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,11.5772357723577" />
                  <mssgle:CubicBezierSegment
                    Point1="0,11.5772357723577"
                    Point2="0,15.5772357723577"
                    Point3="4,15.5772357723577" />
                  <mssgle:LineSegment
                    End="4.125,15.5772357723577" />
                  <mssgle:CubicBezierSegment
                    Point1="4.125,15.5772357723577"
                    Point2="8.125,15.5772357723577"
                    Point3="8.125,19.5772357723577" />
                  <mssgle:LineSegment
                    End="8.125,28.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>