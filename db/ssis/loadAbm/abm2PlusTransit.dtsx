<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="7/13/2020 12:15:03 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="SDG80175"
  DTS:CreatorName="SANDAGNET\gsc"
  DTS:DelayValidation="True"
  DTS:DTSID="{66DFE07C-76E7-43BC-B11B-D2914504BEBE}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:FailParentOnFailure="True"
  DTS:LastModifiedProductVersion="15.0.2000.93"
  DTS:LocaleID="1033"
  DTS:MaxErrorCount="0"
  DTS:ObjectName="abm2PlusTransit"
  DTS:PackageType="5"
  DTS:VersionBuild="28"
  DTS:VersionGUID="{B5A5234F-6B13-47C8-BB3F-3CA20DCACEDA}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:PackageParameters>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:Description="file path of the scenario folder"
      DTS:DTSID="{4C188020-7A81-41FE-98EE-511106113D92}"
      DTS:ObjectName="scenarioFilePath"
      DTS:Required="True">
      <DTS:Property
        DTS:DataType="8"
        DTS:Name="ParameterValue"
        xml:space="preserve"></DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="3"
      DTS:Description="database scenario_id of the scenario"
      DTS:DTSID="{8A8E20EA-0979-41E0-8D15-970A252CEEF6}"
      DTS:ObjectName="scenarioID"
      DTS:Required="True">
      <DTS:Property
        DTS:DataType="3"
        DTS:Name="ParameterValue">0</DTS:Property>
    </DTS:PackageParameter>
  </DTS:PackageParameters>
  <DTS:Variables />
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\insertTransitFacts"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:DelayValidation="True"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{f0803508-d367-4978-8b40-82d1119ee14f}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:FailPackageOnFailure="True"
      DTS:FailParentOnFailure="True"
      DTS:LocaleID="-1"
      DTS:MaxErrorCount="0"
      DTS:ObjectName="insertTransitFacts"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2017 RC1; © 2017 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{A2745192-1304-4CAD-B395-584AC14AA8AD}"
          SQLTask:SqlStatementSource="SET NOCOUNT ON&#xA;DECLARE @scenario_id integer = ?;&#xA;&#xA;&#xA;&#xA;&#xA;-- reseed identity to 0 (sets to 1 since records are in the table) for new scenario&#xA;-- do so only if records are in the table, otherwise seed is already set to 1&#xA;IF EXISTS (SELECT TOP 1 [scenario_id] FROM [fact].[transit_aggflow])&#xA;DBCC CHECKIDENT ('fact.transit_aggflow', RESEED, 0)&#xA;&#xA;-- reseed identity to 0 (sets to 1 since records are in the table) for new scenario&#xA;-- do so only if records are in the table, otherwise seed is already set to 1&#xA;IF EXISTS (SELECT TOP 1 [scenario_id] FROM [fact].[transit_flow])&#xA;DBCC CHECKIDENT ('fact.transit_flow', RESEED, 0)&#xA;&#xA;-- reseed identity to 0 (sets to 1 since records are in the table) for new scenario&#xA;-- do so only if records are in the table, otherwise seed is already set to 1&#xA;IF EXISTS (SELECT TOP 1 [scenario_id] FROM [fact].[transit_onoff])&#xA;DBCC CHECKIDENT ('fact.transit_onoff', RESEED, 0)&#xA;&#xA;&#xA;&#xA;&#xA;-- insert transit aggflow fact -----------------------------------------------&#xA;&#xA;-- insert records to fact table&#xA;INSERT INTO [fact].[transit_aggflow] (&#xA;    [scenario_id]&#xA;    ,[transit_link_id]&#xA;    ,[ab]&#xA;    ,[time_id]&#xA;    ,[mode_transit_id]&#xA;    ,[mode_transit_access_id]&#xA;    ,[transit_flow]&#xA;    ,[non_transit_flow]&#xA;    ,[total_flow]&#xA;    ,[access_walk_flow]&#xA;    ,[xfer_walk_flow]&#xA;    ,[egress_walk_flow])&#xA;SELECT&#xA;    @scenario_id AS [scenario_id]&#xA;    ,[transit_link].[transit_link_id]&#xA;    ,1 AS [ab]&#xA;    ,[time].[time_id]&#xA;    ,[mode_transit].[mode_transit_id]&#xA;    ,[mode_transit_access].[mode_transit_access_id]&#xA;    ,[AB_TransitFlow] AS [transit_flow]&#xA;    ,[AB_NonTransit] AS [non_transit_flow]&#xA;    ,[AB_TotalFlow] AS [total_flow]&#xA;    ,[AB_Access_Walk_Flow] AS [access_walk_flow]&#xA;    ,[AB_Xfer_Walk_Flow] AS [xfer_walk_flow]&#xA;    ,[AB_Egress_Walk_Flow] AS [egress_walk_flow]&#xA;FROM&#xA;    [staging].[transit_aggflow]&#xA;-- have to use inner join since transit_aggflow.csv includes&#xA;-- all [hwycov_id]s instead of just limiting to [trcov_id]s for [LINK_ID] field&#xA;INNER JOIN &#xA;    [dimension].[transit_link]&#xA;ON&#xA;    [transit_link].[scenario_id] = @scenario_id&#xA;    AND [transit_aggflow].[LINK_ID] = [transit_link].[trcov_id]&#xA;LEFT OUTER JOIN  -- throws insert error on unexpected value since column is not nullable&#xA;    [dimension].[time]&#xA;ON&#xA;    -- harcode transit aggflow time of day&#xA;    [time].[abm_half_hour] = 'Not Applicable' AND&#xA;    CASE    WHEN [TOD] = 'EA' THEN '1'&#xA;            WHEN [TOD] = 'AM' THEN '2'&#xA;            WHEN [TOD] = 'MD' THEN '3'&#xA;            WHEN [TOD] = 'PM' THEN '4'&#xA;            WHEN [TOD] = 'EV' THEN '5'&#xA;            ELSE NULL END = [time].[abm_5_tod]&#xA;LEFT OUTER JOIN  -- throws insert error on unexpected value since column is not nullable&#xA;    [dimension].[mode_transit]&#xA;ON&#xA;    -- harcode transit aggflow mode&#xA;&#x9;CASE    WHEN [MODE] = 'ALLPEN' THEN 'Local Bus and Premium Transit'&#xA;            WHEN [MODE] = 'BUS' THEN 'Local Bus'&#xA;            WHEN [MODE] = 'PREM' THEN 'Premium Transit'&#xA;            ELSE NULL END = [mode_transit].[mode_transit_description]&#xA;LEFT OUTER JOIN  -- throws insert error on unexpected value since column is not nullable&#xA;    [dimension].[mode_transit_access]&#xA;ON&#xA;    -- harcode transit aggflow access mode&#xA;&#x9;CASE    WHEN [ACCESSMODE] = 'KNR' THEN 'Kiss and Ride to Transit'&#xA;            WHEN [ACCESSMODE] = 'PNR' THEN 'Park and Ride to Transit'&#xA;            WHEN [ACCESSMODE] = 'WLK' THEN 'Walk to Transit'&#xA;            ELSE NULL END = [mode_transit_access].[mode_transit_access_description]&#xA;WHERE  -- only load records with non-zero flow&#xA;    ISNULL([AB_TransitFlow], 0) + ISNULL([AB_NonTransit], 0) +&#xA;    ISNULL([AB_TotalFlow], 0) + ISNULL([AB_Access_Walk_Flow], 0) +&#xA;    ISNULL([AB_Xfer_Walk_Flow], 0) + ISNULL([AB_Egress_Walk_Flow], 0) &gt; 0&#xA;&#xA;UNION ALL&#xA;&#xA;SELECT&#xA;&#x9;@scenario_id AS [scenario_id]&#xA;&#x9;,[transit_link].[transit_link_id]&#xA;&#x9;,0 AS [ab]&#xA;&#x9;,[time].[time_id]&#xA;&#x9;,[mode_transit].[mode_transit_id]&#xA;&#x9;,[mode_transit_access].[mode_transit_access_id]&#xA;&#x9;,[BA_TransitFlow] AS [transit_flow]&#xA;&#x9;,[BA_NonTransit] AS [non_transit_flow]&#xA;&#x9;,[BA_TotalFlow] AS [total_flow]&#xA;&#x9;,[BA_Access_Walk_Flow] AS [access_walk_flow]&#xA;&#x9;,[BA_Xfer_Walk_Flow] AS [xfer_walk_flow]&#xA;&#x9;,[BA_Egress_Walk_Flow] AS [egress_walk_flow]&#xA;FROM&#xA;    [staging].[transit_aggflow]&#xA;-- have to use inner join since transit_aggflow.csv includes&#xA;-- all [hwycov_id]s instead of just limiting to [trcov_id]s for [LINK_ID] field&#xA;INNER JOIN &#xA;    [dimension].[transit_link]&#xA;ON&#xA;    [transit_link].[scenario_id] = @scenario_id&#xA;    AND [transit_aggflow].[LINK_ID] = [transit_link].[trcov_id]&#xA;LEFT OUTER JOIN  -- throws insert error on unexpected value since column is not nullable&#xA;    [dimension].[time]&#xA;ON&#xA;    -- harcode transit aggflow time of day&#xA;    [time].[abm_half_hour] = 'Not Applicable' AND&#xA;    CASE    WHEN [TOD] = 'EA' THEN '1'&#xA;            WHEN [TOD] = 'AM' THEN '2'&#xA;            WHEN [TOD] = 'MD' THEN '3'&#xA;            WHEN [TOD] = 'PM' THEN '4'&#xA;            WHEN [TOD] = 'EV' THEN '5'&#xA;            ELSE NULL END = [time].[abm_5_tod]&#xA;LEFT OUTER JOIN  -- throws insert error on unexpected value since column is not nullable&#xA;    [dimension].[mode_transit]&#xA;ON&#xA;    -- harcode transit aggflow mode&#xA;&#x9;CASE    WHEN [MODE] = 'ALLPEN' THEN 'Local Bus and Premium Transit'&#xA;            WHEN [MODE] = 'BUS' THEN 'Local Bus'&#xA;            WHEN [MODE] = 'PREM' THEN 'Premium Transit'&#xA;            ELSE NULL END = [mode_transit].[mode_transit_description]&#xA;LEFT OUTER JOIN  -- throws insert error on unexpected value since column is not nullable&#xA;    [dimension].[mode_transit_access]&#xA;ON&#xA;    -- harcode transit aggflow access mode&#xA;&#x9;CASE    WHEN [ACCESSMODE] = 'KNR' THEN 'Kiss and Ride to Transit'&#xA;            WHEN [ACCESSMODE] = 'PNR' THEN 'Park and Ride to Transit'&#xA;            WHEN [ACCESSMODE] = 'WLK' THEN 'Walk to Transit'&#xA;            ELSE NULL END = [mode_transit_access].[mode_transit_access_description]&#xA;WHERE  -- only load records with non-zero flow&#xA;    ISNULL([BA_TransitFlow], 0) + ISNULL([BA_NonTransit], 0) +&#xA;    ISNULL([BA_TotalFlow], 0) + ISNULL([BA_Access_Walk_Flow], 0) +&#xA;    ISNULL([BA_Xfer_Walk_Flow], 0) + ISNULL([BA_Egress_Walk_Flow], 0) &gt; 0&#xA;&#xA;&#xA;&#xA;&#xA;-- insert transit flow fact --------------------------------------------------&#xA;&#xA;-- insert records to fact table&#xA;INSERT INTO [fact].[transit_flow] (&#xA;    [scenario_id]&#xA;    ,[transit_route_id]&#xA;    ,[transit_stop_from_id]&#xA;    ,[transit_stop_to_id]&#xA;    ,[time_id]&#xA;    ,[mode_transit_id]&#xA;    ,[mode_transit_access_id]&#xA;    ,[from_mp]&#xA;    ,[to_mp]&#xA;    ,[baseivtt]&#xA;    ,[cost]&#xA;    ,[transit_flow])&#xA;SELECT&#xA;    @scenario_id AS [scenario_id]&#xA;    ,[transit_route].[transit_route_id]&#xA;    ,[transit_stop_from].[transit_stop_id] AS [transit_stop_from_id]&#xA;    ,[transit_stop_to].[transit_stop_id] AS [transit_stop_to_id]&#xA;    ,[time].[time_id]&#xA;    ,[mode_transit].[mode_transit_id]&#xA;    ,[mode_transit_access].[mode_transit_access_id]&#xA;    ,[FROMMP] AS [from_mp]&#xA;    ,[TOMP] AS [to_mp]&#xA;    ,[BASEIVTT] AS [baseivtt]&#xA;    ,[COST] AS [cost]&#xA;    ,[TRANSITFLOW] AS [transit_flow]&#xA;FROM&#xA;    [staging].[transit_flow]&#xA;LEFT OUTER JOIN  -- throws insert error on unexpected value since column is not nullable&#xA;    [dimension].[transit_route]&#xA;ON&#xA;    [transit_route].[scenario_id] = @scenario_id&#xA;    AND [transit_flow].[ROUTE] = [transit_route].[route_id]&#xA;LEFT OUTER JOIN  -- throws insert error on unexpected value since column is not nullable&#xA;    [dimension].[transit_stop] AS [transit_stop_from]&#xA;ON&#xA;    [transit_stop_from].[scenario_id] = @scenario_id&#xA;    AND [transit_flow].[FROM_STOP] = [transit_stop_from].[stop_id]&#xA;LEFT OUTER JOIN  -- throws insert error on unexpected value since column is not nullable&#xA;    [dimension].[transit_stop] AS [transit_stop_to]&#xA;ON&#xA;    [transit_stop_to].[scenario_id] = @scenario_id&#xA;    AND [transit_flow].[TO_STOP] = [transit_stop_to].[stop_id]&#xA;LEFT OUTER JOIN  -- throws insert error on unexpected value since column is not nullable&#xA;    [dimension].[time]&#xA;ON&#xA;    -- harcode transit flow time of day&#xA;    [time].[abm_half_hour] = 'Not Applicable' AND&#xA;    CASE    WHEN [TOD] = 'EA' THEN '1'&#xA;            WHEN [TOD] = 'AM' THEN '2'&#xA;            WHEN [TOD] = 'MD' THEN '3'&#xA;            WHEN [TOD] = 'PM' THEN '4'&#xA;            WHEN [TOD] = 'EV' THEN '5'&#xA;            ELSE NULL END = [time].[abm_5_tod]&#xA;LEFT OUTER JOIN  -- throws insert error on unexpected value since column is not nullable&#xA;    [dimension].[mode_transit]&#xA;ON&#xA;    -- harcode transit flow mode&#xA;&#x9;CASE    WHEN [MODE] = 'ALLPEN' THEN 'Local Bus and Premium Transit'&#xA;            WHEN [MODE] = 'BUS' THEN 'Local Bus'&#xA;            WHEN [MODE] = 'PREM' THEN 'Premium Transit'&#xA;            ELSE NULL END = [mode_transit].[mode_transit_description]&#xA;LEFT OUTER JOIN  -- throws insert error on unexpected value since column is not nullable&#xA;    [dimension].[mode_transit_access]&#xA;ON&#xA;    -- harcode transit flow access mode&#xA;&#x9;CASE    WHEN [ACCESSMODE] = 'KNR' THEN 'Kiss and Ride to Transit'&#xA;            WHEN [ACCESSMODE] = 'PNR' THEN 'Park and Ride to Transit'&#xA;            WHEN [ACCESSMODE] = 'WLK' THEN 'Walk to Transit'&#xA;            ELSE NULL END = [mode_transit_access].[mode_transit_access_description]&#xA;WHERE  -- only load records with non-zero flow&#xA;    ISNULL([TRANSITFLOW], 0) &gt; 0&#xA;&#xA;&#xA;&#xA;&#xA;-- insert transit on off fact ------------------------------------------------&#xA;&#xA;-- insert records to fact table&#xA;INSERT INTO [fact].[transit_onoff] (&#xA;    [scenario_id]&#xA;    ,[transit_route_id]&#xA;    ,[transit_stop_id]&#xA;    ,[time_id]&#xA;    ,[mode_transit_id]&#xA;    ,[mode_transit_access_id]&#xA;    ,[boardings]&#xA;    ,[alightings]&#xA;    ,[walk_access_on]&#xA;    ,[direct_transfer_on]&#xA;    ,[direct_transfer_off]&#xA;    ,[egress_off])&#xA;SELECT&#xA;&#x9;@scenario_id AS [scenario_id]&#xA;&#x9;,[transit_route].[transit_route_id]&#xA;&#x9;,[transit_stop].[transit_stop_id] AS [transit_stop_id]&#xA;&#x9;,[time].[time_id]&#xA;&#x9;,[mode_transit].[mode_transit_id]&#xA;&#x9;,[mode_transit_access].[mode_transit_access_id]&#xA;&#x9;,[BOARDINGS] AS [boardings]&#xA;    ,[ALIGHTINGS] AS [alightings]&#xA;    ,[WALKACCESSON] AS [walk_access_on]&#xA;    ,[DIRECTTRANSFERON] AS [direct_transfer_on]&#xA;    ,[DIRECTTRANSFEROFF] AS [direct_transfer_off]&#xA;    ,[EGRESSOFF] AS [egress_off]&#xA;FROM&#xA;&#x9;[staging].[transit_onoff]&#xA;LEFT OUTER JOIN  -- throws insert error on unexpected value since column is not nullable&#xA;&#x9;[dimension].[transit_route]&#xA;ON&#xA;&#x9;[transit_route].[scenario_id] = @scenario_id&#xA;&#x9;AND [transit_onoff].[ROUTE] = [transit_route].[route_id]&#xA;-- have to use inner join since transit_onoff.csv includes&#xA;-- non transit stops with 0 data instead of limiting to only valid transit stops&#xA;INNER JOIN&#xA;&#x9;[dimension].[transit_stop]&#xA;ON&#xA;&#x9;[transit_stop].[scenario_id] = @scenario_id&#xA;&#x9;AND [transit_onoff].[STOP] = [transit_stop].[stop_id]&#xA;LEFT OUTER JOIN  -- throws insert error on unexpected value since column is not nullable&#xA;    [dimension].[time]&#xA;ON&#xA;    -- harcode transit flow time of day&#xA;    [time].[abm_half_hour] = 'Not Applicable' AND&#xA;    CASE    WHEN [TOD] = 'EA' THEN '1'&#xA;            WHEN [TOD] = 'AM' THEN '2'&#xA;            WHEN [TOD] = 'MD' THEN '3'&#xA;            WHEN [TOD] = 'PM' THEN '4'&#xA;            WHEN [TOD] = 'EV' THEN '5'&#xA;            ELSE NULL END = [time].[abm_5_tod]&#xA;LEFT OUTER JOIN  -- throws insert error on unexpected value since column is not nullable&#xA;    [dimension].[mode_transit]&#xA;ON&#xA;    -- harcode transit flow mode&#xA;&#x9;CASE    WHEN [MODE] = 'ALLPEN' THEN 'Local Bus and Premium Transit'&#xA;            WHEN [MODE] = 'BUS' THEN 'Local Bus'&#xA;            WHEN [MODE] = 'PREM' THEN 'Premium Transit'&#xA;            ELSE NULL END = [mode_transit].[mode_transit_description]&#xA;LEFT OUTER JOIN  -- throws insert error on unexpected value since column is not nullable&#xA;    [dimension].[mode_transit_access]&#xA;ON&#xA;    -- harcode transit flow access mode&#xA;&#x9;CASE    WHEN [ACCESSMODE] = 'KNR' THEN 'Kiss and Ride to Transit'&#xA;            WHEN [ACCESSMODE] = 'PNR' THEN 'Park and Ride to Transit'&#xA;            WHEN [ACCESSMODE] = 'WLK' THEN 'Walk to Transit'&#xA;            ELSE NULL END = [mode_transit_access].[mode_transit_access_description]&#xA;WHERE  -- only load non-zero on off records&#xA;    ISNULL([BOARDINGS], 0) + ISNULL([ALIGHTINGS], 0) + ISNULL([WALKACCESSON], 0) +&#xA;    ISNULL([DIRECTTRANSFERON], 0) + ISNULL([DIRECTTRANSFEROFF], 0) + ISNULL([EGRESSOFF], 0) &gt; 0&#xA;&#xA;&#xA;&#xA;&#xA;-- load transit TAP park and ride fact ---------------------------------------&#xA;&#xA;-- insert records to fact table&#xA;INSERT INTO [fact].[transit_pnr] (&#xA;    [scenario_id]&#xA;    ,[transit_pnr_id]&#xA;    ,[transit_tap_id]&#xA;    ,[lot_id]&#xA;    ,[geography_id]&#xA;    ,[time_id]&#xA;    ,[parking_type]&#xA;    ,[capacity]&#xA;    ,[distance]&#xA;    ,[vehicles]&#xA;)&#xA;SELECT&#xA;    @scenario_id AS [scenario_id]&#xA;    ,ROW_NUMBER()OVER(ORDER BY [tapID], [timeFiveTod]) AS [transit_pnr_id]&#xA;    ,[transit_tap].[transit_tap_id]&#xA;    ,[lotID] AS [lot_id]&#xA;    ,[geography].[geography_id]&#xA;    ,[time].[time_id]&#xA;    ,[parkingType] AS [parking_type]&#xA;    ,[capacity]&#xA;    ,[distance]&#xA;    ,[vehicles]&#xA;FROM&#xA;    [staging].[transitPNR]&#xA;LEFT OUTER JOIN  -- throws insert error on unexpected value since column is not nullable&#xA;    [dimension].[transit_tap]&#xA;ON&#xA;    [transit_tap].[scenario_id] = @scenario_id&#xA;    AND CONVERT(nvarchar, [transitPNR].[tapID]) = [transit_tap].[tap]&#xA;LEFT OUTER JOIN  -- throws insert error on unexpected value since column is not nullable&#xA;    [dimension].[geography]&#xA;ON&#xA;    [geography].[mgra_13] = 'Not Applicable'&#xA;    AND CONVERT(nvarchar, [transitPNR].[lotTAZ]) = [geography].[taz_13]&#xA;LEFT OUTER JOIN  -- throws insert error on unexpected value since column is not nullable&#xA;    [dimension].[time]&#xA;ON&#xA;    [time].[abm_half_hour] = 'Not Applicable'&#xA;    AND CONVERT(nvarchar, [transitPNR].[timeFiveTod]) = [time].[abm_5_tod]&#xA;&#xA;&#xA;&#xA;&#xA;-- drop staging tables -------------------------------------------------------&#xA;DROP TABLE IF EXISTS [staging].[transit_aggflow]&#xA;DROP TABLE IF EXISTS [staging].[transit_flow]&#xA;DROP TABLE IF EXISTS [staging].[transit_onoff]&#xA;DROP TABLE IF EXISTS [staging].[transitPNR]&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
          <SQLTask:ParameterBinding
            SQLTask:ParameterName="0"
            SQLTask:DtsVariableName="$Package::scenarioID"
            SQLTask:ParameterDirection="Input"
            SQLTask:DataType="131"
            SQLTask:ParameterSize="-1" />
        </SQLTask:SqlTaskData>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\insertTransitNetwork"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:DelayValidation="True"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{0b69cc91-67c3-47ef-af8a-71a867db5eac}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:FailPackageOnFailure="True"
      DTS:FailParentOnFailure="True"
      DTS:LocaleID="-1"
      DTS:MaxErrorCount="0"
      DTS:ObjectName="insertTransitNetwork"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2017 RC1; © 2017 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{A2745192-1304-4CAD-B395-584AC14AA8AD}"
          SQLTask:SqlStatementSource="SET NOCOUNT ON&#xA;DECLARE @scenario_id integer = ?;&#xA;&#xA;&#xA;&#xA;&#xA;-- insert transit network link dimension -------------------------------------&#xA;&#xA;-- insert records to dimension table&#xA;-- EMME represents bi-direction as seperate AB-BA links&#xA;-- only take AB direction links to represent as input trcov.e00 ARC layer does&#xA;INSERT INTO [dimension].[transit_link] (&#xA;    [scenario_id]&#xA;    ,[transit_link_id]&#xA;    ,[trcov_id]&#xA;    ,[transit_link_shape])&#xA;SELECT&#xA;    @scenario_id AS [scenario_id]&#xA;    ,ROW_NUMBER()OVER(ORDER BY [trcovId]) AS [transit_link_id]&#xA;    ,[trcovId] AS [trcov_id]&#xA;    ,geometry::STGeomFromText(REPLACE([geometry], '&quot;', ''), 2230).MakeValid() AS [transit_link_shape]  -- hardcoded NAD83 CA State Plane VI SRID&#xA;FROM&#xA;    [staging].[transitLink]&#xA;WHERE&#xA;    [AB] = 1  &#xA;&#xA;&#xA;&#xA;&#xA;-- insert transit network route dimension ------------------------------------&#xA;&#xA;-- insert records to dimension table&#xA;INSERT INTO [dimension].[transit_route] (&#xA;    [scenario_id]&#xA;    ,[transit_route_id]&#xA;    ,[route_id]&#xA;    ,[route_name]&#xA;    ,[mode_transit_route_id]&#xA;    ,[am_headway]&#xA;    ,[pm_headway]&#xA;    ,[op_headway]&#xA;    ,[nt_headway]&#xA;    ,[nt_hour]&#xA;    ,[config]&#xA;    ,[fare]&#xA;    ,[transit_route_shape])&#xA;SELECT&#xA;&#x9;@scenario_id AS [scenario_id]&#xA;&#x9;,ROW_NUMBER()OVER(ORDER BY [Route_ID]) AS [transit_route_id]&#xA;&#x9;,[Route_ID] AS [route_id]&#xA;&#x9;,[Route_Name] AS [route_name]&#xA;&#x9;,[mode_transit_route].[mode_transit_route_id]&#xA;&#x9;,[AM_Headway] AS [am_headway]&#xA;&#x9;,[PM_Headway] AS [pm_headway]&#xA;&#x9;,[OP_Headway] AS [op_headway]&#xA;                ,[Night_Headway] AS [nt_headway]&#xA;                ,[Night_Hour] AS [nt_hour]&#xA;&#x9;,[Config] AS [config]&#xA;&#x9;,[Fare] AS [fare]&#xA;&#x9;,geometry::STGeomFromText(REPLACE([geometry], '&quot;', ''), 2230).MakeValid() AS [transit_route_shape]  -- hardcoded NAD83 CA State Plane VI SRID&#xA;FROM&#xA;&#x9;[staging].[transitRoute]&#xA;LEFT OUTER JOIN -- throws insert error on unexpected value since column is not nullable&#xA;&#x9;[dimension].[mode_transit_route]&#xA;ON  -- hardcoded route modes&#xA;&#x9;CASE    WHEN [transitRoute].[Mode] = 4 THEN 'Commuter Rail'&#xA;            WHEN [transitRoute].[Mode] = 5 THEN 'Light Rail'&#xA;            WHEN [transitRoute].[Mode] = 6 THEN 'Freeway Rapid'&#xA;            WHEN [transitRoute].[Mode] = 7 THEN 'Arterial Rapid'&#xA;            WHEN [transitRoute].[Mode] = 8 THEN 'Premium Express Bus'&#xA;            WHEN [transitRoute].[Mode] = 9 THEN 'Express Bus'&#xA;            WHEN [transitRoute].[Mode] = 10 THEN 'Local Bus'&#xA;            ELSE NULL END = [mode_transit_route].[mode_transit_route_description]&#xA;&#xA;&#xA;&#xA;&#xA;-- insert transit network stop dimension -------------------------------------&#xA;&#xA;-- insert records to dimension table&#xA;-- relies on transit network link and route dimensions&#xA;INSERT INTO [dimension].[transit_stop] (&#xA;    [scenario_id]&#xA;    ,[transit_stop_id]&#xA;    ,[transit_route_id]&#xA;    ,[transit_link_id]&#xA;    ,[stop_id]&#xA;    ,[route_id]&#xA;    ,[trcov_id]&#xA;    ,[mp]&#xA;    ,[near_node]&#xA;    ,[fare_zone]&#xA;    ,[stop_name]&#xA;    ,[transit_stop_shape])&#xA;SELECT&#xA;&#x9;@scenario_id AS [scenario_id]&#xA;&#x9;,ROW_NUMBER()OVER(ORDER BY [Stop_ID]) AS [transit_stop_id]&#xA;&#x9;,[transit_route].[transit_route_id]&#xA;&#x9;,[transit_link].[transit_link_id]&#xA;&#x9;,[Stop_ID] AS [stop_id]&#xA;&#x9;,[transitStop].[Route_ID] AS [route_id]&#xA;&#x9;,[transitStop].[Link_ID] AS [trcov_id]&#xA;&#x9;,[Milepost] AS [mp]&#xA;&#x9;,[NearNode] AS [near_node]&#xA;&#x9;,[FareZone] as [fare_zone]&#xA;&#x9;,[StopName] AS [stop_name]&#xA;&#x9;,geometry::STGeomFromText(REPLACE([geometry], '&quot;', ''), 2230) AS [transit_stop_shape]  -- hardcoded NAD83 CA State Plane VI SRID&#xA;FROM&#xA;&#x9;[staging].[transitStop]&#xA;LEFT OUTER JOIN  -- throws insert error on unexpected value since column is not nullable&#xA;&#x9;[dimension].[transit_route]&#xA;ON&#xA;&#x9;[transit_route].[scenario_id] = @scenario_id AND&#xA;&#x9;[transitStop].[Route_ID] = [transit_route].[route_id]&#xA;LEFT OUTER JOIN  -- throws insert error on unexpected value since column is not nullable&#xA;&#x9;[dimension].[transit_link]&#xA;ON&#xA;&#x9;[transit_link].[scenario_id] = @scenario_id AND&#xA;&#x9;[transitStop].[Link_ID] = [transit_link].[trcov_id]&#xA;&#xA;&#xA;&#xA;&#xA;-- insert transit network tap dimension --------------------------------------&#xA;&#xA;-- insert records to dimension table&#xA;INSERT INTO [dimension].[transit_tap] (&#xA;    [scenario_id]&#xA;    ,[transit_tap_id]&#xA;    ,[tap]&#xA;    ,[transit_tap_shape])&#xA;SELECT  -- insert NULL record&#xA;    @scenario_id AS [scenario_id]&#xA;    ,0  -- NULL record&#xA;    ,'Not Applicable' AS [tap]&#xA;    ,NULL AS [transit_tap_shape]&#xA;UNION ALL&#xA;SELECT&#xA;    @scenario_id AS [scenario_id]&#xA;    ,ROW_NUMBER()OVER(ORDER BY [tapID]) AS [transit_tap_id]&#xA;    ,CONVERT(nvarchar, [tapID]) AS [tap]&#xA;&#x9;,geometry::STGeomFromText(REPLACE([geometry], '&quot;', ''), 2230) AS [transit_tap_shape]  -- hardcoded NAD83 CA State Plane VI SRID&#xA;FROM&#xA;&#x9;[staging].[transitTap]&#xA;&#xA;&#xA;&#xA;&#xA;-- drop staging tables -------------------------------------------------------&#xA;DROP TABLE IF EXISTS [staging].[transitLink]&#xA;DROP TABLE IF EXISTS [staging].[transitRoute]&#xA;DROP TABLE IF EXISTS [staging].[transitStop]&#xA;DROP TABLE IF EXISTS [staging].[transitTap]&#xA;&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
          <SQLTask:ParameterBinding
            SQLTask:ParameterName="0"
            SQLTask:DtsVariableName="$Package::scenarioID"
            SQLTask:ParameterDirection="Input"
            SQLTask:DataType="131"
            SQLTask:ParameterSize="-1" />
        </SQLTask:SqlTaskData>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\loadTransit"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:DelayValidation="True"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{74f013b1-bb82-4875-bf86-061fd78c8023}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:FailPackageOnFailure="True"
      DTS:FailParentOnFailure="True"
      DTS:LocaleID="-1"
      DTS:MaxErrorCount="0"
      DTS:ObjectName="loadTransit"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2017 RC1; © 2017 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{A2745192-1304-4CAD-B395-584AC14AA8AD}"
          SQLTask:SqlStatementSource="SET NOCOUNT ON&#xA;-- set path to completed ABM scenario folder&#xA;DECLARE @folder nvarchar(max) = ?;&#xA;&#xA;&#xA;&#xA;&#xA;-- load transit aggflow ------------------------------------------------------&#xA;&#xA;-- create staging table&#xA;DROP TABLE IF EXISTS [staging].[transit_aggflow]&#xA;CREATE TABLE [staging].[transit_aggflow] (&#xA;    [MODE] nvarchar(10) NOT NULL,&#xA;    [ACCESSMODE] nvarchar(5) NOT NULL,&#xA;    [TOD] nvarchar(5) NOT NULL,&#xA;    [LINK_ID] int NOT NULL,&#xA;    [AB_TransitFlow] float NOT NULL,&#xA;    [BA_TransitFlow] float NOT NULL,&#xA;    [AB_NonTransit] float NOT NULL,&#xA;    [BA_NonTransit] float NOT NULL,&#xA;    [AB_TotalFlow] float NOT NULL,&#xA;    [BA_TotalFlow] float NOT NULL,&#xA;    [AB_Access_Walk_Flow] float NOT NULL,&#xA;    [BA_Access_Walk_Flow] float NOT NULL,&#xA;    [AB_Xfer_Walk_Flow] float NOT NULL,&#xA;    [BA_Xfer_Walk_Flow] float NOT NULL,&#xA;    [AB_Egress_Walk_Flow] float NOT NULL,&#xA;    [BA_Egress_Walk_Flow] float NOT NULL,&#xA;    CONSTRAINT pk_staging_transitAggFlow PRIMARY KEY([MODE], [ACCESSMODE], [TOD], [LINK_ID]))&#xA;WITH (DATA_COMPRESSION = PAGE)&#xA;&#xA;-- bulk load into staging table&#xA;DECLARE @sqlTransitAggflow nvarchar(max) = '&#xA;&#x9;BULK INSERT [staging].[transit_aggflow]&#xA;&#x9;FROM  ''' + @folder + '\report\transit_aggflow.csv'' &#xA;&#x9;WITH &#xA;&#x9;( &#xA;&#x9;&#x9;FIRSTROW = 2,&#xA;&#x9;&#x9;FIELDTERMINATOR = '','', &#xA;&#x9;&#x9;ROWTERMINATOR = ''\n'',&#xA;&#x9;&#x9;MAXERRORS = 0,&#xA;&#x9;&#x9;TABLOCK&#xA;&#x9;)'&#xA;EXEC sp_executesql @sqlTransitAggflow&#xA;&#xA;&#xA;&#xA;&#xA;-- load transit flow ---------------------------------------------------------&#xA;&#xA;-- create staging table&#xA;DROP TABLE IF EXISTS [staging].[transit_flow]&#xA;CREATE TABLE [staging].[transit_flow] (&#xA;    [MODE] nvarchar(10) NOT NULL,&#xA;    [ACCESSMODE] nvarchar(5) NOT NULL,&#xA;    [TOD] nvarchar(5) NOT NULL,&#xA;    [ROUTE] int NOT NULL,&#xA;    [FROM_STOP] int NOT NULL,&#xA;    [TO_STOP] int NOT NULL,&#xA;    [CENTROID] float NOT NULL,&#xA;    [FROMMP] float NOT NULL,&#xA;    [TOMP] float NOT NULL,&#xA;    [TRANSITFLOW] float NOT NULL,&#xA;    [BASEIVTT] float NOT NULL,&#xA;    [COST] float NOT NULL,&#xA;    [VOC] float NULL,  -- allow NULLs&#xA;    CONSTRAINT pk_staging_transitFlow PRIMARY KEY([MODE], [ACCESSMODE], [TOD], [ROUTE], [FROM_STOP], [TO_STOP]))&#xA;WITH (DATA_COMPRESSION = PAGE)&#xA;&#xA;-- bulk load into staging table&#xA;DECLARE @sqlTransitFlow nvarchar(max) = '&#xA;&#x9;BULK INSERT [staging].[transit_flow]&#xA;&#x9;FROM  ''' + @folder + '\report\transit_flow.csv'' &#xA;&#x9;WITH &#xA;&#x9;( &#xA;&#x9;&#x9;FIRSTROW = 2,&#xA;&#x9;&#x9;FIELDTERMINATOR = '','', &#xA;&#x9;&#x9;ROWTERMINATOR = ''\n'',&#xA;&#x9;&#x9;MAXERRORS = 0,&#xA;&#x9;&#x9;TABLOCK&#xA;&#x9;)'&#xA;EXEC sp_executesql @sqlTransitFlow&#xA;&#xA;&#xA;&#xA;&#xA;-- load transit link ---------------------------------------------------------&#xA;&#xA;-- create staging table&#xA;DROP TABLE IF EXISTS [staging].[transitLink]&#xA;CREATE TABLE [staging].[transitLink] (&#xA;    [trcovID] float NOT NULL,&#xA;    [AB] int NOT NULL,&#xA;    [geometry] nvarchar(max) NOT NULL,&#xA;    CONSTRAINT pk_staging_transitLink PRIMARY KEY([trcovID], [AB]))&#xA;WITH (DATA_COMPRESSION = PAGE)&#xA;&#xA;-- bulk load into staging table&#xA;DECLARE @sqlTransitLink nvarchar(max) = '&#xA;&#x9;BULK INSERT [staging].[transitLink]&#xA;&#x9;FROM  ''' + @folder + '\report\transitLink.csv'' &#xA;&#x9;WITH &#xA;&#x9;( &#xA;&#x9;&#x9;FIRSTROW = 2,&#xA;&#x9;&#x9;FIELDTERMINATOR = '','', &#xA;&#x9;&#x9;ROWTERMINATOR = ''\n'',&#xA;&#x9;&#x9;MAXERRORS = 0,&#xA;&#x9;&#x9;TABLOCK&#xA;&#x9;)'&#xA;EXEC sp_executesql @sqlTransitLink&#xA;&#xA;&#xA;&#xA;&#xA;-- load transit on off -------------------------------------------------------&#xA;&#xA;-- create staging table&#xA;DROP TABLE IF EXISTS [staging].[transit_onoff]&#xA;CREATE TABLE [staging].[transit_onoff] (&#xA;    [MODE] nvarchar(10) NOT NULL,&#xA;    [ACCESSMODE] nvarchar(5) NOT NULL,&#xA;    [TOD] nvarchar(5) NOT NULL,&#xA;    [ROUTE] int NOT NULL,&#xA;    [STOP] int NOT NULL,&#xA;    [BOARDINGS] float NOT NULL,&#xA;    [ALIGHTINGS] float NOT NULL,&#xA;    [WALKACCESSON] float NOT NULL,&#xA;    [DIRECTTRANSFERON] float NOT NULL,&#xA;    [WALKTRANSFERON] float NOT NULL,&#xA;    [DIRECTTRANSFEROFF] float NOT NULL,&#xA;    [WALKTRANSFEROFF] float NOT NULL,&#xA;    [EGRESSOFF] float NOT NULL,&#xA;    CONSTRAINT pk_staging_transitOnOff PRIMARY KEY([MODE], [ACCESSMODE], [TOD], [ROUTE], [STOP]))&#xA;WITH (DATA_COMPRESSION = PAGE)&#xA;&#xA;-- bulk load into staging table&#xA;DECLARE @sqlTransitOnOff nvarchar(max) = '&#xA;&#x9;BULK INSERT [staging].[transit_onoff]&#xA;&#x9;FROM  ''' + @folder + '\report\transit_onoff.csv'' &#xA;&#x9;WITH &#xA;&#x9;( &#xA;&#x9;&#x9;FIRSTROW = 2,&#xA;&#x9;&#x9;FIELDTERMINATOR = '','', &#xA;&#x9;&#x9;ROWTERMINATOR = ''\n'',&#xA;&#x9;&#x9;MAXERRORS = 0,&#xA;&#x9;&#x9;TABLOCK&#xA;&#x9;)'&#xA;EXEC sp_executesql @sqlTransitOnOff&#xA;&#xA;&#xA;&#xA;&#xA;-- load transit park and ride ------------------------------------------------&#xA;&#xA;-- create staging table&#xA;DROP TABLE IF EXISTS [staging].[transitPNR]&#xA;CREATE TABLE [staging].[transitPNR] (&#xA;    [tapID] int NOT NULL,&#xA;    [lotID] int NOT NULL,&#xA;    [lotTAZ] int NOT NULL,&#xA;    [timeFiveTod] int NOT NULL,&#xA;    [parkingType] nvarchar(60) NOT NULL,&#xA;    [capacity] int NOT NULL,&#xA;    [distance] float NOT NULL,&#xA;    [vehicles] float NOT NULL,&#xA;    CONSTRAINT pk_staging_transitPNR PRIMARY KEY([tapID], [timeFiveTod]))&#xA;WITH (DATA_COMPRESSION = PAGE)&#xA;&#xA;-- bulk load into staging table&#xA;DECLARE @sqlTransitPNR nvarchar(max) = '&#xA;&#x9;BULK INSERT [staging].[transitPNR]&#xA;&#x9;FROM  ''' + @folder + '\report\transitPNR.csv'' &#xA;&#x9;WITH &#xA;&#x9;( &#xA;&#x9;&#x9;FIRSTROW = 2,&#xA;&#x9;&#x9;FIELDTERMINATOR = '','', &#xA;&#x9;&#x9;ROWTERMINATOR = ''\n'',&#xA;&#x9;&#x9;MAXERRORS = 0,&#xA;&#x9;&#x9;TABLOCK&#xA;&#x9;)'&#xA;EXEC sp_executesql @sqlTransitPNR&#xA;&#xA;&#xA;&#xA;&#xA;-- load transit route --------------------------------------------------------&#xA;&#xA;-- create staging table&#xA;DROP TABLE IF EXISTS [staging].[transitRoute]&#xA;CREATE TABLE [staging].[transitRoute] (&#xA;    [Route_ID] int NOT NULL,&#xA;    [Route_Name] int NOT NULL,&#xA;    [Mode] int NOT NULL,&#xA;    [AM_Headway] float NOT NULL,&#xA;    [PM_Headway] float NOT NULL,&#xA;    [OP_Headway] float NOT NULL,&#xA;    [Night_Headway] float NOT NULL,&#xA;    [Night_Hour] int NOT NULL,&#xA;    [Config] int NOT NULL,&#xA;    [Fare] float NOT NULL,&#xA;    [geometry] nvarchar(max) NOT NULL,&#xA;    CONSTRAINT pk_staging_transitRoute PRIMARY KEY([Route_ID]))&#xA;WITH (DATA_COMPRESSION = PAGE)&#xA;&#xA;-- bulk load into staging table&#xA;DECLARE @sqlTransitRoute nvarchar(max) = '&#xA;&#x9;BULK INSERT [staging].[transitRoute]&#xA;&#x9;FROM  ''' + @folder + '\report\transitRoute.csv'' &#xA;&#x9;WITH &#xA;&#x9;( &#xA;&#x9;&#x9;FIRSTROW = 2,&#xA;&#x9;&#x9;FIELDTERMINATOR = '','', &#xA;&#x9;&#x9;ROWTERMINATOR = ''\n'',&#xA;&#x9;&#x9;MAXERRORS = 0,&#xA;&#x9;&#x9;TABLOCK&#xA;&#x9;)'&#xA;EXEC sp_executesql @sqlTransitRoute&#xA;&#xA;&#xA;&#xA;&#xA;-- load transit stop ---------------------------------------------------------&#xA;&#xA;-- create staging table&#xA;DROP TABLE IF EXISTS [staging].[transitStop]&#xA;CREATE TABLE [staging].[transitStop] (&#xA;    [Stop_ID] int NOT NULL,&#xA;    [Route_ID] int NOT NULL,&#xA;    [Link_ID] int NOT NULL,&#xA;    [Pass_Count] int NOT NULL,&#xA;    [Milepost] float NOT NULL,&#xA;    [Longitude] int NOT NULL,&#xA;    [Latitude] int NOT NULL,&#xA;    [NearNode] int NOT NULL,&#xA;    [FareZone] int NOT NULL,&#xA;    [StopName] nvarchar(100),&#xA;    [geometry] nvarchar(max) NOT NULL,&#xA;    CONSTRAINT pk_staging_transitStop PRIMARY KEY([Stop_ID]))&#xA;WITH (DATA_COMPRESSION = PAGE)&#xA;&#xA;-- bulk load into staging table&#xA;DECLARE @sqlTransitStop nvarchar(max) = '&#xA;&#x9;BULK INSERT [staging].[transitStop]&#xA;&#x9;FROM  ''' + @folder + '\report\transitStop.csv'' &#xA;&#x9;WITH &#xA;&#x9;( &#xA;&#x9;&#x9;FIRSTROW = 2,&#xA;&#x9;&#x9;FIELDTERMINATOR = '','', &#xA;&#x9;&#x9;ROWTERMINATOR = ''\n'',&#xA;&#x9;&#x9;MAXERRORS = 0,&#xA;&#x9;&#x9;TABLOCK&#xA;&#x9;)'&#xA;EXEC sp_executesql @sqlTransitStop&#xA;&#xA;&#xA;&#xA;&#xA;-- load transit TAP ----------------------------------------------------------&#xA;&#xA;-- create staging table&#xA;DROP TABLE IF EXISTS [staging].[transitTap]&#xA;CREATE TABLE [staging].[transitTap] (&#xA;    [tapID] float NOT NULL,&#xA;    [geometry] nvarchar(max) NOT NULL,&#xA;    CONSTRAINT pk_staging_transitTap PRIMARY KEY([tapID]))&#xA;WITH (DATA_COMPRESSION = PAGE)&#xA;&#xA;-- bulk load into staging table&#xA;DECLARE @sqlTransitTap nvarchar(max) = '&#xA;&#x9;BULK INSERT [staging].[transitTap]&#xA;&#x9;FROM  ''' + @folder + '\report\transitTap.csv'' &#xA;&#x9;WITH &#xA;&#x9;( &#xA;&#x9;&#x9;FIRSTROW = 2,&#xA;&#x9;&#x9;FIELDTERMINATOR = '','', &#xA;&#x9;&#x9;ROWTERMINATOR = ''\n'',&#xA;&#x9;&#x9;MAXERRORS = 0,&#xA;&#x9;&#x9;TABLOCK&#xA;&#x9;)'&#xA;EXEC sp_executesql @sqlTransitTap&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
          <SQLTask:ParameterBinding
            SQLTask:ParameterName="0"
            SQLTask:DtsVariableName="$Package::scenarioFilePath"
            SQLTask:ParameterDirection="Input"
            SQLTask:DataType="130"
            SQLTask:ParameterSize="200" />
        </SQLTask:SqlTaskData>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:PrecedenceConstraints>
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint]"
      DTS:CreationName=""
      DTS:DTSID="{6ffaf77d-5421-4574-9092-6cb2c454df2b}"
      DTS:From="Package\loadTransit"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint"
      DTS:To="Package\insertTransitNetwork" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 1]"
      DTS:CreationName=""
      DTS:DTSID="{9b85c051-f302-41b9-bc26-90504165b5f4}"
      DTS:From="Package\insertTransitNetwork"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 1"
      DTS:To="Package\insertTransitFacts" />
  </DTS:PrecedenceConstraints>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="8" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml">
        <NodeLayout
          Size="167,42"
          Id="Package\insertTransitFacts"
          TopLeft="152,231" />
        <NodeLayout
          Size="180,42"
          Id="Package\insertTransitNetwork"
          TopLeft="143,150" />
        <NodeLayout
          Size="134,42"
          Id="Package\loadTransit"
          TopLeft="166,72" />
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint]"
          TopLeft="233,114">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,36"
              Start="0,0"
              End="0,28.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,28.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 1]"
          TopLeft="234.25,192">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,39"
              Start="0,0"
              End="0,31.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,31.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>